{
	"info": {
		"_postman_id": "9bd57754-a59e-4106-9010-526d497beeb3",
		"name": "regressionFloor",
		"description": "This is a regression script around Floor node.\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POST Organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Organization\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OrganizationName\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Output node Id\r",
							"pm.test(\"Organization Id: \" + postman.getGlobalVariable(\"OrganizationId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Organization\",\r\n\t\t\"name\": \"OrganizationName\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Organization",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Organization"
					]
				},
				"description": "Creates an Organization."
			},
			"response": []
		},
		{
			"name": "POST Organization Contains EncSystem",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"EncSystem\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"EncSystemName\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationContainsEncSystemId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"OrganizationId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"EncSystem\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Organization\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Organization Id: \" + postman.getGlobalVariable(\"OrganizationId\"), function () {});\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Organizational to EncSystem: \" + postman.getGlobalVariable(\"OrganizationContainsEncSystemId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"EncSystem\",\r\n\t\t\"DBStatus\": \"new\",\r\n\t\t\"Enable3D\": true,\r\n\t\t\"Enable4hrExtensionTime\": false,\r\n\t\t\"FormatStrings\": {\r\n\t\t\t\"default\": \"%type% %refaddress%\",\r\n    \t\t\"FixtureModel\": \"%type% %refaddress%\"\r\n\t\t},\r\n\t\t\"TimeZone\": {\r\n    \t\t\"PolarisId\": \"TimeZone_Eastern_Standard_Time\",\r\n    \t\t\"Offset\": -180000000000\r\n\t\t},\r\n\t\t\"Name\": \"EncSystemName\",\r\n\t\t\"Customer\": \"CustomerName\",\r\n\t\t\"Notes\": \"Additional Notes\",\r\n\t\t\"SiteAddress\": \"53 street st\",\r\n\t\t\"SiteLatitude\": \"43.8563\",\r\n\t\t\"SiteLongitude\": \"-79.37784\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Organization\",\r\n\t\t\"outNodeId\": \"{{OrganizationId}}\"\r\n\t}\r\n}\r\n\r\n"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EncSystem",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EncSystem"
					]
				},
				"description": "Creates an EncSystem contains by the Organization."
			},
			"response": []
		},
		{
			"name": "POST Floorplan EGF",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "164f7a86-5502-43b4-87f6-3a374b257070",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.hasOwnProperty(\"url\")).to.eql(true);\r",
							"    \r",
							"    var http_local = postman.getGlobalVariable(\"http\");\r",
							"    var env_local = postman.getGlobalVariable(\"env\");\r",
							"    var urlResource_local = postman.getGlobalVariable(\"urlResource\");\r",
							"    var organizationId_local = postman.getGlobalVariable(\"OrganizationId\");\r",
							"    var encSystemId_local = postman.getGlobalVariable(\"EncSystemId\");\r",
							"    var resourceName_local = postman.getGlobalVariable(\"resourceEGFName\");\r",
							"    var expectedUrl = http_local + env_local + urlResource_local + \"/v1/resources/\" + organizationId_local + \"/\" + encSystemId_local + \"/\" + resourceName_local + \".egf\";\r",
							"    pm.expect(jsonData.url).to.eql(expectedUrl);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7f3f189c-78d6-4255-83b4-270a8fb117c5",
						"exec": [
							"var uuid = require('uuid');\r",
							"postman.setGlobalVariable('resourceEGFName', uuid.v4());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "resource",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "resource",
							"type": "file",
							"src": "{{filePath}}sample_floorplan.egf"
						}
					]
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlResource}}/v1/resources/{{OrganizationId}}/{{EncSystemId}}/{{resourceEGFName}}.egf",
					"host": [
						"{{http}}{{env}}{{urlResource}}"
					],
					"path": [
						"v1",
						"resources",
						"{{OrganizationId}}",
						"{{EncSystemId}}",
						"{{resourceEGFName}}.egf"
					]
				},
				"description": "Uploads a resource, such as a floorplan"
			},
			"response": []
		},
		{
			"name": "POST Floorplan SVG",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "164f7a86-5502-43b4-87f6-3a374b257070",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.hasOwnProperty(\"url\")).to.eql(true);\r",
							"    \r",
							"    var http_local = postman.getGlobalVariable(\"http\");\r",
							"    var env_local = postman.getGlobalVariable(\"env\");\r",
							"    var urlResource_local = postman.getGlobalVariable(\"urlResource\");\r",
							"    var organizationId_local = postman.getGlobalVariable(\"OrganizationId\");\r",
							"    var encSystemId_local = postman.getGlobalVariable(\"EncSystemId\");\r",
							"    var resourceName_local = postman.getGlobalVariable(\"resourceSVGName\");\r",
							"    var expectedUrl = http_local + env_local + urlResource_local + \"/v1/resources/\" + organizationId_local + \"/\" + encSystemId_local + \"/\" + resourceName_local + \".svg\";\r",
							"    pm.expect(jsonData.url).to.eql(expectedUrl);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7f3f189c-78d6-4255-83b4-270a8fb117c5",
						"exec": [
							"var uuid = require('uuid');\r",
							"postman.setGlobalVariable('resourceSVGName', uuid.v4());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "resource",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "resource",
							"type": "file",
							"src": "{{filePath}}410.svg"
						}
					]
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlResource}}/v1/resources/{{OrganizationId}}/{{EncSystemId}}/{{resourceSVGName}}.svg",
					"host": [
						"{{http}}{{env}}{{urlResource}}"
					],
					"path": [
						"v1",
						"resources",
						"{{OrganizationId}}",
						"{{EncSystemId}}",
						"{{resourceSVGName}}.svg"
					]
				},
				"description": "Uploads a resource, such as a floorplan"
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains Building",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Building\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"BuildingName is Zone [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"BuildingId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsBuildingId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"BuildingId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Building\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"Building1 Id: \" + postman.getGlobalVariable(\"Building1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to Building: \" + postman.getGlobalVariable(\"EncSystemContainsBuildingId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Building\",\r\n\t\t\"SyncState\": 2,\r\n\t\t\"Name\": \"BuildingName is Zone [0064-FFFF]\",\r\n\t\t\"Caption\": \"Zone\",\r\n\t\t\"ObjectType\": 245,\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"ZOrder\": 2,\r\n\t\t\"EnableScenes\": true,\r\n\t\t\"EnableControllable\": true,\r\n\t\t\"EnablePC\": true,\r\n\t\t\"BacNetIndex\": -1,\r\n\t\t\"ComponentType\": 10,\r\n\t\t\"PCS_ActivityOnly\": false,\r\n\t\t\"PreviousEcu\": \"13165559-9116-4921-A22B-3679BE039017\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"OcsAutoTurnOn\": true,\r\n\t\t\"TimeScheduleAutoTurnOn\": true,\r\n\t\t\"OccupancyToTurnOnSchedule\": true,\r\n\t\t\"OcsExtensionTime\": 60,\r\n\t\t\"OcsManualUserExtensionTime\": 1200,\r\n\t\t\"VacancyExtensionTime\": 60,\r\n\t\t\"TwoStageExtensionTime\": 1200,\r\n\t\t\"StandbyOffBehaviour\": \"StandbyBrightness\",\r\n\t\t\"ManualFadeToOff\": 60,\r\n\t\t\"OccupancyFadeToOff\": 1200,\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Building",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Building"
					]
				},
				"description": "Creates a Building contains by the EncSystem."
			},
			"response": []
		},
		{
			"name": "GET Floor Schema",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "72225d8d-54ab-493d-8ab4-579787d09bda",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.type).to.eql(\"object\", \"Failed at type line.\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.caption.required).to.eql(true, \"Failed at properties line caption.required.\");\r",
							"    pm.expect(jsonData.properties.caption.type[0]).to.eql(\"string\", \"Failed at properties line caption.type[0].\");\r",
							"    pm.expect(jsonData.properties.caption.type[1]).to.eql(\"null\", \"Failed at properties line caption.type[1].\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.changeId.required).to.eql(true, \"Failed at properties line changeId.required.\");\r",
							"    pm.expect(jsonData.properties.changeId.type[0]).to.eql(\"string\", \"Failed at properties line changeId.type[0].\");\r",
							"    pm.expect(jsonData.properties.changeId.type[1]).to.eql(\"null\", \"Failed at properties line changeId.type[1].\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.floorLevel.required).to.eql(true, \"Failed at properties line floorLevel.required.\");\r",
							"    pm.expect(jsonData.properties.floorLevel.type).to.eql(\"integer\", \"Failed at properties line floorLevel.type.\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.displayMode.required).to.eql(true, \"Failed at properties line displayMode.required.\");\r",
							"    pm.expect(jsonData.properties.displayMode.type[0]).to.eql(\"string\", \"Failed at properties line displayMode.type[0].\");\r",
							"    pm.expect(jsonData.properties.displayMode.type[1]).to.eql(\"null\", \"Failed at properties line displayMode.type[1].\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.visibleLayers.required).to.eql(true, \"Failed at properties line visibleLayers.required.\");\r",
							"    pm.expect(jsonData.properties.visibleLayers.type[0]).to.eql(\"array\", \"Failed at properties line visibleLayers.type[0].\");\r",
							"    pm.expect(jsonData.properties.visibleLayers.type[1]).to.eql(\"null\", \"Failed at properties line visibleLayers.type[1].\");\r",
							"    pm.expect(jsonData.properties.visibleLayers.items.type).to.eql(\"integer\", \"Failed at properties line visibleLayers.items.type.\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.colorType.required).to.eql(true, \"Failed at properties line colorType.required.\");\r",
							"    pm.expect(jsonData.properties.colorType.type[0]).to.eql(\"string\", \"Failed at properties line colorType.type[0].\");\r",
							"    pm.expect(jsonData.properties.colorType.type[1]).to.eql(\"null\", \"Failed at properties line colorType.type[1].\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.nodeType.required).to.eql(true, \"Failed at properties line nodeType.required.\");\r",
							"    pm.expect(jsonData.properties.nodeType.type[0]).to.eql(\"string\", \"Failed at properties line nodeType.type[0].\");\r",
							"    pm.expect(jsonData.properties.nodeType.type[1]).to.eql(\"null\", \"Failed at properties line nodeType.type[1].\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.name.required).to.eql(true, \"Failed at properties line name.required.\");\r",
							"    pm.expect(jsonData.properties.name.type[0]).to.eql(\"string\", \"Failed at properties line name.type[0].\");\r",
							"    pm.expect(jsonData.properties.name.type[1]).to.eql(\"null\", \"Failed at properties line name.type[1].\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.description.required).to.eql(true, \"Failed at properties line description.required.\");\r",
							"    pm.expect(jsonData.properties.description.type[0]).to.eql(\"string\", \"Failed at properties line description.type[0].\");\r",
							"    pm.expect(jsonData.properties.description.type[1]).to.eql(\"null\", \"Failed at properties line description.type[1].\");\r",
							"                                \r",
							"    pm.expect(jsonData.properties.resources.required).to.eql(true, \"Failed at properties line resources.required.\");\r",
							"    pm.expect(jsonData.properties.resources.type[0]).to.eql(\"array\", \"Failed at properties line resources.type[0].\");\r",
							"    pm.expect(jsonData.properties.resources.type[1]).to.eql(\"null\", \"Failed at properties line resources.type[1].\");\r",
							"    pm.expect(jsonData.properties.resources.items.type[0]).to.eql(\"object\", \"Failed at properties line resources.items.type[0].\");\r",
							"    pm.expect(jsonData.properties.resources.items.type[1]).to.eql(\"null\", \"Failed at properties line resources.items.type[1].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.name.required).to.eql(true, \"Failed at properties line resources.items.properties.name.required.\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.name.type[0]).to.eql(\"string\", \"Failed at properties line resources.items.properties.name.type[0].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.name.type[1]).to.eql(\"null\", \"Failed at properties line resources.items.properties.name.type[1].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.description.required).to.eql(true, \"Failed at properties line resources.items.properties.description.required.\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.description.type[0]).to.eql(\"string\", \"Failed at properties line resources.items.properties.description.type[0]).\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.description.type[1]).to.eql(\"null\", \"Failed at properties line resources.items.properties.description.type[1]).\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.link.required).to.eql(true, \"Failed at properties line resources.items.properties.link.required.\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.link.type[0]).to.eql(\"string\", \"Failed at properties line resources.items.properties.link.type[0].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.link.type[1]).to.eql(\"null\", \"Failed at properties line resources.items.properties.link.type[1].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.metaData.required).to.eql(true, \"Failed at properties line resources.items.properties.metaData.required.\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.metaData.type[0]).to.eql(\"object\", \"Failed at properties line resources.items.properties.metaData.type[0].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.metaData.type[1]).to.eql(\"null\", \"Failed at properties line resources.items.properties.metaData.type[1].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.metaData.additionalProperties.type[0]).to.eql(\"string\", \"Failed at properties line resources.items.properties.metaData.additionalProperties.type[0].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.metaData.additionalProperties.type[1]).to.eql(\"null\", \"Failed at properties line resources.items.properties.metaData.additionalProperties.type[1].\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.id.required).to.eql(true, \"Failed at properties line id.required.\");\r",
							"    pm.expect(jsonData.properties.id.type).to.eql(\"string\", \"Failed at properties line id.type.\");\r",
							"\r",
							"    pm.expect(jsonData.properties.encSystemId.required).to.eql(true, \"Failed at properties line encSystemId.required.\");\r",
							"    pm.expect(jsonData.properties.encSystemId.type[0]).to.eql(\"string\", \"Failed at properties line encSystemId.type[0].\");\r",
							"    pm.expect(jsonData.properties.encSystemId.type[1]).to.eql(\"null\", \"Failed at properties line encSystemId.type[1].\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.nodeSystemType.required).to.eql(true, \"Failed at properties line nodeSystemType.required).\");\r",
							"    pm.expect(jsonData.properties.nodeSystemType.type).to.eql(\"integer\", \"Failed at properties line nodeSystemType.type.\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.createdBy.required).to.eql(true, \"Failed at properties line createdBy.required.\");\r",
							"    pm.expect(jsonData.properties.createdBy.type[0]).to.eql(\"string\", \"Failed at properties line createdBy.type[0].\");\r",
							"    pm.expect(jsonData.properties.createdBy.type[1]).to.eql(\"null\", \"Failed at properties line createdBy.type[1].\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.createdDate.required).to.eql(true, \"Failed at properties line createdDate.required.\");\r",
							"    pm.expect(jsonData.properties.createdDate.type).to.eql(\"string\", \"Failed at properties line createdDate.type.\");\r",
							"        \r",
							"    pm.expect(jsonData.properties.updatedBy.required).to.eql(true, \"Failed at properties line updatedBy.required.\");\r",
							"    pm.expect(jsonData.properties.updatedBy.type[0]).to.eql(\"string\", \"Failed at properties line updatedBy.type[0].\");\r",
							"    pm.expect(jsonData.properties.updatedBy.type[1]).to.eql(\"null\", \"Failed at properties line updatedBy.type[1].\");\r",
							"            \r",
							"    pm.expect(jsonData.properties.updatedDate.required).to.eql(true, \"Failed at properties line updatedDate.required.\");\r",
							"    pm.expect(jsonData.properties.updatedDate.type[0]).to.eql(\"string\", \"Failed at properties line updatedDate.type[0].\");\r",
							"    pm.expect(jsonData.properties.updatedDate.type[1]).to.eql(\"null\", \"Failed at properties line updatedDate.type[1].\");\r",
							"    \r",
							"    //OLT's device IDs: it will be populated by Device Twin Manager, when it registers the devices in OLT Digital Twin.\r",
							"    pm.expect(jsonData.properties.externalId.required).to.eql(true, \"Failed at properties line updatedDate.required.\");\r",
							"    pm.expect(jsonData.properties.externalId.type[0]).to.eql(\"string\", \"Failed at properties line updatedDate.type[0].\");\r",
							"    pm.expect(jsonData.properties.externalId.type[1]).to.eql(\"null\", \"Failed at properties line updatedDate.type[1].\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - total count\", function () {\r",
							"    pm.expect(Object.keys(jsonData).length).to.eql(2);\r",
							"    pm.expect(Object.keys(jsonData.properties).length).to.eql(18);\r",
							"    postman.setGlobalVariable(\"NodePropertiesCount\", Object.keys(jsonData.properties).length);\r",
							"});\r",
							"\r",
							"//Output node's properties count\r",
							"pm.test(\"Node Floor has \" + postman.getGlobalVariable(\"NodePropertiesCount\") + \" properties.\", function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/schemas/nodetypes/Floor",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"schemas",
						"nodetypes",
						"Floor"
					]
				},
				"description": "Returns schema of the nodeType"
			},
			"response": []
		},
		{
			"name": "GET Floor Schema Sample",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a92ab9f4-7419-4b6b-8a90-dbd54a5a74e7",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.hasOwnProperty(\"caption\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"changeId\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"floorLevel\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"displayMode\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"visibleLayers\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"colorType\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"nodeType\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"name\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"description\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"resources\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"id\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"encSystemId\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"nodeSystemType\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"createdBy\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"createdDate\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"updatedBy\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"updatedDate\")).to.eql(true);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - total count\", function () {\r",
							"    pm.expect(Object.keys(jsonData).length).to.eql(Number(postman.getGlobalVariable(\"NodePropertiesCount\")));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/schemas/nodetypes/Floor/sample",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"schemas",
						"nodetypes",
						"Floor",
						"sample"
					]
				},
				"description": "Returns a sample instance of the nodeType"
			},
			"response": []
		},
		{
			"name": "GET Contains Schema",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "72225d8d-54ab-493d-8ab4-579787d09bda",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.type).to.eql(\"object\", \"Failed at type line.\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.relationType.required).to.eql(true, \"Failed at properties line relationType.required.\");\r",
							"    pm.expect(jsonData.properties.relationType.type[0]).to.eql(\"string\", \"Failed at properties line relationType.type[0].\");\r",
							"    pm.expect(jsonData.properties.relationType.type[1]).to.eql(\"null\", \"Failed at properties line relationType.type[1].\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.createdBy.required).to.eql(true, \"Failed at properties line createdBy.required.\");\r",
							"    pm.expect(jsonData.properties.createdBy.type[0]).to.eql(\"string\", \"Failed at properties line createdBy.type[0].\");\r",
							"    pm.expect(jsonData.properties.createdBy.type[1]).to.eql(\"null\", \"Failed at properties line createdBy.type[1].\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.createdDate.required).to.eql(true, \"Failed at properties line createdDate.required.\");\r",
							"    pm.expect(jsonData.properties.createdDate.type).to.eql(\"string\", \"Failed at properties line createdDate.type.\");\r",
							"        \r",
							"    pm.expect(jsonData.properties.updatedBy.required).to.eql(true, \"Failed at properties line updatedBy.required.\");\r",
							"    pm.expect(jsonData.properties.updatedBy.type[0]).to.eql(\"string\", \"Failed at properties line updatedBy.type[0].\");\r",
							"    pm.expect(jsonData.properties.updatedBy.type[1]).to.eql(\"null\", \"Failed at properties line updatedBy.type[1].\");\r",
							"            \r",
							"    pm.expect(jsonData.properties.updatedDate.required).to.eql(true, \"Failed at properties line updatedDate.required.\");\r",
							"    pm.expect(jsonData.properties.updatedDate.type[0]).to.eql(\"string\", \"Failed at properties line updatedDate.type[0].\");\r",
							"    pm.expect(jsonData.properties.updatedDate.type[1]).to.eql(\"null\", \"Failed at properties line updatedDate.type[1].\");\r",
							"        \r",
							"    pm.expect(jsonData.properties.id.required).to.eql(true, \"Failed at properties line id.required.\");\r",
							"    pm.expect(jsonData.properties.id.type).to.eql(\"string\", \"Failed at properties line id.type.\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.inNodeId.required).to.eql(true, \"Failed at properties line inNodeId.required.\");\r",
							"    pm.expect(jsonData.properties.inNodeId.type).to.eql(\"string\", \"Failed at properties line inNodeId.type.\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.outNodeId.required).to.eql(true, \"Failed at properties line outNodeId.required.\");\r",
							"    pm.expect(jsonData.properties.outNodeId.type).to.eql(\"string\", \"Failed at properties line outNodeId.type.\");\r",
							"        \r",
							"    pm.expect(jsonData.properties.inNodeType.required).to.eql(true, \"Failed at properties line inNodeType.required.\");\r",
							"    pm.expect(jsonData.properties.inNodeType.type[0]).to.eql(\"string\", \"Failed at properties line inNodeType.type[0].\");\r",
							"    pm.expect(jsonData.properties.inNodeType.type[1]).to.eql(\"null\", \"Failed at properties line inNodeType.type[1].\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.outNodeType.required).to.eql(true, \"Failed at properties line outNodeType.required.\");\r",
							"    pm.expect(jsonData.properties.outNodeType.type[0]).to.eql(\"string\", \"Failed at properties line outNodeType.type[0].\");\r",
							"    pm.expect(jsonData.properties.outNodeType.type[1]).to.eql(\"null\", \"Failed at properties line outNodeType.type[1].\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - total count\", function () {\r",
							"    pm.expect(Object.keys(jsonData).length).to.eql(2);\r",
							"    pm.expect(Object.keys(jsonData.properties).length).to.eql(12);\r",
							"    postman.setGlobalVariable(\"RelationPropertiesCount\", Object.keys(jsonData.properties).length);\r",
							"});\r",
							"\r",
							"//Output relation's properties count\r",
							"pm.test(\"Relation Contains has \" + postman.getGlobalVariable(\"RelationPropertiesCount\") + \" properties.\", function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/schemas/relationshiptypes/Contains",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"schemas",
						"relationshiptypes",
						"Contains"
					]
				},
				"description": "Returns schema of the specified Relationship Type"
			},
			"response": []
		},
		{
			"name": "GET Contains Schema Sample",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a92ab9f4-7419-4b6b-8a90-dbd54a5a74e7",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Response body check - relation properties existence\", function () {\r",
							"    pm.expect(jsonData.hasOwnProperty(\"containsOrder\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"relationType\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"id\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"inNodeId\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"outNodeId\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"inNodeType\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"outNodeType\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"encSystemId\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"createdBy\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"createdDate\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"updatedBy\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"updatedDate\")).to.eql(true);\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - relation properties total count\", function () {\r",
							"    pm.expect(Object.keys(jsonData).length).to.eql(Number(postman.getGlobalVariable(\"RelationPropertiesCount\")));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/schemas/relationshiptypes/Contains/sample",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"schemas",
						"relationshiptypes",
						"Contains",
						"sample"
					]
				},
				"description": "Returns a sample instance of the relationship Type"
			},
			"response": []
		},
		{
			"name": "POST Building Contains Floor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - note properties existence\", function () {\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"caption\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"changeId\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"floorLevel\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"displayMode\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"visibleLayers\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"colorType\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"nodeType\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"name\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"description\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"resources\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"id\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"encSystemId\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"nodeSystemType\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"createdBy\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"createdDate\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"updatedBy\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"updatedDate\")).to.eql(true);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - node properties count\", function () {\r",
							"    pm.expect(Object.keys(jsonData.node).length).to.eql(Number(postman.getGlobalVariable(\"NodePropertiesCount\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.caption).to.eql(\"New Floor\");\r",
							"    pm.expect(jsonData.node.changeId).to.eql(\"e792aff7-eae6-4a22-8fb7-eace30c58b98\");\r",
							"    pm.expect(jsonData.node.floorLevel).to.eql(0);\r",
							"    pm.expect(jsonData.node.displayMode).to.eql(\"ThreeD\");\r",
							"    pm.expect(jsonData.node.visibleLayers[0]).to.eql(73);\r",
							"    pm.expect(jsonData.node.visibleLayers[33]).to.eql(106);\r",
							"    pm.expect(jsonData.node.colorType).to.eql(\"FullColor\");\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Floor\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"FloorName\");\r",
							"    pm.expect(jsonData.node.description).to.eql(null);\r",
							"    pm.expect(jsonData.node.resources.length).to.eql(2);\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FloorId\", jsonData.node.id);\r",
							"    pm.expect(jsonData.node.encSystemId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.node.nodeSystemType).to.eql(245);\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.createdDate).to.not.eql(null);\r",
							"    pm.expect(jsonData.node.updatedBy).to.eql(null);\r",
							"    pm.expect(jsonData.node.updatedDate).to.eql(null);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation properties existence\", function () {\r",
							"    pm.expect(jsonData.relation.hasOwnProperty(\"containsOrder\")).to.eql(true);\r",
							"    pm.expect(jsonData.relation.hasOwnProperty(\"relationType\")).to.eql(true);\r",
							"    pm.expect(jsonData.relation.hasOwnProperty(\"id\")).to.eql(true);\r",
							"    pm.expect(jsonData.relation.hasOwnProperty(\"inNodeId\")).to.eql(true);\r",
							"    pm.expect(jsonData.relation.hasOwnProperty(\"outNodeId\")).to.eql(true);\r",
							"    pm.expect(jsonData.relation.hasOwnProperty(\"inNodeType\")).to.eql(true);\r",
							"    pm.expect(jsonData.relation.hasOwnProperty(\"outNodeType\")).to.eql(true);\r",
							"    pm.expect(jsonData.relation.hasOwnProperty(\"encSystemId\")).to.eql(true);\r",
							"    pm.expect(jsonData.relation.hasOwnProperty(\"createdBy\")).to.eql(true);\r",
							"    pm.expect(jsonData.relation.hasOwnProperty(\"createdDate\")).to.eql(true);\r",
							"    pm.expect(jsonData.relation.hasOwnProperty(\"updatedBy\")).to.eql(true);\r",
							"    pm.expect(jsonData.relation.hasOwnProperty(\"updatedDate\")).to.eql(true);\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - relation properties total count\", function () {\r",
							"    pm.expect(Object.keys(jsonData.relation).length).to.eql(Number(postman.getGlobalVariable(\"RelationPropertiesCount\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.containsOrder).to.eql(0);\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"BuildingContainsFloorId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"BuildingId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Floor\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Building\");\r",
							"    pm.expect(jsonData.relation.encSystemId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.createdDate).to.not.eql(null);\r",
							"    pm.expect(jsonData.relation.updatedBy).to.eql(null);\r",
							"    pm.expect(jsonData.relation.updatedDate).to.eql(null);\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Building Id: \" + postman.getGlobalVariable(\"BuildingId\"), function () {});\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Building to Floor: \" + postman.getGlobalVariable(\"BuildingContainsFloorId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Floor\",\r\n\t\t\"caption\": \"New Floor\",\r\n\t\t\"changeId\": \"e792aff7-eae6-4a22-8fb7-eace30c58b98\",\r\n\t\t\"floorLevel\": 0,\r\n\t\t\"displayMode\": \"ThreeD\",\r\n\t\t\"visibleLayers\": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106],\r\n\t\t\"colorType\": \"FullColor\",\t\t\r\n\t\t\"name\": \"FloorName\",\r\n\t\t\"description\": null,\r\n\t\t\"resources\": [{\r\n\t\t\t\"name\": \"{{resourceEGFName}}.egf\",\r\n\t\t\t\"description\": \"Polaris FloorPlan for floor 0\",\r\n\t\t\t\"link\": \"{{http}}{{env}}{{urlResource}}/v1/resources/{{organizationId}}/{{encSystemId}}/{{resourceEGFName}}.egf\",\r\n\t\t\t\"metaData\": {\r\n\t\t\t\t\"uploadedBy\": \"QA\",\r\n\t\t\t\t\"expectedUsage\": \"FloorPlan\",\r\n\t\t\t\t\"floorplanFormat\": \"egf.gz\",\r\n\t\t\t\t\"floorLevel\": \"0\",\r\n\t\t\t\t\"colorType\": \"FullColor\",\r\n\t\t\t\t\"uploaded\": \"2019-04-25T16:10:39.8276551Z\",\r\n\t\t\t\t\"originalFilename\": \"{{resourceEGFName}}.egf.gz\"\r\n\t\t\t}\r\n\t\t}, {\r\n\t\t\t\"name\": \"{{resourceSVGName}}.svg\",\r\n\t\t\t\"description\": \"SVG FloorPlan for floor 0\",\r\n\t\t\t\"link\": \"{{http}}{{env}}{{urlResource}}/v1/resources/{{organizationId}}/{{encSystemId}}/{{resourceSVGName}}.svg\",\r\n\t\t\t\"metaData\": {\r\n\t\t\t\t\"uploadedBy\": \"QA\",\r\n\t\t\t\t\"expectedUsage\": \"WebFloorPlan\",\r\n\t\t\t\t\"floorplanFormat\": \"egf.svg\",\r\n\t\t\t\t\"floorLevel\": \"0\",\r\n\t\t\t\t\"colorType\": \"FullColor\",\r\n\t\t\t\t\"uploaded\": \"2019-04-25T16:11:30.7297448Z\",\r\n\t\t\t\t\"originalFilename\": \"{{resourceSVGName}}.egf.svg\"\r\n\t\t\t}\r\n\t\t}],\r\n\t\t\"nodeSystemType\": 245,\r\n\t\t\"createdBy\": null,\r\n\t\t\"createdDate\": \"0001-01-01T00:00:00+00:00\",\r\n\t\t\"updatedBy\": null,\r\n\t\t\"updatedDate\": null\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"containsOrder\": 0,\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"inNodeId\": \"00000000-0000-0000-0000-000000000000\",\r\n\t\t\"outNodeId\": \"{{BuildingId}}\",\r\n\t\t\"inNodeType\": null,\r\n\t\t\"outNodeType\": \"Building\",\r\n\t\t\"createdBy\": null,\r\n\t\t\"createdDate\": \"0001-01-01T00:00:00+00:00\",\r\n\t\t\"updatedBy\": null,\r\n\t\t\"updatedDate\": null\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Floor",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Floor"
					]
				},
				"description": "Creates a Floor contains by the Building."
			},
			"response": []
		},
		{
			"name": "POST Floor Contains PolarisVirtualFloor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PolarisVirtualFloor\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"PolarisVirtualFloorName is Zone [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PolarisVirtualFloorId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FloorContainsPolarisVirtualFloorId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloorId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PolarisVirtualFloor\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"PolarisVirtualFloor Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloorId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor to PolarisVirtualFloor: \" + postman.getGlobalVariable(\"FloorContainsPolarisVirtualFloorId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"PolarisVirtualFloor\",\r\n\t\t\"SyncState\": 2,\r\n\t\t\"Name\": \"PolarisVirtualFloorName is Zone [0064-FFFF]\",\r\n\t\t\"Caption\": \"Zone\",\r\n\t\t\"ObjectType\": 245,\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"ZOrder\": 2,\r\n\t\t\"EnableScenes\": true,\r\n\t\t\"EnableControllable\": true,\r\n\t\t\"EnablePC\": true,\r\n\t\t\"BacNetIndex\": -1,\r\n\t\t\"ComponentType\": 10,\r\n\t\t\"PCS_ActivityOnly\": false,\r\n\t\t\"PreviousEcu\": \"13165559-9116-4921-A22B-3679BE039017\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"OcsAutoTurnOn\": true,\r\n\t\t\"TimeScheduleAutoTurnOn\": true,\r\n\t\t\"OccupancyToTurnOnSchedule\": true,\r\n\t\t\"OcsExtensionTime\": 60,\r\n\t\t\"OcsManualUserExtensionTime\": 1200,\r\n\t\t\"VacancyExtensionTime\": 60,\r\n\t\t\"TwoStageExtensionTime\": 1200,\r\n\t\t\"StandbyOffBehaviour\": \"None|Flickwarn|StandbyBrightness\",\r\n\t\t\"ManualFadeToOff\": 60,\r\n\t\t\"OccupancyFadeToOff\": 1200,\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PolarisVirtualFloor",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PolarisVirtualFloor"
					]
				},
				"description": "Creates an OrganizationalArea contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor Contains OrganizationalArea",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OrganizationalAreaName is Zone [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalAreaId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FloorContainsOrganizationalAreaId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalAreaId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"OrganizationalArea Id: \" + postman.getGlobalVariable(\"OrganizationalAreaId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor to OrganizationalArea: \" + postman.getGlobalVariable(\"FloorContainsOrganizationalAreaId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"OrganizationalArea\",\r\n\t\t\"SyncState\": 2,\r\n\t\t\"Name\": \"OrganizationalAreaName is Zone [0064-FFFF]\",\r\n\t\t\"Caption\": \"Zone\",\r\n\t\t\"ObjectType\": 245,\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"ZOrder\": 2,\r\n\t\t\"EnableScenes\": true,\r\n\t\t\"EnableControllable\": true,\r\n\t\t\"EnablePC\": true,\r\n\t\t\"BacNetIndex\": -1,\r\n\t\t\"ComponentType\": 10,\r\n\t\t\"PCS_ActivityOnly\": false,\r\n\t\t\"PreviousEcu\": \"13165559-9116-4921-A22B-3679BE039017\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"OcsAutoTurnOn\": true,\r\n\t\t\"TimeScheduleAutoTurnOn\": true,\r\n\t\t\"OccupancyToTurnOnSchedule\": true,\r\n\t\t\"OcsExtensionTime\": 60,\r\n\t\t\"OcsManualUserExtensionTime\": 1200,\r\n\t\t\"VacancyExtensionTime\": 60,\r\n\t\t\"TwoStageExtensionTime\": 1200,\r\n\t\t\"StandbyOffBehaviour\": \"StandbyBrightness\",\r\n\t\t\"ManualFadeToOff\": 60,\r\n\t\t\"OccupancyFadeToOff\": 1200,\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OrganizationalArea",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OrganizationalArea"
					]
				},
				"description": "Creates an OrganizationalArea contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor Contains Manager",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Manager\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"ManagerName is Wireless Manager [0064]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"ManagerId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FloorContainsManagerId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"ManagerId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Manager\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"Manager Id: \" + postman.getGlobalVariable(\"Managerd\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor to Manager: \" + postman.getGlobalVariable(\"FloorContainsManagerId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Manager\",\r\n\t\t\"Name\": \"ManagerName is Wireless Manager [0064]\",\r\n\t\t\"Caption\": \"Wireless Manager\",\r\n\t\t\"ObjectType\": 32774,\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"IPAddress\": \"10.215.20.210\",\r\n\t\t\"AddressOffset\": 100,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"PortCommunication\": 4533,\r\n\t\t\"Mapped\": true,\r\n\t\t\"HardwareArchitecture\": \"ZigBee\",\r\n\t\t\"BACnetDeviceName\": \"Bac1\",\r\n\t\t\"BacNetDeviceId\": 0,\r\n\t\t\"BacNetNetworkAddress\": \"192.168.0.2\",\r\n\t\t\"BacNetSubnetmask\": \"255.255.0.0\",\r\n\t\t\"BacNetPort\": 4500,\r\n\t\t\"BacNetEnabled\": false,\r\n\t\t\"BacNetExportScheduler\": false,\r\n\t\t\"BacNetExportAllEcus\": false,\r\n\t\t\"BacNetSyncState\": 2,\r\n\t\t\"ForeignDeviceEnabled\": false,\r\n\t\t\"BBMDIPAddress\": \"192.168.0.3\",\r\n\t\t\"BBMDPort\": 47808,\r\n\t\t\"FDRegistrationTTL\": 1800,\r\n\t\t\"FDRegistrationTTW\": 30000,\r\n\t\t\"FDRegistrationRetries\": 3,\r\n\t\t\"WLanAddress\": \"192.168.0.4\",\r\n\t\t\"WLanNetmask\": \"255.255.0.0\",\r\n\t\t\"WLanSsid\": \"WirelessEncelium\",\r\n\t\t\"WLanPassword\": \"password\",\r\n\t\t\"WLanHwAddr\": \"\",\r\n\t\t\"WLanMasterHwAddr\": \"\",\r\n\t\t\"WLanDhcp\": true,\r\n\t\t\"WLanSyncState\": 2,\r\n\t\t\"WLanRoamingHwAddr\": \"\",\r\n\t\t\"WLanDhcpRange\": \"\",\r\n\t\t\"WLanDhcpLeaseTime\": 10000,\r\n\t\t\"WLanChannel\": 4,\r\n\t\t\"TenantIp\": \"192.168.0.5\",\r\n\t\t\"TenantSubnet\": \"255.255.0.0\",\r\n\t\t\"TenantDhcp\": false,\r\n\t\t\"TenantGateway\": \"192.168.0.6\",\r\n\t\t\"EnceliumIp\": \"192.168.0.7\",\r\n\t\t\"EnceliumSubnet\": \"255.255.0.0\",\r\n\t\t\"EnceliumGateway\": \"192.168.0.8\",\r\n\t\t\"EnceliumDhcp\": false,\r\n\t\t\"DNSServers\": [ \"\", \"\" ],\r\n\t\t\"DNSDomain\": [\"\",\"\"],\r\n\t\t\"ForcedOutOfService\": false,\r\n\t\t\"MasterECU\": false,\r\n\t\t\"PublicKey\": \"\",\r\n\t\t\"LastScan\": \"\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Manager",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Manager"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor Contains Keypad",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Keypad\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"KeypadName is Programmable Controller []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"KeypadId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FloorContainsKeypadId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"KeypadId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Keypad\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"Keypad Id: \" + postman.getGlobalVariable(\"KeypadId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor to Keypad: \" + postman.getGlobalVariable(\"FloorContainsKeypadId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Keypad\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"KeypadName is Programmable Controller []\",\r\n\t\t\"Caption\": \"Programmable Controller\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t  \"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Locked\": false\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Keypad",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Keypad"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor Contains OccupancySensor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OccupancySensor\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OccupancySensorName is Occupancy Sensor []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OccupancySensorId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FloorContainsOccupancySensorId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OccupancySensorId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OccupancySensor\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"OccupancySensor Id: \" + postman.getGlobalVariable(\"OccupancySensorId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor to OccupancySensor: \" + postman.getGlobalVariable(\"FloorContainsOccupancySensorId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"OccupancySensor\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"OccupancySensorName is Occupancy Sensor []\",\r\n\t\t\"Caption\": \"Occupancy Sensor\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"HasSwitch\": false,\r\n\t\t\"Disabled\": false\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OccupancySensor",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OccupancySensor"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor Contains PhotoSensor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PhotoSensor\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"PhotoSensorName is Photo Sensor []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PhotoSensorId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FloorContainsPhotoSensorId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"PhotoSensorId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PhotoSensor\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"PhotoSensor Id: \" + postman.getGlobalVariable(\"PhotoSensorId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor to PhotoSensor: \" + postman.getGlobalVariable(\"FloorContainsPhotoSensorId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"PhotoSensor\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"PhotoSensorName is Photo Sensor []\",\r\n\t\t\"Caption\": \"Photo Sensor\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"DayLightOrientation\": 0,\r\n\t\t\"DayLightDistance\": 0.0,\r\n\t\t\"DayLightOutOfRange\": false,\r\n\t\t\"DayLightRange\": 0.0,\r\n\t\t\"DayLightValues\": [\r\n\t\t\t{\r\n\t\t\t  \"M\": 0.0,\r\n\t\t\t  \"L\": 0.0\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"M\": 0.0,\r\n\t\t\t  \"L\": 0.0\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"M\": 0.0,\r\n\t\t\t  \"L\": 0.0\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"PhotoSensorType\": \"None|PLCMultiPoint|Servodan|TridonicMultiSensor|EnOceanEchoflexTAP17|OSRAMSensorCoupler|EnOceanIllumraE3TSlicp|RFMultipoint|EnceliumPIRSensor\",\r\n\t\t\"Disabled\": false\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PhotoSensor",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PhotoSensor"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor Contains Repeater",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Repeater\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"RepeaterName is Repeater []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"RepeaterId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FloorContainsRepeaterId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"RepeaterId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Repeater\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"Repeater Id: \" + postman.getGlobalVariable(\"RepeaterId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor to Repeater: \" + postman.getGlobalVariable(\"FloorContainsPhotoSensorRepeaterId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Repeater\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"RepeaterName is Repeater []\",\r\n\t\t\"Caption\": \"Repeater\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Repeater",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Repeater"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor Contains Luminaire",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"LuminaireName is Fixture []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"LuminaireId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FloorContainsLuminaireId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"LuminaireId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"Luminaire Id: \" + postman.getGlobalVariable(\"LuminaireId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor to Luminaire: \" + postman.getGlobalVariable(\"FloorContainsLuminaireId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Luminaire\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"LuminaireName is Fixture []\",\r\n\t\t\"Caption\": \"Fixture\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Rotation\": 0,\r\n\t\t\"DayLightOrientation\": 0,\r\n\t\t\"DayLightDistance\": 0.0,\r\n\t\t\"DayLightOutOfRange\": false,\r\n\t\t\"DayLightBrightness\": 0,\r\n\t\t\"DayLightOverride\": 0,\r\n\t\t\"DayLightCompRemainder\": 0,\r\n\t\t\"MaxBrightness\": 0,\r\n\t\t\"MinBrightness\": 0,\r\n\t\t\"ComfortBrightness\": 0,\r\n\t\t\"TwoStageBrightness\": 0,\r\n\t\t\"MinComfortBrightness\": 0,\r\n\t\t\"ComfortBrightnessRelative\": false,\r\n\t\t\"BackupPowerBrightness\": 0,\r\n\t\t\"EnabledForcedOverrideBrightness\": false,\r\n\t\t\"ForcedOverrideBrightness\": 0,\r\n\t\t\"NightLight\": false,\r\n\t\t\"LuxMin\": 0,\r\n\t\t\"LuxMax\": 0,\r\n\t\t\"RemainingBurnIn\": 0,\r\n\t\t\"FixBaselineWattage\": 0,\r\n\t\t\"BallastNameplateWattage\": 0,\r\n\t\t\"Demand\": 0,\r\n\t\t\"DemandMin\": 0,\r\n\t\t\"Dimmable\": true,\r\n\t\t\"Restrike\": false,\r\n\t\t\"DisableDLHV\": false,\r\n\t\t\"DaliFadeTime\": 0,\r\n\t\t\"DaliFadeRate\": 0,\r\n\t\t\"DaliPowerOnBrightnessLevel\": 0,\r\n\t\t\"DaliSystemFailureBrightnessLevel\": 0,\r\n\t\t\"StartupBehaviorType\": \"NoChanges\",\r\n\t\t\"StartupBrightness\": 0,\r\n\t\t\"StartupDuration\": 0,\r\n\t\t\"PhaseCutDimmerLoadType\": \"LeadingTrailing\",\r\n\t\t\"PhaseCutDimmerModeType\": \"Trailing\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"PowerCurve\": [0.0,0.0,0.0],\r\n\t\t\"ColorTemperature\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Luminaire",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Luminaire"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor Contains TunableWhiteLuminaire",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"TunableWhiteLuminaire\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"TunableWhiteLuminaireName is Fixture []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"TunableWhiteLuminaireId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FloorContainsTunableWhiteLuminaireId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"TunableWhiteLuminaireId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"TunableWhiteLuminaire\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"TunableWhiteLuminaire Id: \" + postman.getGlobalVariable(\"TunableWhiteLuminaireId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor to TunableWhiteLuminaire: \" + postman.getGlobalVariable(\"FloorContainsTunableWhiteLuminaireId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"TunableWhiteLuminaire\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"TunableWhiteLuminaireName is Fixture []\",\r\n\t\t\"Caption\": \"Fixture\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Rotation\": 0,\r\n\t\t\"DayLightOrientation\": 0,\r\n\t\t\"DayLightDistance\": 0.0,\r\n\t\t\"DayLightOutOfRange\": false,\r\n\t\t\"DayLightBrightness\": 0,\r\n\t\t\"DayLightOverride\": 0,\r\n\t\t\"DayLightCompRemainder\": 0,\r\n\t\t\"MaxBrightness\": 0,\r\n\t\t\"MinBrightness\": 0,\r\n\t\t\"ComfortBrightness\": 0,\r\n\t\t\"TwoStageBrightness\": 0,\r\n\t\t\"MinComfortBrightness\": 0,\r\n\t\t\"ComfortBrightnessRelative\": false,\r\n\t\t\"BackupPowerBrightness\": 0,\r\n\t\t\"EnabledForcedOverrideBrightness\": false,\r\n\t\t\"ForcedOverrideBrightness\": 0,\r\n\t\t\"NightLight\": false,\r\n\t\t\"LuxMin\": 0,\r\n\t\t\"LuxMax\": 0,\r\n\t\t\"RemainingBurnIn\": 0,\r\n\t\t\"FixBaselineWattage\": 0,\r\n\t\t\"BallastNameplateWattage\": 0,\r\n\t\t\"Demand\": 0,\r\n\t\t\"DemandMin\": 0,\r\n\t\t\"Dimmable\": true,\r\n\t\t\"Restrike\": false,\r\n\t\t\"DisableDLHV\": false,\r\n\t\t\"DaliFadeTime\": 0,\r\n\t\t\"DaliFadeRate\": 0,\r\n\t\t\"DaliPowerOnBrightnessLevel\": 0,\r\n\t\t\"DaliSystemFailureBrightnessLevel\": 0,\r\n\t\t\"StartupBehaviorType\": \"Default|NoChanges|Custom\",\r\n\t\t\"StartupBrightness\": 0,\r\n\t\t\"StartupDuration\": 0,\r\n\t\t\"PhaseCutDimmerLoadType\": \"Trailing|Leading|LeadingTrailing\",\r\n\t\t\"PhaseCutDimmerModeType\": \"Trailing|Leading|LeadingTrailing\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"PowerCurve\": [0.0,0.0,0.0],\r\n\t\t\"ColorTemperature\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/TunableWhiteLuminaire",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"TunableWhiteLuminaire"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor Contains WalcLuminaire",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"WalcLuminaire\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"WalcLuminaireName is Fixture []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"WalcLuminaireId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FloorContainsWalcLuminaireId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"WalcLuminaireId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"WalcLuminaire\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"WalcLuminaire Id: \" + postman.getGlobalVariable(\"WalcLuminaireId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor to WalcLuminaire: \" + postman.getGlobalVariable(\"FloorContainsWalcLuminaireId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"WalcLuminaire\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"WalcLuminaireName is Fixture []\",\r\n\t\t\"Caption\": \"Fixture\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Rotation\": 0,\r\n\t\t\"DayLightOrientation\": 0,\r\n\t\t\"DayLightDistance\": 0.0,\r\n\t\t\"DayLightOutOfRange\": false,\r\n\t\t\"DayLightBrightness\": 0,\r\n\t\t\"DayLightOverride\": 0,\r\n\t\t\"DayLightCompRemainder\": 0,\r\n\t\t\"MaxBrightness\": 0,\r\n\t\t\"MinBrightness\": 0,\r\n\t\t\"ComfortBrightness\": 0,\r\n\t\t\"TwoStageBrightness\": 0,\r\n\t\t\"MinComfortBrightness\": 0,\r\n\t\t\"ComfortBrightnessRelative\": false,\r\n\t\t\"BackupPowerBrightness\": 0,\r\n\t\t\"EnabledForcedOverrideBrightness\": false,\r\n\t\t\"ForcedOverrideBrightness\": 0,\r\n\t\t\"NightLight\": false,\r\n\t\t\"LuxMin\": 0,\r\n\t\t\"LuxMax\": 0,\r\n\t\t\"RemainingBurnIn\": 0,\r\n\t\t\"FixBaselineWattage\": 0,\r\n\t\t\"BallastNameplateWattage\": 0,\r\n\t\t\"Demand\": 0,\r\n\t\t\"DemandMin\": 0,\r\n\t\t\"Dimmable\": true,\r\n\t\t\"Restrike\": false,\r\n\t\t\"DisableDLHV\": false,\r\n\t\t\"DaliFadeTime\": 0,\r\n\t\t\"DaliFadeRate\": 0,\r\n\t\t\"DaliPowerOnBrightnessLevel\": 0,\r\n\t\t\"DaliSystemFailureBrightnessLevel\": 0,\r\n\t\t\"StartupBehaviorType\": \"NoChanges\",\r\n\t\t\"StartupBrightness\": 0,\r\n\t\t\"StartupDuration\": 0,\r\n\t\t\"PhaseCutDimmerLoadType\": \"LeadingTrailing\",\r\n\t\t\"PhaseCutDimmerModeType\": \"LeadingTrailing\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"PowerCurve\": [0.0,0.0,0.0],\r\n\t\t\"ColorTemperature\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/WalcLuminaire",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"WalcLuminaire"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor Contains WslcLuminaire",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"WslcLuminaire\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"WslcLuminaireName is Fixture []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"WslcLuminaireId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FloorContainsWslcLuminaireId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"WslcLuminaireId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"WslcLuminaire\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"WslcLuminaire Id: \" + postman.getGlobalVariable(\"WslcLuminaireId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor to WslcLuminaire: \" + postman.getGlobalVariable(\"FloorContainsWslcLuminaireId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"WslcLuminaire\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"WslcLuminaireName is Fixture []\",\r\n\t\t\"Caption\": \"Fixture\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t  \"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Rotation\": 0,\r\n\t\t\"DayLightOrientation\": 0,\r\n\t\t\"DayLightDistance\": 0.0,\r\n\t\t\"DayLightOutOfRange\": false,\r\n\t\t\"DayLightBrightness\": 0,\r\n\t\t\"DayLightOverride\": 0,\r\n\t\t\"DayLightCompRemainder\": 0,\r\n\t\t\"MaxBrightness\": 0,\r\n\t\t\"MinBrightness\": 0,\r\n\t\t\"ComfortBrightness\": 0,\r\n\t\t\"TwoStageBrightness\": 0,\r\n\t\t\"MinComfortBrightness\": 0,\r\n\t\t\"ComfortBrightnessRelative\": false,\r\n\t\t\"BackupPowerBrightness\": 0,\r\n\t\t\"EnabledForcedOverrideBrightness\": false,\r\n\t\t\"ForcedOverrideBrightness\": 0,\r\n\t\t\"NightLight\": false,\r\n\t\t\"LuxMin\": 0,\r\n\t\t\"LuxMax\": 0,\r\n\t\t\"RemainingBurnIn\": 0,\r\n\t\t\"FixBaselineWattage\": 0,\r\n\t\t\"BallastNameplateWattage\": 0,\r\n\t\t\"Demand\": 0,\r\n\t\t\"DemandMin\": 0,\r\n\t\t\"Dimmable\": true,\r\n\t\t\"Restrike\": false,\r\n\t\t\"DisableDLHV\": false,\r\n\t\t\"DaliFadeTime\": 0,\r\n\t\t\"DaliFadeRate\": 0,\r\n\t\t\"DaliPowerOnBrightnessLevel\": 0,\r\n\t\t\"DaliSystemFailureBrightnessLevel\": 0,\r\n\t\t\"StartupBehaviorType\": \"Default|NoChanges|Custom\",\r\n\t\t\"StartupBrightness\": 0,\r\n\t\t\"StartupDuration\": 0,\r\n\t\t\"PhaseCutDimmerLoadType\": \"Trailing|Leading|LeadingTrailing\",\r\n\t\t\"PhaseCutDimmerModeType\": \"Trailing|Leading|LeadingTrailing\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"PowerCurve\": [0.0,0.0,0.0],\r\n\t\t\"ColorTemperature\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/WslcLuminaire",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"WslcLuminaire"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor Contains EmergencyLuminaire",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"EmergencyLuminaire\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"EmergencyLuminaireName is EmergencyFixture []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EmergencyLuminaireId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FloorContainsEmergencyLuminaireId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"EmergencyLuminaireId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"EmergencyLuminaire\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"EmergencyLuminaire Id: \" + postman.getGlobalVariable(\"EmergencyLuminaireId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor to EmergencyLuminaire: \" + postman.getGlobalVariable(\"FloorContainsEmergencyLuminaireId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"EmergencyLuminaire\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"EmergencyLuminaireName is EmergencyFixture []\",\r\n\t\t\"Caption\": \"EmergencyFixture\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"Rotation\": 0,\r\n\t\t\"ProlongTimer\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EmergencyLuminaire",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EmergencyLuminaire"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor Contains EmergencyInverter",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"EmergencyInverter\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"EmergencyInverterName is Inverter []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EmergencyInverterId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FloorContainsEmergencyInverterId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"EmergencyInverterId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"EmergencyInverter\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"EmergencyInverter Id: \" + postman.getGlobalVariable(\"EmergencyInverterId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor to EmergencyInverter: \" + postman.getGlobalVariable(\"FloorContainsEmergencyInverterId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"EmergencyInverter\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"EmergencyInverterName is Inverter []\",\r\n\t\t\"Caption\": \"Inverter\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EmergencyInverter",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EmergencyInverter"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor Contains CentralBattery",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"CentralBattery\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"CentralBatteryName is CentralBattery []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"CentralBatteryId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FloorContainsCentralBatteryId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"CentralBatteryId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"CentralBattery\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"CentralBattery Id: \" + postman.getGlobalVariable(\"CentralBatteryId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor to CentralBattery: \" + postman.getGlobalVariable(\"FloorContainsCentralBatteryId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"CentralBattery\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"CentralBatteryName is CentralBattery []\",\r\n\t\t\"Caption\": \"CentralBattery\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"TurnOffDelay\":  0,\r\n\t\t\"TurnOnNoMaster\":  0,\r\n\t\t\"TurnOnAlarm\":  0,\r\n\t\t\"TurnOnNoComs\":  0,\r\n\t\t\"InvertInputSignal\": false\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/CentralBattery",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"CentralBattery"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor Contains PlugLoad",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PlugLoad\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"PlugLoadName is Plug Load []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PlugLoadId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FloorContainsPlugLoadId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"PlugLoadId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PlugLoad\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"PlugLoad Id: \" + postman.getGlobalVariable(\"PlugLoadId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor to PlugLoad: \" + postman.getGlobalVariable(\"FloorContainsPlugLoadId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"PlugLoad\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"PlugLoadName is Plug Load []\",\r\n\t\t\"Caption\": \"Plug Load\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"NightLight\": false,\r\n\t\t\"BaselineWattage\": 0,\r\n\t\t\"WattageConsumption\": 0,\r\n\t\t\"Demand\": 0,\r\n\t\t\"DemandMin\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PlugLoad",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PlugLoad"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor Contains Shade",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Shade\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"ShadeName is Shade []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"ShadeId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FloorContainsShadeId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"ShadeId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Shade\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"Shade Id: \" + postman.getGlobalVariable(\"ShadeId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor to Shade: \" + postman.getGlobalVariable(\"FloorContainsShadeId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Shade\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"ShadeName is Shade []\",\r\n\t\t\"Caption\": \"Shade\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"SubType\": 0,\r\n\t\t\"Rotation\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Shade",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Shade"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor Contains PartitionWall",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PartitionWall\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"PartitionWallNane is Partion Wall []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PartitionWallId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FloorContainsPartitionWallId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"PartitionWallId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PartitionWall\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"PartitionWall Id: \" + postman.getGlobalVariable(\"PartitionWallId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor to PartitionWall: \" + postman.getGlobalVariable(\"FloorContainsPartitionWallId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"PartitionWall\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"PartitionWallNane is Partion Wall []\",\r\n\t\t\"Caption\": \"Partition Wall\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Rotation\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PartitionWall",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PartitionWall"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor Contains PhysicalLoadMeter",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PhysicalLoadMeter\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"PhysicalLoadMeterName is EnergyDevice [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PhysicalLoadMeterId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FloorContainsPhysicalLoadMeterId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"PhysicalLoadMeterId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PhysicalLoadMeter\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"PhysicalLoadMeter Id: \" + postman.getGlobalVariable(\"PhysicalLoadMeterId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor to PhysicalLoadMeter: \" + postman.getGlobalVariable(\"FloorContainsPhysicalLoadMeterId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"PhysicalLoadMeter\",\r\n     \t\"Name\": \"PhysicalLoadMeterName is EnergyDevice [0064-FFFF]\",\r\n\t\t\"Caption\": \"EnergyDevice\",\r\n\t\t\"ObjectType\": 245,\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"ModuleAddress\": \"\",\r\n\t\t\"SenseInterval\": 0,\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t  \"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t\"SyncState\": 2,\r\n\t\t\"EnergyData\": \"\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PhysicalLoadMeter",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PhysicalLoadMeter"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor Contains FireAlarm",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"FireAlarm\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"FireAlarmName is FireAlarm []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FireAlarmId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FloorContainsFireAlarmId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"FireAlarmId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"FireAlarm\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"FireAlarm Id: \" + postman.getGlobalVariable(\"FireAlarmId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor to FireAlarm: \" + postman.getGlobalVariable(\"FloorContainsFireAlarmId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"FireAlarm\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"FireAlarmName is FireAlarm []\",\r\n\t\t\"Caption\": \"FireAlarm\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"TurnOffDelay\":  0,\r\n\t\t\"TurnOnNoMaster\":  0,\r\n\t\t\"TurnOnAlarm\":  0,\r\n\t\t\"TurnOnNoComs\":  0,\r\n\t\t\"InvertInputSignal\": false\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/FireAlarm",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"FireAlarm"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor Contains Facade",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Facade\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"FacadeName is Facade []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FacadeId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FloorContainsFacadeId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"FacadeId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Facade\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"Facade Id: \" + postman.getGlobalVariable(\"FacadeId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor to Facade: \" + postman.getGlobalVariable(\"FloorContainsFacadeId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Facade\",\r\n\t\t\"Name\": \"FacadeName is Facade []\",\r\n\t\t\"Caption\": \"Facade\",\r\n\t\t\"ObjectType\": 124,\r\n\t\t\"Orientation\": -1,\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"LineDirection\": 0,\r\n\t\t\"LineWidth\": 0.0,\r\n\t\t\"LinePointIndexs\": [ 0, 1, 2 ],\r\n\t\t\"LinePoints\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"FacadeType\": \"Shared|Dedicated|SkyLight\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Facade",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Facade"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor Contains PersonalControlDevice",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PersonalControlDevice\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"PersonalControlDeviceName is Personal Control []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PersonalControlDeviceId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FloorContainsPersonalControlDeviceId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"PersonalControlDeviceId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PersonalControlDevice\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"PersonalControlDevice Id: \" + postman.getGlobalVariable(\"PersonalControlDeviceId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor to PersonalControlDevice: \" + postman.getGlobalVariable(\"FloorContainsPersonalControlDeviceId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"PersonalControlDevice\",\r\n\t\t\"Name\": \"PersonalControlDeviceName is Personal Control []\",\r\n\t\t\"Caption\": \"Personal Control\",\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"Authentication\": \"\",\r\n\t\t\"Activated\": \"2019-03-07T08:56:26.2102408-05:00\",\r\n\t\t\"LastUsed\": \"2019-03-07T08:56:26.2102408-05:00\",\r\n\t\t\"ShortID\": \"\",\r\n\t\t\"Enabled\": true,\r\n\t\t\"Type\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PersonalControlDevice",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PersonalControlDevice"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "GET /v1/schemas/nodetypes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "75dd6efd-0393-43c7-b2dd-8690e6044762",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"    var randomNode = jsonData[Math.floor(Math.random() * jsonData.length)];\r",
							"    postman.setGlobalVariable(\"randomNodeType\", randomNode);\r",
							"    //console.log(postman.getGlobalVariable(\"randomNodeType\"));\r",
							"});\r",
							"\r",
							"//Output Ids\r",
							"pm.test(\"Random Node Type: \" + postman.getGlobalVariable(\"randomNodeType\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/schemas/nodetypes",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"schemas",
						"nodetypes"
					]
				},
				"description": "Returns a node by IP address"
			},
			"response": []
		},
		{
			"name": "GET /v1/schemas/relationshiptypes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "75dd6efd-0393-43c7-b2dd-8690e6044762",
						"exec": [
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"    //Remove Contains from the return\r",
							"    var index = jsonData.indexOf(\"Contains\");\r",
							"    if (index > -1) {\r",
							"        jsonData.splice(index,1) //The second parameter of splice is the number of elements to remove.\r",
							"    }\r",
							"    //console.log(jsonData);\r",
							"    //Randowmly pick one element from the array\r",
							"    var randomNonContainsRelation = jsonData[Math.floor(Math.random() * jsonData.length)];\r",
							"    postman.setGlobalVariable(\"randomNonContainsRelationType\", randomNonContainsRelation);\r",
							"    //console.log(postman.getGlobalVariable(\"randomNonContainsRelationType\"));\r",
							"});\r",
							"\r",
							"//Output Ids\r",
							"pm.test(\"Non-Contains Relation Type: \" + postman.getGlobalVariable(\"randomNonContainsRelationType\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/schemas/relationshiptypes",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"schemas",
						"relationshiptypes"
					]
				},
				"description": "Returns all valid relationship types"
			},
			"response": []
		},
		{
			"name": "POST Floor Contains randomNodeType",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - rules are still disabled NOT IMPLEMENTED\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"//Response body check\r",
							"pm.test(\"Response body check - rules are still disabled NOT IMPLEMENTED\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.errorCode).to.eql(800);\r",
							"    pm.expect(jsonData.message).to.include(\"Floor cannot have Contains relations with \" + postman.getGlobalVariable(\"randomNodeType\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"{{randomNodeType}}\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/{{randomNodeType}}",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"{{randomNodeType}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /v1/nodes/Floor/{floorId}/relations",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.nodes.length).to.be.above(0);\r",
							"    var randomNode = jsonData.nodes[Math.floor(Math.random() * jsonData.nodes.length)].nodeType;\r",
							"    postman.setGlobalVariable(\"randomChildNodeType\", randomNode);\r",
							"    //console.log(postman.getGlobalVariable(\"randomChildNodeType\"));\r",
							"});\r",
							"\r",
							"//Output Ids\r",
							"pm.test(\"Random Child Node Type: \" + postman.getGlobalVariable(\"randomChildNodeType\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Floor/{{FloorId}}/relations?direction=out",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Floor",
						"{{FloorId}}",
						"relations"
					],
					"query": [
						{
							"key": "direction",
							"value": "out"
						}
					]
				},
				"description": "Returns list of nodes with relations."
			},
			"response": []
		},
		{
			"name": "POST Floor randomNonContainsRelation randomChildNodeType",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - rules are still disabled NOT IMPLEMENTED\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check - rules are still disabled NOT IMPLEMENTED\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.errorCode).to.eql(800);\r",
							"    pm.expect(jsonData.message).to.include(\"Floor cannot have \" + postman.getGlobalVariable(\"randomNonContainsRelationType\") + \" relations with Keypad\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b4eebd6b-f0fe-48c6-8061-1928c4853bc4",
						"exec": [
							"var node_id_local = postman.getGlobalVariable(\"randomChildNodeType\") + 'Id';\r",
							"var node_id_local_value = postman.getGlobalVariable(node_id_local);\r",
							"pm.environment.set(\"inNodeId\", node_id_local_value);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"inNodeId\": \"{{inNodeId}}\",\n    \"outNodeId\": \"{{FloorId}}\"\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/{{randomNonContainsRelationType}}",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"{{randomNonContainsRelationType}}"
					]
				},
				"description": "Creates a relation between two pre-existing nodes.\r The relationship is directed, out node => in node."
			},
			"response": []
		},
		{
			"name": "GET Floor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check - properties existence\", function () {\r",
							"    pm.expect(jsonData.hasOwnProperty(\"caption\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"changeId\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"floorLevel\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"displayMode\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"visibleLayers\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"colorType\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"nodeType\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"name\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"description\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"resources\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"id\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"encSystemId\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"nodeSystemType\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"createdBy\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"createdDate\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"updatedBy\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"updatedDate\")).to.eql(true);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - properties count\", function () {\r",
							"    pm.expect(Object.keys(jsonData).length).to.eql(Number(postman.getGlobalVariable(\"NodePropertiesCount\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.caption).to.eql(\"New Floor\");\r",
							"    pm.expect(jsonData.changeId).to.eql(\"e792aff7-eae6-4a22-8fb7-eace30c58b98\");\r",
							"    pm.expect(jsonData.floorLevel).to.eql(0);\r",
							"    pm.expect(jsonData.displayMode).to.eql(\"ThreeD\");\r",
							"    pm.expect(jsonData.visibleLayers[0]).to.eql(73);\r",
							"    pm.expect(jsonData.visibleLayers[33]).to.eql(106);\r",
							"    pm.expect(jsonData.colorType).to.eql(\"FullColor\");\r",
							"    pm.expect(jsonData.nodeType).to.eql(\"Floor\");\r",
							"    pm.expect(jsonData.name).to.eql(\"FloorName\");\r",
							"    pm.expect(jsonData.description).to.eql(null);\r",
							"    pm.expect(jsonData.resources.length).to.eql(2);\r",
							"    pm.expect(jsonData.id).to.eql(postman.getGlobalVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.encSystemId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.nodeSystemType).to.eql(245);\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.createdDate).to.not.eql(null);\r",
							"    pm.expect(jsonData.updatedBy).to.eql(null);\r",
							"    pm.expect(jsonData.updatedDate).to.eql(null);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Floor/{{FloorId}}",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Floor",
						"{{FloorId}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET Floor Relations",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"\r",
							"pm.test(\"Response body check - rules are still disabled NOT IMPLEMENTED\", function () {\r",
							"    pm.expect(jsonData.nodes.length).to.eql(21);\r",
							"    pm.expect(jsonData.relations.length).to.eql(21);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Floor/{{FloorId}}/relations?direction=out",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Floor",
						"{{FloorId}}",
						"relations"
					],
					"query": [
						{
							"key": "direction",
							"value": "out"
						}
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "DELETE  Organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1551f680-e5e9-46a4-b944-a39758717fec",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Organization/{{OrganizationId}}?cascade=true",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Organization",
						"{{OrganizationId}}"
					],
					"query": [
						{
							"key": "cascade",
							"value": "true"
						}
					]
				},
				"description": "Deletes a node by record id"
			},
			"response": []
		},
		{
			"name": "GET all nodes under EncSystem Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "263550bb-9e36-4fa6-8d7e-6529b2b38c44",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.values.length).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes?EncSystemId={{EncSystemId}}&pageSize=50&pageIndex=0",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes"
					],
					"query": [
						{
							"key": "EncSystemId",
							"value": "{{EncSystemId}}"
						},
						{
							"key": "pageSize",
							"value": "50"
						},
						{
							"key": "pageIndex",
							"value": "0"
						}
					]
				},
				"description": "Returns all the nodes"
			},
			"response": []
		},
		{
			"name": "GET all relations under EncSystem Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "263550bb-9e36-4fa6-8d7e-6529b2b38c44",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.values.length).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations?EncSystemId={{EncSystemId}}&pageSize=50&pageIndex=0",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations"
					],
					"query": [
						{
							"key": "EncSystemId",
							"value": "{{EncSystemId}}"
						},
						{
							"key": "pageSize",
							"value": "50"
						},
						{
							"key": "pageIndex",
							"value": "0"
						}
					]
				},
				"description": "Returns all the nodes"
			},
			"response": []
		},
		{
			"name": "GET Organization Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Organization/{{OrganizationId}}",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Organization",
						"{{OrganizationId}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET  Organization Contained EncSystem relation Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Contains/{{OrganizationContainsEncSystemId}}",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Contains",
						"{{OrganizationContainsEncSystemId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "DELETE all resources under Organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "16917ce4-14a7-456f-86ae-97486996ae60",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlResource}}/v1/resources/{{OrganizationId}}",
					"host": [
						"{{http}}{{env}}{{urlResource}}"
					],
					"path": [
						"v1",
						"resources",
						"{{OrganizationId}}"
					]
				},
				"description": "Returns list of resources Urls under an Organization"
			},
			"response": []
		},
		{
			"name": "GET EGF Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9fb7f74e-8360-4867-90b0-dbc09aa5e872",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlResource}}/v1/resources/{{OrganizationId}}/{{EncSystemId}}/{{resourceEGFName}}.egf",
					"host": [
						"{{http}}{{env}}{{urlResource}}"
					],
					"path": [
						"v1",
						"resources",
						"{{OrganizationId}}",
						"{{EncSystemId}}",
						"{{resourceEGFName}}.egf"
					]
				},
				"description": "Returns a resource content"
			},
			"response": []
		},
		{
			"name": "GET SVG Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9fb7f74e-8360-4867-90b0-dbc09aa5e872",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlResource}}/v1/resources/{{OrganizationId}}/{{EncSystemId}}/{{resourceSVGName}}.svg",
					"host": [
						"{{http}}{{env}}{{urlResource}}"
					],
					"path": [
						"v1",
						"resources",
						"{{OrganizationId}}",
						"{{EncSystemId}}",
						"{{resourceSVGName}}.svg"
					]
				},
				"description": "Returns a resource content"
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "username",
				"value": "removed",
				"type": "string"
			},
			{
				"key": "password",
				"value": "removed",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "70296f5e-e050-46bd-954f-c899ba361909",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7e6bac53-bdeb-4338-82e6-9ec2ddceae77",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}