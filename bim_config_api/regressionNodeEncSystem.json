{
	"info": {
		"_postman_id": "3bb24ba5-9e3e-4033-b545-f4d0966192c4",
		"name": "regressionNodeEncSystem",
		"description": "This is a regression script around Floor node.\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POST Organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Organization\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OrganizationName\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Output node Id\r",
							"pm.test(\"Organization Id: \" + postman.getGlobalVariable(\"OrganizationId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Organization\",\r\n\t\t\"name\": \"OrganizationName\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Organization",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Organization"
					]
				},
				"description": "Creates an Organization."
			},
			"response": []
		},
		{
			"name": "GET EncSystem Schema",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "72225d8d-54ab-493d-8ab4-579787d09bda",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.type).to.eql(\"object\", \"Failed at type line.\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.dbStatus.required).to.eql(true, \"Failed at properties line dbStatus.required.\");\r",
							"    pm.expect(jsonData.properties.dbStatus.type[0]).to.eql(\"string\", \"Failed at properties line dbStatus.type[0].\");\r",
							"    pm.expect(jsonData.properties.dbStatus.type[1]).to.eql(\"null\", \"Failed at properties line dbStatus.type[1].\");\r",
							" \r",
							"    pm.expect(jsonData.properties.enable3D.required).to.eql(true, \"Failed at properties line enable3D.required.\");\r",
							"    pm.expect(jsonData.properties.enable3D.type).to.eql(\"boolean\", \"Failed at properties line enable3D.type.\");\r",
							"  \r",
							"    \r",
							"    pm.expect(jsonData.properties.enable4hrExtensionTime.required).to.eql(true, \"Failed at properties line enable4hrExtensionTime.required.\");\r",
							"    pm.expect(jsonData.properties.enable4hrExtensionTime.type).to.eql(\"boolean\", \"Failed at properties line enable4hrExtensionTime.type.\");\r",
							" \r",
							"    pm.expect(jsonData.properties.formatStrings.required).to.eql(true, \"Failed at properties line formatStrings.required.\");\r",
							"    pm.expect(jsonData.properties.formatStrings.type[0]).to.eql(\"object\", \"Failed at properties line formatStrings.type[0].\");\r",
							"    pm.expect(jsonData.properties.formatStrings.type[1]).to.eql(\"null\", \"Failed at properties line formatStrings.type[1].\");\r",
							"    pm.expect(jsonData.properties.formatStrings.additionalProperties.type[0]).to.eql(\"string\", \"Failed at properties line formatStrings.additionalProperties.type[0].\");\r",
							"    pm.expect(jsonData.properties.formatStrings.additionalProperties.type[1]).to.eql(\"null\", \"Failed at properties line formatStrings.additionalProperties.type[1].\");\r",
							"     \r",
							"    pm.expect(jsonData.properties.timeZone.required).to.eql(true, \"Failed at properties line timeZone.required.\");\r",
							"    pm.expect(jsonData.properties.timeZone.type[0]).to.eql(\"object\", \"Failed at properties line timeZone.type[0].\");\r",
							"    pm.expect(jsonData.properties.timeZone.type[1]).to.eql(\"null\", \"Failed at properties line timeZone.type[1].\");\r",
							" \r",
							"    pm.expect(jsonData.properties.timeZone.properties.polarisId.required).to.eql(true, \"Failed at properties line timeZone.properties.polarisId.required.\");\r",
							"    pm.expect(jsonData.properties.timeZone.properties.polarisId.type[0]).to.eql(\"string\", \"Failed at properties line timeZone.properties.polarisId.type[0].\");\r",
							"    pm.expect(jsonData.properties.timeZone.properties.polarisId.type[1]).to.eql(\"null\", \"Failed at properties line timeZone.properties.polarisIdtype[1].\");\r",
							"     \r",
							"   pm.expect(jsonData.properties.timeZone.properties.offset.required).to.eql(true, \"Failed at properties line timeZone.properties.offset.required.\");\r",
							"    pm.expect(jsonData.properties.timeZone.properties.offset.type).to.eql(\"integer\", \"Failed at properties line timeZone.properties.properties.offset.type.\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.customer.required).to.eql(true, \"Failed at properties line customer.required.\");\r",
							"    pm.expect(jsonData.properties.customer.type[0]).to.eql(\"string\", \"Failed at properties line customer.type[0]\");\r",
							"    pm.expect(jsonData.properties.customer.type[1]).to.eql(\"null\", \"Failed at properties line customer.type[1]\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.notes.required).to.eql(true, \"Failed at properties line notes.required.\");\r",
							"    pm.expect(jsonData.properties.notes.type[0]).to.eql(\"string\", \"Failed at properties line notes.type[0]\");\r",
							"    pm.expect(jsonData.properties.notes.type[1]).to.eql(\"null\", \"Failed at properties line notes.type[1]\");\r",
							"   \r",
							"    pm.expect(jsonData.properties.siteAddress.required).to.eql(true, \"Failed at properties line siteAddress.required.\");\r",
							"    pm.expect(jsonData.properties.siteAddress.type[0]).to.eql(\"string\", \"Failed at properties line siteAddress.type[0]\");\r",
							"    pm.expect(jsonData.properties.siteAddress.type[1]).to.eql(\"null\", \"Failed at properties line siteAddress.type[1]\");\r",
							"   \r",
							"    pm.expect(jsonData.properties.siteLatitude.required).to.eql(true, \"Failed at properties line siteLatitude.required.\");\r",
							"    pm.expect(jsonData.properties.siteLatitude.type[0]).to.eql(\"string\", \"Failed at properties line siteLatitude.type[0]\");\r",
							"    pm.expect(jsonData.properties.siteLatitude.type[1]).to.eql(\"null\", \"Failed at properties line siteLatitude.type[1]\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.siteLongitude.required).to.eql(true, \"Failed at properties line siteLongitude.required.\");\r",
							"    pm.expect(jsonData.properties.siteLongitude.type[0]).to.eql(\"string\", \"Failed at properties line siteLongitude.type[0]\");\r",
							"    pm.expect(jsonData.properties.siteLongitude.type[1]).to.eql(\"null\", \"Failed at properties line siteLongitude.type[1]\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.nodeType.required).to.eql(true, \"Failed at properties line nodeType.required.\");\r",
							"    pm.expect(jsonData.properties.nodeType.type[0]).to.eql(\"string\", \"Failed at properties line nodeType.type[0]\");\r",
							"    pm.expect(jsonData.properties.nodeType.type[1]).to.eql(\"null\", \"Failed at properties line nodeType.type[1]\");\r",
							"     \r",
							"    pm.expect(jsonData.properties.name.required).to.eql(true, \"Failed at properties line name.required.\");\r",
							"    pm.expect(jsonData.properties.name.type[0]).to.eql(\"string\", \"Failed at properties line name.type[0]\");\r",
							"    pm.expect(jsonData.properties.name.type[1]).to.eql(\"null\", \"Failed at properties line name.type[1]\");\r",
							"    \r",
							"    \r",
							"    pm.expect(jsonData.properties.description.required).to.eql(true, \"Failed at properties line description.required.\");\r",
							"    pm.expect(jsonData.properties.description.type[0]).to.eql(\"string\", \"Failed at properties line description.type[0]\");\r",
							"    pm.expect(jsonData.properties.description.type[1]).to.eql(\"null\", \"Failed at properties line description.type[1]\");\r",
							"\r",
							"    pm.expect(jsonData.properties.resources.required).to.eql(true, \"Failed at properties line resources.required.\");\r",
							"    pm.expect(jsonData.properties.resources.type[0]).to.eql(\"array\", \"Failed at properties line resources.type[0].\");\r",
							"    pm.expect(jsonData.properties.resources.type[1]).to.eql(\"null\", \"Failed at properties line resources.type[1].\");\r",
							"    pm.expect(jsonData.properties.resources.items.type[0]).to.eql(\"object\", \"Failed at properties line resources.items.type[0].\");\r",
							"    pm.expect(jsonData.properties.resources.items.type[1]).to.eql(\"null\", \"Failed at properties line resources.items.type[1].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.name.required).to.eql(true, \"Failed at properties line resources.items.properties.name.required.\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.name.type[0]).to.eql(\"string\", \"Failed at properties line resources.items.properties.name.type[0].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.name.type[1]).to.eql(\"null\", \"Failed at properties line resources.items.properties.name.type[1].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.description.required).to.eql(true, \"Failed at properties line resources.items.properties.description.required.\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.description.type[0]).to.eql(\"string\", \"Failed at properties line resources.items.properties.description.type[0]).\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.description.type[1]).to.eql(\"null\", \"Failed at properties line resources.items.properties.description.type[1]).\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.link.required).to.eql(true, \"Failed at properties line resources.items.properties.link.required.\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.link.type[0]).to.eql(\"string\", \"Failed at properties line resources.items.properties.link.type[0].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.link.type[1]).to.eql(\"null\", \"Failed at properties line resources.items.properties.link.type[1].\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.resources.items.properties.metaData.required).to.eql(true, \"Failed at properties line resources.items.properties.metaData.required.\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.metaData.type[0]).to.eql(\"object\", \"Failed at properties line resources.items.properties.metaData.type[0].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.metaData.type[1]).to.eql(\"null\", \"Failed at properties line resources.items.properties.metaData.type[1].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.metaData.additionalProperties.type[0]).to.eql(\"string\", \"Failed at properties line resources.items.properties.metaData.additionalProperties.type[0].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.metaData.additionalProperties.type[1]).to.eql(\"null\", \"Failed at properties line resources.items.properties.metaData.additionalProperties.type[1].\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.id.required).to.eql(true, \"Failed at properties line id.required.\");\r",
							"    pm.expect(jsonData.properties.id.type).to.eql(\"string\", \"Failed at properties line id.type.\");\r",
							"\r",
							"    pm.expect(jsonData.properties.encSystemId.required).to.eql(true, \"Failed at properties line encSystemId.required.\");\r",
							"    pm.expect(jsonData.properties.encSystemId.type[0]).to.eql(\"string\", \"Failed at properties line encSystemId.type[0].\");\r",
							"    pm.expect(jsonData.properties.encSystemId.type[1]).to.eql(\"null\", \"Failed at properties line encSystemId.type[1].\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.nodeSystemType.required).to.eql(true, \"Failed at properties line nodeSystemType.required).\");\r",
							"    pm.expect(jsonData.properties.nodeSystemType.type).to.eql(\"integer\", \"Failed at properties line nodeSystemType.type.\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.createdBy.required).to.eql(true, \"Failed at properties line createdBy.required.\");\r",
							"    pm.expect(jsonData.properties.createdBy.type[0]).to.eql(\"string\", \"Failed at properties line createdBy.type[0].\");\r",
							"    pm.expect(jsonData.properties.createdBy.type[1]).to.eql(\"null\", \"Failed at properties line createdBy.type[1].\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.createdDate.required).to.eql(true, \"Failed at properties line createdDate.required.\");\r",
							"    pm.expect(jsonData.properties.createdDate.type).to.eql(\"string\", \"Failed at properties line createdDate.type.\");\r",
							"        \r",
							"    pm.expect(jsonData.properties.updatedBy.required).to.eql(true, \"Failed at properties line updatedBy.required.\");\r",
							"    pm.expect(jsonData.properties.updatedBy.type[0]).to.eql(\"string\", \"Failed at properties line updatedBy.type[0].\");\r",
							"    pm.expect(jsonData.properties.updatedBy.type[1]).to.eql(\"null\", \"Failed at properties line updatedBy.type[1].\");\r",
							"            \r",
							"    pm.expect(jsonData.properties.updatedDate.required).to.eql(true, \"Failed at properties line updatedDate.required.\");\r",
							"    pm.expect(jsonData.properties.updatedDate.type[0]).to.eql(\"string\", \"Failed at properties line updatedDate.type[0].\");\r",
							"    pm.expect(jsonData.properties.updatedDate.type[1]).to.eql(\"null\", \"Failed at properties line updatedDate.type[1].\");\r",
							"    \r",
							"    //OLT's device IDs: it will be populated by Device Twin Manager, when it registers the devices in OLT Digital Twin.\r",
							"    pm.expect(jsonData.properties.externalId.required).to.eql(true, \"Failed at properties line externalId.required.\");\r",
							"    pm.expect(jsonData.properties.externalId.type[0]).to.eql(\"string\", \"Failed at properties line externalId.type[0].\");\r",
							"    pm.expect(jsonData.properties.externalId.type[1]).to.eql(\"null\", \"Failed at properties line externalId.type[1].\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - total count\", function () {\r",
							"    pm.expect(Object.keys(jsonData).length).to.eql(2);\r",
							"    pm.expect(Object.keys(jsonData.properties).length).to.eql(22);\r",
							"    postman.setGlobalVariable(\"NodePropertiesCount\", Object.keys(jsonData.properties).length);\r",
							"});\r",
							"\r",
							"//Output node's properties count\r",
							"pm.test(\"Node EncSystem has \" + postman.getGlobalVariable(\"NodePropertiesCount\") + \" properties.\", function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/schemas/nodetypes/EncSystem",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"schemas",
						"nodetypes",
						"EncSystem"
					]
				},
				"description": "Returns schema of the nodeType"
			},
			"response": []
		},
		{
			"name": "GET EncSystem Schema Sample",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a92ab9f4-7419-4b6b-8a90-dbd54a5a74e7",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.hasOwnProperty(\"dbStatus\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"enable3D\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"enable4hrExtensionTime\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"formatStrings\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"timeZone\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"customer\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"notes\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"siteAddress\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"siteLatitude\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"siteLongitude\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"nodeType\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"name\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"description\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"resources\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"id\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"encSystemId\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"nodeSystemType\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"createdBy\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"createdDate\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"updatedBy\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"updatedDate\")).to.eql(true);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - total count\", function () {\r",
							"    pm.expect(Object.keys(jsonData).length).to.eql(Number(postman.getGlobalVariable(\"NodePropertiesCount\")));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/schemas/nodetypes/EncSystem/sample",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"schemas",
						"nodetypes",
						"EncSystem",
						"sample"
					]
				},
				"description": "Returns a sample instance of the nodeType"
			},
			"response": []
		},
		{
			"name": "POST Organization Contains EncSystem",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"EncSystem\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"EncSystemName\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationContainsEncSystemId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"OrganizationId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"EncSystem\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Organization\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - properties existence\", function () {\r",
							"   \r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"dbStatus\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"enable3D\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"enable4hrExtensionTime\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"formatStrings\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"timeZone\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"customer\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"notes\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"siteAddress\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"siteLatitude\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"siteLongitude\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"nodeType\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"name\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"description\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"resources\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"encSystemId\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"id\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"nodeSystemType\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"createdBy\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"createdDate\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"updatedBy\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"updatedDate\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"encSystemId\")).to.eql(true);\r",
							"    pm.expect(jsonData.node.hasOwnProperty(\"externalId\")).to.eql(true);\r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - properties count\", function () {\r",
							"    pm.expect(Object.keys(jsonData.node).length).to.eql(Number(postman.getGlobalVariable(\"NodePropertiesCount\")));\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Organization Id: \" + postman.getGlobalVariable(\"OrganizationId\"), function () {});\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Organizational to EncSystem: \" + postman.getGlobalVariable(\"OrganizationContainsEncSystemId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"EncSystem\",\r\n\t\t\"DBStatus\": \"new\",\r\n\t\t\"Enable3D\": true,\r\n\t\t\"Enable4hrExtensionTime\": false,\r\n\t\t\"FormatStrings\": {\r\n\t\t\t\"default\": \"%type% %refaddress%\",\r\n    \t\t\"FixtureModel\": \"%type% %refaddress%\"\r\n\t\t},\r\n\t\t\"TimeZone\": {\r\n    \t\t\"PolarisId\": \"TimeZone_Eastern_Standard_Time\",\r\n    \t\t\"Offset\": -180000000000\r\n\t\t},\r\n\t\t\"Name\": \"EncSystemName\",\r\n\t\t\"Customer\": \"CustomerName\",\r\n\t\t\"Notes\": \"Additional Notes\",\r\n\t\t\"SiteAddress\": \"53 street st\",\r\n\t\t\"SiteLatitude\": \"43.8563\",\r\n\t\t\"SiteLongitude\": \"-79.37784\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Organization\",\r\n\t\t\"outNodeId\": \"{{OrganizationId}}\"\r\n\t}\r\n}\r\n\r\n"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EncSystem",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EncSystem"
					]
				},
				"description": "Creates an EncSystem contains by the Organization."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains Building",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Building\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"BuildingName is Zone [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"BuildingId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsBuildingId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"BuildingId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Building\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"Building1 Id: \" + postman.getGlobalVariable(\"Building1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to Building: \" + postman.getGlobalVariable(\"EncSystemContainsBuildingId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Building\",\r\n\t\t\"SyncState\": 2,\r\n\t\t\"Name\": \"BuildingName is Zone [0064-FFFF]\",\r\n\t\t\"Caption\": \"Zone\",\r\n\t\t\"ObjectType\": 245,\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"ZOrder\": 2,\r\n\t\t\"EnableScenes\": true,\r\n\t\t\"EnableControllable\": true,\r\n\t\t\"EnablePC\": true,\r\n\t\t\"BacNetIndex\": -1,\r\n\t\t\"ComponentType\": 10,\r\n\t\t\"PCS_ActivityOnly\": false,\r\n\t\t\"PreviousEcu\": \"13165559-9116-4921-A22B-3679BE039017\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"OcsAutoTurnOn\": true,\r\n\t\t\"TimeScheduleAutoTurnOn\": true,\r\n\t\t\"OccupancyToTurnOnSchedule\": true,\r\n\t\t\"OcsExtensionTime\": 60,\r\n\t\t\"OcsManualUserExtensionTime\": 1200,\r\n\t\t\"VacancyExtensionTime\": 60,\r\n\t\t\"TwoStageExtensionTime\": 1200,\r\n\t\t\"StandbyOffBehaviour\": \"StandbyBrightness\",\r\n\t\t\"ManualFadeToOff\": 60,\r\n\t\t\"OccupancyFadeToOff\": 1200,\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Building",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Building"
					]
				},
				"description": "Creates a Building contains by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST  EncSystem Contains BuildingTemplate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"BuildingTemplate\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"BuildingTemplateId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSytemContainsBuildingTemplateId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"BuildingTemplateId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"BuildingTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"BuildingTemplate Id: \" + postman.getGlobalVariable(\"BuildingTemplateId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to BuildingTemplate: \" + postman.getGlobalVariable(\"EncSytemContainsBuildingTemplateId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"BuildingTemplate\",\r\n\t\t\"Caption\": \"Zone\",\r\n\t\t\"ObjectType\": 245,\r\n\t\t\"EnableScenes\": true,\r\n\t\t\"EnableControllable\": true,\r\n\t\t\"EnablePC\": true,\r\n\t\t\"OverrideAutonomousMode\": \"Auto|ForceNotAutonomous|ForceAutonomous\",\r\n\t     \"Description\": \"description\",\r\n\t\t\"Shape\": [\r\n    \t{\r\n    \t\"x\": 6.40148,\r\n    \t\"y\": 19.9764\r\n\t\t },\r\n\t\t {\r\n    \t\"x\": 6.40148,\r\n    \t\"y\": 19.9764\r\n    \t},\r\n    \t{\r\n    \t \"x\": 6.40148,\r\n    \t \"y\": 19.9764\r\n    \t}\r\n  ],\r\n  \"ShapeType\": \"UnKnown|Default|Rectangle|Polygon\",\r\n  \"ComponentType\": 10,\r\n  \"PCS_ActivityOnly\": false,\r\n  \"ShapeSizeX\": 10,\r\n  \"ShapeSizeY\": 10,\r\n  \"ShapeRadius\": 10,\r\n  \"OcsAutoTurnOn\": true,\r\n  \"OcsExtensionTime\": 60,\r\n  \"OcsManualUserExtensionTime\": 1200\r\n},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/BuildingTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"BuildingTemplate"
					]
				},
				"description": "Creates an OrganizationalArea contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains PolarisVirtualFloorTemplate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PolarisVirtualFloorTemplate\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PolarisVirtualFloorTemplateId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsPolarisVirtualFloorTemplateId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloorTemplateId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PolarisVirtualFloorTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"PolarisVirtualFloorTemplate Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloorTemplateId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to EncSystemId: \" + postman.getGlobalVariable(\"EncSystemContainsPolarisVirtualFloorTemplateId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"PolarisVirtualFloorTemplate\",\r\n\t\t\"Caption\": \"Zone\",\r\n\t\t\"ObjectType\": 245,\r\n\t\t\"EnableScenes\": true,\r\n\t\t\"EnableControllable\": true,\r\n\t\t\"EnablePC\": true,\r\n\t\t\"OverrideAutonomousMode\": \"Auto|ForceNotAutonomous|ForceAutonomous\",\r\n\t     \"Description\": \"description\",\r\n\t\t\"Shape\": [\r\n    \t{\r\n    \t\"x\": 6.40148,\r\n    \t\"y\": 19.9764\r\n\t\t },\r\n\t\t {\r\n    \t\"x\": 6.40148,\r\n    \t\"y\": 19.9764\r\n    \t},\r\n    \t{\r\n    \t \"x\": 6.40148,\r\n    \t \"y\": 19.9764\r\n    \t}\r\n  ],\r\n  \"ShapeType\": \"UnKnown|Default|Rectangle|Polygon\",\r\n  \"ComponentType\": 10,\r\n  \"PCS_ActivityOnly\": false,\r\n  \"ShapeSizeX\": 10,\r\n  \"ShapeSizeY\": 10,\r\n  \"ShapeRadius\": 10,\r\n  \"OcsAutoTurnOn\": true,\r\n  \"OcsExtensionTime\": 60,\r\n  \"OcsManualUserExtensionTime\": 1200\r\n},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PolarisVirtualFloorTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PolarisVirtualFloorTemplate"
					]
				},
				"description": "Creates an OrganizationalArea contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains AvInterfaceHandler",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"AvInterfaceHandler\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"AvInterfaceHandlerId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsAVInterfaceHandlerId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"AvInterfaceHandlerId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"AvInterfaceHandler\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"AvInterfaceHandler Id: \" + postman.getGlobalVariable(\"AvInterfaceHandlerId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to AvInterfaceHandler: \" + postman.getGlobalVariable(\"EncSystemContainsAVInterfaceHandlerId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"AvInterfaceHandler\",\r\n\t\t\"ObjectType\": 264,\r\n\t    \"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"IsEnabled\": true,\r\n        \"Port\": 4533,\r\n\t\t\"LoginMessage\": \"\",\r\n\t\t\"Prompt\": \"\",\r\n\t\t\"ExitMessage\": \"\",\r\n\t\t\"IsRequestLoginEnabled\": true,\r\n\t\t\"Username\": \"\",\r\n\t\t\"Password\": \"\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/AvInterfaceHandler",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"AvInterfaceHandler"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains  EventLogger",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"EventLogger\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EventLoggerId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsEventLoggerId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"EventLoggerId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"EventLogger\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"EventLogger Id: \" + postman.getGlobalVariable(\"EventLoggerId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to EventLogger: \" + postman.getGlobalVariable(\"EncSystemContainsEventLoggerId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"EventLogger\",\r\n        \"ObjectType\": 264,\r\n        \"RefAddress\": 44294967295,\r\n        \"SyncState\": 2\r\n\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EventLogger",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EventLogger"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains EventList",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"EventList\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EventListId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsEventListId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"EventListId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"EventList\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"EventList Id: \" + postman.getGlobalVariable(\"EventListId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to EventList: \" + postman.getGlobalVariable(\"EncSystemContainsEventListId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"EventList\",\r\n        \"ObjectType\": 264,\r\n        \"RefAddress\": 44294967295,\r\n        \"SyncState\": 2\r\n\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EventList",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EventList"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains BACnetGateway",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"BacnetGateway\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"BacnetGatewayId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsBacnetGatewayId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"BacnetGatewayId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"BacnetGateway\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"BacnetGateway Id: \" + postman.getGlobalVariable(\"BacnetGatewayId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to BacnetGateway: \" + postman.getGlobalVariable(\"EncSystemContainsBacnetGatewayId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"BacnetGateway\",\r\n        \"ObjectType\": 264,\r\n        \"RefAddress\": 44294967295,\r\n        \"SyncState\": 2\r\n\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/BacnetGateway",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"BacnetGateway"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains BACnetConfiguration",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"BacnetConfiguration\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"BacnetConfigurationId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsBacnetConfigurationId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"BacnetConfigurationId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"BacnetConfiguration\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"BacnetConfiguration Id: \" + postman.getGlobalVariable(\"BacnetConfigurationId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to BacnetConfiguration: \" + postman.getGlobalVariable(\"EncSystemContainsBacnetConfigurationrId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"BacnetConfiguration\",\r\n        \"Configuration\":{\"key1\": \"value1\", \"key2\": \"value2\"}\r\n\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/BacnetConfiguration",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"BacnetConfiguration"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains SolarCalculator",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"SolarCalculator\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"SolarCalculatorId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsSolarCalculatorId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"SolarCalculatorId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"SolarCalculator\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"SolarCalculator Id: \" + postman.getGlobalVariable(\"SolarCalculatorId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to SolarCalculator: \" + postman.getGlobalVariable(\"EncSystemContainsSolarCalculatorId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"SolarCalculator\",\r\n         \"ObjectType\": 264,\r\n        \"RefAddress\": 44294967295,\r\n        \"SyncState\": 2\r\n\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/SolarCalculator",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"SolarCalculator"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains CommandOptimizer(DALI)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"CommandOptimizer\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"CommandOptimizerId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsCommandOptimizerId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"CommandOptimizerId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"CommandOptimizer\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"CommandOptimizer Id: \" + postman.getGlobalVariable(\"CommandOptimizerId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to CommandOptimizer: \" + postman.getGlobalVariable(\"EncSystemContainsCommandOptimizerId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"CommandOptimizer\",\r\n         \"ObjectType\": 264,\r\n        \"RefAddress\": 44294967295,\r\n        \"SyncState\": 2,\r\n         \"XML\": \"\" \r\n\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/CommandOptimizer",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"CommandOptimizer"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains  EmergencyTestManager",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"EmergencyTestManager\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EmergencyTestManagerId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsEmergencyTestManagerId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"EmergencyTestManagerId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"EmergencyTestManager\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"EmergencyTestManager Id: \" + postman.getGlobalVariable(\"EmergencyTestManagerId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to EmergencyTestManager: \" + postman.getGlobalVariable(\"EncSystemContainsEmergencyTestManagerId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"EmergencyTestManager\",\r\n        \"ObjectType\": 264,\r\n        \"RefAddress\": 44294967295,\r\n        \"Name\": \"Emergency Test Manager []\",\r\n        \"TestManagerType\": \"Central|Contained\",\r\n        \"SyncState\": 2,\r\n        \"XML\": \"\" \r\n\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EmergencyTestManager",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EmergencyTestManager"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains KeypadTemplate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"KeypadTemplate\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"KeypadTemplateId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsKeypadTemplateId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"KeypadTemplateId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"KeypadTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"KeypadTemplate Id: \" + postman.getGlobalVariable(\"KeypadTemplateId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to KeypadTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsKeypadTemplateId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"KeypadTemplate\",\r\n\t\t\"internalId\": 0,\r\n\t\t\"controlItemGroup\": \"ig_controller\",\r\n\t\t\"caption\": \"DALI ZC4 toggle/dim\",\r\n\t\t \"size\": {\r\n\t\t\t\"x\": 0.30480000376701355,\r\n\t\t\t\"y\": 0.30480000376701355\r\n\t\t  },\r\n\t\t\"shape\": [],\r\n\t\t\"componentType\": 1,\r\n\t\t\"xmlTemplate\": null,\r\n\t\t\"graphic\": \"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAMAAACahl6sAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAwBQTFRFtbybLlgAAAAlwSFlzAAAOwgAADsIBFShKgAAAAmRJREFUeF7t3NGKpDAQQNHp///pnYF9aN1BbluGFTm+NZhoblVuqgPx6+sx1+sR13c4HjGOl4HcLY4iIiKLCEitRWBPdysip9EtariJyPVV1+atl3b/1IFcG/ddHXd1WbfpbxcRA/mVgIi0xJBajdPbXVKrIZNajZPUmnGyIBZ+rFUovb63sjbz8e3X0qpu9+D2rod3GcjHEM2RhkxqNU5W9hknK3vhx1qFkpW9UdptLR79PNHhtol15GOEJntDJrUaJyXKjJMSpfBjrUJJidIoKVGmnFirEGStQom1GiXWmnJirUKQtQol1mqUWGvKibUKQdYqlFirUWKtKSfWKgRZq1BirUaJtaacWKsQZK1CibUaJdaacmKtQpC1CiXWapRYa8qJtQpB1iqUWKtRuou1rj5yvhvXwu6feZ79RPbcpomPV9wmFH9fREREZBEBqbUI7OluReQ0ukUNRWQR2NPdPrNovLrK/uev7tUPeIufzYeSzDYfCiWbD43SXTYfTrztQRNzpPF0oLJx2ixSR1Pm4+72DUTkY4Qme0MmtRonk33GSRlf+LFWoaSMb5SU8VNOrFUIslahxFqNEmtNObFWIchahRJrNUqsNeXEWoUgaxVKrNUosdaUE2sVgqxVKLFWo8RaU06sVQiyVqHEWo0Sa005sVYhyFqFEms1Sqw15cRahSBrFUqs1Six1pQTaxWCrFUosVajxFpTTqxVCLJWocRajRJrTTmxViHIWoXSsbUWntP+efDV19uAn3kwv0X0nnf5eMXd4iIiIrKIgNRaBPZ0tyJyGt2ihk+KyNWV3H/q7w/xP48lhUBRYgAAAABJRU5ErkJggg==\",\r\n\t\t\"isLedAlwaysOn\": false,\r\n\t\t\"pcdOffset\": null,\r\n\t\t\"sceneOffset\": null,\r\n\t\t\"allowDimming\": null,\r\n\t\t\"assignToAll\": false,\r\n\t\t\"pchType\": 0,\r\n\t\t\"name\": \"\",\r\n\t\t\"description\": null,\r\n\t\t\"resources\": [\r\n\t\t\t{\r\n\t\t\t  \"name\": \"{{resourceXMLName}}.xml\",\r\n\t\t\t  \"description\": \"XML Template for DALIZC4TD (ProgrammableControllerTemplateModel)\",\r\n\t\t\t  \"link\": \"{{http}}{{env}}{{urlResource}}/v1/resources/{{organizationId}}/{{encSystemId}}/{{resourceXMLName}}.xml\",\r\n\t\t\t  \"metaData\": {\r\n\t\t\t\t\"uploadedBy\": \"QA\",\r\n\t\t\t\t\"expectedUsage\": \"Keypad template\",\r\n\t\t\t\t\"xmlTemplateName\": \"DALIZC4TD\",\r\n\t\t\t\t\"modelType\": \"ProgrammableControllerTemplateModel\"\r\n\t\t\t  }\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"encSystemId\": null,\r\n\t\t\"nodeSystemType\": 174,\r\n\t\t\"createdBy\": \"root\",\r\n\t\t\"createdDate\": \"2019-04-30T20:42:29.782715+00:00\",\r\n\t\t\"updatedBy\": null,\r\n\t\t\"updatedDate\": null\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/KeypadTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"KeypadTemplate"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains OccupancySensorTemplate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OccupancySensorTemplate\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OccupancySensorTemplateId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsOccupancySensorTemplateId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OccupancySensorTemplateId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OccupancySensorTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"OccupancySensorTemplate Id: \" + postman.getGlobalVariable(\"OccupancySensorTemplateId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to OccupancySensorTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsOccupancySensorTemplateId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"OccupancySensorTemplate\",\r\n        \"ObjectType\": 264,\r\n        \"ControlItemGroup\": \"ig_unknown|ig_fixture|ig_phs|ig_controller|ig_ocs|ig_other\",\r\n\t\t \"Caption\": \"Occupancy Sensor Template\",\r\n\t\t\"Description\": \"description\",\r\n\t\t\"Size\": {\r\n    \t\t\"x\": 6.40148,\r\n    \t\t\"y\": 19.9764\r\n\t\t},\r\n\t\"Shape\": [\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    }\r\n  ],\r\n  \"ComponentType\": 127,\r\n  \"HasSwitch\":  false\r\n\t},\r\n\t\r\n\t\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OccupancySensorTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OccupancySensorTemplate"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains OrganizationalAreaTemplate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OrganizationalAreaTemplate\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalAreaTemplateId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsOrganizationalAreaTemplateId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalAreaTemplateId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OrganizationalAreaTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"OrganizationalAreaTemplate Id: \" + postman.getGlobalVariable(\"OrganizationalAreaTemplateId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to OrganizationalAreaTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsOrganizationalAreaTemplateId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t  \"nodeType\": \"OrganizationalAreaTemplate\",\r\n\t  \"ObjectType\": 245,\r\n\t  \"Caption\": \"Zone\",\r\n\t  \"EnableControllable\": true,\r\n      \"EnableScenes\": true,\r\n       \"EnablePC\": true,\r\n      \"OverrideAutonomousMode\": \"Auto|ForceNotAutonomous|ForceAutonomous\",\r\n       \"Description\": \"description\",\r\n        \"Shape\": [\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    }\r\n  ],\r\n     \"ShapeType\": \"UnKnown|Default|Rectangle|Polygon\",\r\n     \"ComponentType\": 10,\r\n     \"PCS_ActivityOnly\": false,\r\n     \"ShapeSizeX\": 10,\r\n     \"ShapeSizeY\": 10,\r\n     \"ShapeRadius\": 10,\r\n     \"OcsAutoTurnOn\": true,\r\n     \"OcsExtensionTime\": 60,\r\n    \"OcsManualUserExtensionTime\": 1200\r\n},\r\n\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OrganizationalAreaTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OrganizationalAreaTemplate"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains ContactClosureTrigger",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"ContactClosureTrigger\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"ContactClosureTriggerId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsContactClosureTriggerId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"ContactClosureTriggerId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"ContactClosureTrigger\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"ContactClosureTrigger Id: \" + postman.getGlobalVariable(\"ContactClosureTriggerId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to ContactClosureTrigger: \" + postman.getGlobalVariable(\"EncSystemContainsContactClosureTriggerId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t  \"nodeType\": \"ContactClosureTrigger\",\r\n\t \"Name\": \"TriggerContactClosure [0064-FFFF]\",\r\n\t \"Caption\": \"TriggerContactClosure\",\r\n\t \"ObjectType\": 245,\r\n\t \"RefAddress\": 44294967295,\r\n     \"gbAddress\": 0,\r\n      \"Position\": {\r\n    \"x\": 6.40148,\r\n    \"y\": 19.9764\r\n  },\r\n     \"SyncState\": 2,\r\n     \"ActiveStateBoolValue\": false,\r\n     \"InactiveStateBoolValue\": false,\r\n    \"NoCommStateBoolValue\": false,\r\n     \"UnknownStateBoolValue\": false\r\n},\r\n\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/ContactClosureTrigger",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"ContactClosureTrigger"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains ScheduleTrigger",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"ScheduleTrigger\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"ScheduleTriggerId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsScheduleTriggerId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"ScheduleTriggerId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"ScheduleTrigger\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"ScheduleTrigger Id: \" + postman.getGlobalVariable(\"ScheduleTriggerId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to ScheduleTrigger: \" + postman.getGlobalVariable(\"EncSystemContainsScheduleTriggerId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n \"nodeType\": \"ScheduleTrigger\",\r\n \"Name\": \"TriggerScheduler [0064-FFFF]\",\r\n  \"Caption\": \"TriggerScheduler\",\r\n  \"ObjectType\": 245,\r\n  \"RefAddress\": 44294967295,\r\n  \"gbAddress\": 0,\r\n  \"Position\": {\r\n    \"x\": 6.40148,\r\n    \"y\": 19.9764\r\n  },\r\n  \"SyncState\": 2,\r\n  \"ActiveStateBoolValue\": false,\r\n  \"InactiveStateBoolValue\": false,\r\n  \"NoCommStateBoolValue\": false,\r\n  \"UnknownStateBoolValue\": false\r\n},\r\n\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/ScheduleTrigger",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"ScheduleTrigger"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains StatusTrigger",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"StatusTrigger\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"StatusTriggerId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsStatusTriggerId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"StatusTriggerId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"StatusTrigger\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"StatusTrigger Id: \" + postman.getGlobalVariable(\"StatusTriggerId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to StatusTrigger: \" + postman.getGlobalVariable(\"EncSystemContainsStatusTriggerId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n \"nodeType\": \"StatusTrigger\",\r\n \"Name\": \"TriggerStatus [0064-FFFF]\",\r\n  \"Caption\": \"TriggerStatus\",\r\n  \"ObjectType\": 245,\r\n  \"RefAddress\": 44294967295,\r\n  \"gbAddress\": 0,\r\n  \"Position\": {\r\n    \"x\": 6.40148,\r\n    \"y\": 19.9764\r\n  },\r\n  \"SyncState\": 2,\r\n  \"ActiveStateBoolValue\": false,\r\n  \"InactiveStateBoolValue\": false,\r\n  \"NoCommStateBoolValue\": false,\r\n  \"UnknownStateBoolValue\": false\r\n},\r\n\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/StatusTrigger",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"StatusTrigger"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains Calendar",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Calendar\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"CalendarId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsCalendarId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"CalendarId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Calendar\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"Calendar Id: \" + postman.getGlobalVariable(\"CalendarId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to Calendar: \" + postman.getGlobalVariable(\"EncSystemContainsCalendarId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n \"nodeType\": \"Calendar\",\r\n  \"Name\": \"Calendar []\",\r\n  \"Caption\": \"Calendar\",\r\n  \"Description\": \"Description\",\r\n  \"ObjectType\": 124,\r\n  \"SyncState\": 2,\r\n  \"RefAddress\": 44294967295,\r\n  \"BacNetIndex\": 0,\r\n  \"LastChanged\": \"2019-03-07T08:56:26.2102408-05:00\",\r\n  \"LastChangedBy\": 65535\r\n},\r\n\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Calendar",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Calendar"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains Schedule",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Schedule\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"ScheduleId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsScheduleId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"ScheduleId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Schedule\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"Calendar Id: \" + postman.getGlobalVariable(\"ScheduleId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to Schedule: \" + postman.getGlobalVariable(\"EncSystemContainsScheduleId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"node\": {\r\n \"Identifier\": \"13165559-9116-4921-A22B-3679BE039017\",\r\n   \"nodeType\": \"Schedule\",\r\n  \"Name\": \"Schedule []\",\r\n  \"Caption\": \"Schedule\",\r\n  \"Description\": \"description\",\r\n  \"ObjectType\": 127,\r\n  \"RefAddress\": 44294967295,\r\n  \"EffectiveRange\": \"\", \r\n  \"DefaultValue\": \"\", \r\n  \"AdvancedDefaultValue\": \"\", \r\n  \"MONDAY_EVENTS\": \"\",\r\n  \"TUESDAY_EVENTS\": \"\", \r\n  \"WEDNESDAY_EVENTS\": \"\", \r\n  \"THURSDAY_EVENTS\": \"\", \r\n  \"FRIDAY_EVENTS\": \"\", \r\n  \"SATURDAY_EVENTS\": \"\", \r\n  \"SUNDAY_EVENTS\": \"\", \r\n  \"BacNetIndex\": 0,\r\n  \"LastChanged\": \"2019-03-07T08:56:26.2102408-05:00\",\r\n  \"LastChangedBy\": 65535,\r\n  \"SyncState\": 2\r\n},\r\n\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Schedule",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Schedule"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains PhotosensorTemplate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PhotoSensorTemplate\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PhotoSensorTemplateId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsPhotoSensorTemplateId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"PhotoSensorTemplateId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PhotoSensorTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"PhotoSensorTemplate Id: \" + postman.getGlobalVariable(\"PhotoSensorTemplateId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to PhotoSensorTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsPhotoSensorTemplateId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"PhotoSensorTemplate\",\r\n        \"ObjectType\": 264,\r\n         \"ControlItemGroup\": \"ig_unknown|ig_fixture|ig_phs|ig_controller|ig_ocs|ig_other\",\r\n\t\t\"Caption\": \"PhotoSensor Template\",\r\n\t\t \"Description\": \"description\",\r\n\t\t \"Size\": {\r\n    \"x\": 6.40148,\r\n    \"y\": 19.9764\r\n  },\r\n  \"Shape\": [\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    }\r\n  ],\r\n  \"ComponentType\": 127,\r\n  \"Rotation\": 0,\r\n  \"DayLightOrientation\": 0,\r\n  \"DayLightDistance\": 0.0,\r\n  \"DayLightOutOfRange\": false,\r\n  \"DayLightRange\": 0.0,\r\n  \"DayLightValues\": [\r\n    {\r\n      \"M\": 0.0,\r\n      \"L\": 0.0\r\n    },\r\n    {\r\n      \"M\": 0.0,\r\n      \"L\": 0.0\r\n    },\r\n    {\r\n      \"M\": 0.0,\r\n      \"L\": 0.0\r\n    }\r\n  ],\r\n  \"PhotoSensorType\": \"None|PLCMultiPoint|Servodan|TridonicMultiSensor|EnOceanEchoflexTAP17|OSRAMSensorCoupler|EnOceanIllumraE3TSlicp|RFMultipoint|EnceliumPIRSensor\"\r\n\r\n\t},\r\n\t\r\n\t\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PhotoSensorTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PhotoSensorTemplate"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains LuminaireTemplate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"LuminaireTemplate\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"LuminaireTemplateId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsLuminaireTemplateId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"LuminaireTemplateId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"LuminaireTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"LuminiareTemplate Id: \" + postman.getGlobalVariable(\"LuminaireTemplateId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to LuminaireTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsLuminaireTemplateId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\"nodeType\": \"LuminaireTemplate\",\r\n  \"Identifier\": \"13165559-9116-4921-A22B-3679BE039017\",\r\n  \"InternalID\": 0,\r\n  \"ObjectType\": 264,\r\n  \"ControlItemGroup\": \"ig_unknown|ig_fixture|ig_phs|ig_controller|ig_ocs|ig_other\",\r\n  \"Caption\": \"Fixture Template\",\r\n  \"Description\": \"description\",\r\n  \"Size\": {\r\n    \"x\": 6.40148,\r\n    \"y\": 19.9764\r\n  },\r\n  \"Shape\": [\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    }\r\n  ],\r\n  \"ComponentType\": 127,\r\n  \"Rotation\": 0,\r\n  \"DayLightOrientation\": 0,\r\n  \"DayLightDistance\": 0.0,\r\n  \"DayLightOutOfRange\": false,\r\n  \"DayLightBrightness\": 0,\r\n  \"DayLightOverride\": 0,\r\n  \"DayLightCompRemainder\": 0,\r\n  \"MaxBrightness\": 0,\r\n  \"MinBrightness\": 0,\r\n  \"BackupPowerBrightness\": 0,\r\n  \"EnabledForcedOverrideBrightness\": false,\r\n  \"ForcedOverrideBrightness\": 0,\r\n  \"ComfortBrightness\": 0,\r\n  \"MinComfortBrightness\": 0,\r\n  \"ComfortBrightnessRelative\": false,\r\n  \"NightLight\": false,\r\n  \"LuxMin\": 0,\r\n  \"LuxMax\": 0,\r\n  \"Linearisations\": [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ],\r\n  \"RemainingBurnIn\": 0,\r\n  \"LampExpected\": 0,\r\n  \"BallastExpected\": 0,\r\n  \"FixBaselineWattage\": 0,\r\n  \"BallastNameplateWattage\": 0,\r\n  \"Demand\": 0,\r\n  \"DemandMin\": 0,\r\n  \"Dimmable\": true,\r\n  \"Restrike\": false,\r\n  \"DisableDLHV\": false,\r\n  \"DaliFadeTime\": 0,\r\n  \"DaliFadeRate\": 0,\r\n  \"DaliPowerOnBrightnessLevel\": 0,\r\n  \"DaliSystemFailureBrightnessLevel\": 0,\r\n  \"ColorTemperature\": 0,\r\n  \"LampFailureReportingEnabled\": true\r\n\r\n},\r\n\t\r\n\t\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/LuminaireTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"LuminaireTemplate"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains TunableWhiteLuminaireTemplate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"TunableWhiteLuminaireTemplate\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"TunableWhiteLuminaireTemplateId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsTunableWhiteLuminaireTemplateId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"TunableWhiteLuminaireTemplateId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"TunableWhiteLuminaireTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"LuminiareTemplate Id: \" + postman.getGlobalVariable(\"TunableWhiteLuminaireTemplateId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to TunableWhiteLuminaireTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsTunableWhiteLuminaireTemplateId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\"nodeType\": \"TunableWhiteLuminaireTemplate\",\r\n  \"InternalID\": 0,\r\n  \"ObjectType\": 264,\r\n  \"ControlItemGroup\": \"ig_unknown|ig_fixture|ig_phs|ig_controller|ig_ocs|ig_other\",\r\n  \"Caption\": \"Tunable White Fixture Template\",\r\n  \"Description\": \"description\",\r\n  \"Size\": {\r\n    \"x\": 6.40148,\r\n    \"y\": 19.9764\r\n  },\r\n  \"Shape\": [\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    }\r\n  ],\r\n  \"ComponentType\": 127,\r\n  \"Rotation\": 0,\r\n  \"DayLightOrientation\": 0,\r\n  \"DayLightDistance\": 0.0,\r\n  \"DayLightOutOfRange\": false,\r\n  \"DayLightBrightness\": 0,\r\n  \"DayLightOverride\": 0,\r\n  \"DayLightCompRemainder\": 0,\r\n  \"MaxBrightness\": 0,\r\n  \"MinBrightness\": 0,\r\n  \"BackupPowerBrightness\": 0,\r\n  \"EnabledForcedOverrideBrightness\": false,\r\n  \"ForcedOverrideBrightness\": 0,\r\n  \"ComfortBrightness\": 0,\r\n  \"MinComfortBrightness\": 0,\r\n  \"ComfortBrightnessRelative\": false,\r\n  \"NightLight\": false,\r\n  \"LuxMin\": 0,\r\n  \"LuxMax\": 0,\r\n  \"Linearisations\": [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ],\r\n  \"RemainingBurnIn\": 0,\r\n  \"LampExpected\": 0,\r\n  \"BallastExpected\": 0,\r\n  \"FixBaselineWattage\": 0,\r\n  \"BallastNameplateWattage\": 0,\r\n  \"Demand\": 0,\r\n  \"DemandMin\": 0,\r\n  \"Dimmable\": true,\r\n  \"Restrike\": false,\r\n  \"DisableDLHV\": false,\r\n  \"DaliFadeTime\": 0,\r\n  \"DaliFadeRate\": 0,\r\n  \"DaliPowerOnBrightnessLevel\": 0,\r\n  \"DaliSystemFailureBrightnessLevel\": 0,\r\n  \"ColorTemperature\": 0,\r\n  \"LampFailureReportingEnabled\": true,\r\n  \"XmlTemplate\": \"\"\r\n\r\n},\r\n\t\r\n\t\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/TunableWhiteLuminaireTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"TunableWhiteLuminaireTemplate"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains WSLCLuminaireTemplate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"WslcLuminaireTemplate\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"WslcLuminaireTemplateId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsWslcLuminaireTemplateId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"WslcLuminaireTemplateId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"WslcLuminaireTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"WSLCLuminiareTemplate Id: \" + postman.getGlobalVariable(\"WslcLuminaireTemplateId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to WslcLuminaireTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsWslcLuminaireTemplateId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\"nodeType\": \"WslcLuminaireTemplate\",\r\n  \"InternalID\": 0,\r\n  \"ObjectType\": 264,\r\n  \"ControlItemGroup\": \"ig_unknown|ig_fixture|ig_phs|ig_controller|ig_ocs|ig_other\",\r\n  \"Caption\": \"Fixture Template\",\r\n  \"Description\": \"description\",\r\n  \"Size\": {\r\n    \"x\": 6.40148,\r\n    \"y\": 19.9764\r\n  },\r\n  \"Shape\": [\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    }\r\n  ],\r\n  \"ComponentType\": 127,\r\n  \"Rotation\": 0,\r\n  \"DayLightOrientation\": 0,\r\n  \"DayLightDistance\": 0.0,\r\n  \"DayLightOutOfRange\": false,\r\n  \"DayLightBrightness\": 0,\r\n  \"DayLightOverride\": 0,\r\n  \"DayLightCompRemainder\": 0,\r\n  \"MaxBrightness\": 0,\r\n  \"MinBrightness\": 0,\r\n  \"BackupPowerBrightness\": 0,\r\n  \"EnabledForcedOverrideBrightness\": false,\r\n  \"ForcedOverrideBrightness\": 0,\r\n  \"ComfortBrightness\": 0,\r\n  \"MinComfortBrightness\": 0,\r\n  \"ComfortBrightnessRelative\": false,\r\n  \"NightLight\": false,\r\n  \"LuxMin\": 0,\r\n  \"LuxMax\": 0,\r\n  \"Linearisations\": [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ],\r\n  \"RemainingBurnIn\": 0,\r\n  \"LampExpected\": 0,\r\n  \"BallastExpected\": 0,\r\n  \"FixBaselineWattage\": 0,\r\n  \"BallastNameplateWattage\": 0,\r\n  \"Demand\": 0,\r\n  \"DemandMin\": 0,\r\n  \"Dimmable\": true,\r\n  \"Restrike\": false,\r\n  \"DisableDLHV\": false,\r\n  \"DaliFadeTime\": 0,\r\n  \"DaliFadeRate\": 0,\r\n  \"DaliPowerOnBrightnessLevel\": 0,\r\n  \"DaliSystemFailureBrightnessLevel\": 0,\r\n  \"ColorTemperature\": 0,\r\n  \"LampFailureReportingEnabled\": true\r\n\r\n},\r\n\t\r\n\t\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/WslcLuminaireTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"WslcLuminaireTemplate"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains WALCLuminaireTemplate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"WalcLuminaireTemplate\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"WalcLuminaireTemplateId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsWalcLuminaireTemplateId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"WalcLuminaireTemplateId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"WalcLuminaireTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"WalcLuminiareTemplate Id: \" + postman.getGlobalVariable(\"WalcLuminaireTemplateId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to WalcLuminaireTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsWalcLuminaireTemplateId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\"nodeType\": \"WalcLuminaireTemplate\",\r\n   \"InternalID\": 0,\r\n  \"ObjectType\": 264,\r\n  \"ControlItemGroup\": \"ig_unknown|ig_fixture|ig_phs|ig_controller|ig_ocs|ig_other\",\r\n  \"Caption\": \"Fixture Template\",\r\n  \"Description\": \"description\",\r\n  \"Size\": {\r\n    \"x\": 6.40148,\r\n    \"y\": 19.9764\r\n  },\r\n  \"Shape\": [\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    }\r\n  ],\r\n  \"ComponentType\": 127,\r\n  \"Rotation\": 0,\r\n  \"DayLightOrientation\": 0,\r\n  \"DayLightDistance\": 0.0,\r\n  \"DayLightOutOfRange\": false,\r\n  \"DayLightBrightness\": 0,\r\n  \"DayLightOverride\": 0,\r\n  \"DayLightCompRemainder\": 0,\r\n  \"MaxBrightness\": 0,\r\n  \"MinBrightness\": 0,\r\n  \"BackupPowerBrightness\": 0,\r\n  \"EnabledForcedOverrideBrightness\": false,\r\n  \"ForcedOverrideBrightness\": 0,\r\n  \"ComfortBrightness\": 0,\r\n  \"MinComfortBrightness\": 0,\r\n  \"ComfortBrightnessRelative\": false,\r\n  \"NightLight\": false,\r\n  \"LuxMin\": 0,\r\n  \"LuxMax\": 0,\r\n  \"Linearisations\": [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ],\r\n  \"RemainingBurnIn\": 0,\r\n  \"LampExpected\": 0,\r\n  \"BallastExpected\": 0,\r\n  \"FixBaselineWattage\": 0,\r\n  \"BallastNameplateWattage\": 0,\r\n  \"Demand\": 0,\r\n  \"DemandMin\": 0,\r\n  \"Dimmable\": true,\r\n  \"Restrike\": false,\r\n  \"DisableDLHV\": false,\r\n  \"DaliFadeTime\": 0,\r\n  \"DaliFadeRate\": 0,\r\n  \"DaliPowerOnBrightnessLevel\": 0,\r\n  \"DaliSystemFailureBrightnessLevel\": 0,\r\n  \"ColorTemperature\": 0,\r\n  \"LampFailureReportingEnabled\": true\r\n},\r\n\t\r\n\t\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/WalcLuminaireTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"WalcLuminaireTemplate"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains WALCHiddenTemplate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"WalcHiddenTemplate\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"WalcHiddenTemplateId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsWalcHiddenTemplateId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"WalcHiddenTemplateId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"WalcHiddenTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"WalcHiddenTemplate Id: \" + postman.getGlobalVariable(\"WalcHiddenTemplateId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to WalcHiddenTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsWalcHiddenTemplateId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\"nodeType\": \"WalcHiddenTemplate\",\r\n   \"InternalID\": 0,\r\n  \"ObjectType\": 264,\r\n  \"ControlItemGroup\": \"ig_unknown|ig_fixture|ig_phs|ig_controller|ig_ocs|ig_other\",\r\n  \"Caption\": \"Fixture Template\",\r\n  \"Description\": \"description\",\r\n  \"Size\": {\r\n    \"x\": 6.40148,\r\n    \"y\": 19.9764\r\n  },\r\n  \"Shape\": [\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    }\r\n  ],\r\n  \"ComponentType\": 127,\r\n  \"Rotation\": 0,\r\n  \"DayLightOrientation\": 0,\r\n  \"DayLightDistance\": 0.0,\r\n  \"DayLightOutOfRange\": false,\r\n  \"DayLightBrightness\": 0,\r\n  \"DayLightOverride\": 0,\r\n  \"DayLightCompRemainder\": 0,\r\n  \"MaxBrightness\": 0,\r\n  \"MinBrightness\": 0,\r\n  \"BackupPowerBrightness\": 0,\r\n  \"EnabledForcedOverrideBrightness\": false,\r\n  \"ForcedOverrideBrightness\": 0,\r\n  \"ComfortBrightness\": 0,\r\n  \"MinComfortBrightness\": 0,\r\n  \"ComfortBrightnessRelative\": false,\r\n  \"NightLight\": false,\r\n  \"LuxMin\": 0,\r\n  \"LuxMax\": 0,\r\n  \"Linearisations\": [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ],\r\n  \"RemainingBurnIn\": 0,\r\n  \"LampExpected\": 0,\r\n  \"BallastExpected\": 0,\r\n  \"FixBaselineWattage\": 0,\r\n  \"BallastNameplateWattage\": 0,\r\n  \"Demand\": 0,\r\n  \"DemandMin\": 0,\r\n  \"Dimmable\": true,\r\n  \"Restrike\": false,\r\n  \"DisableDLHV\": false,\r\n  \"DaliFadeTime\": 0,\r\n  \"DaliFadeRate\": 0,\r\n  \"DaliPowerOnBrightnessLevel\": 0,\r\n  \"DaliSystemFailureBrightnessLevel\": 0,\r\n  \"ColorTemperature\": 0,\r\n  \"LampFailureReportingEnabled\": true\r\n},\r\n\t\r\n\t\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/WalcHiddenTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"WalcHiddenTemplate"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains EmergencyLuminaireTemplate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"EmergencyLuminaireTemplate\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EmergencyLuminaireTemplateId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsEmergencyLuminaireTemplateId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"EmergencyLuminaireTemplateId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"EmergencyLuminaireTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"EmergencyLuminiareTemplate Id: \" + postman.getGlobalVariable(\"EmergencyLuminaireTemplateId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to EmergencyLuminaireTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsEmergencyLuminaireTemplateId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\"nodeType\": \"EmergencyLuminaireTemplate\",\r\n \"InternalID\": 0,\r\n  \"ObjectType\": 264,\r\n  \"ControlItemGroup\": \"ig_unknown|ig_fixture|ig_phs|ig_controller|ig_ocs|ig_other\",\r\n  \"Caption\": \"Emergency Fixture Template\",\r\n  \"Description\": \"description\",\r\n  \"Size\": {\r\n    \"x\": 6.40148,\r\n    \"y\": 19.9764\r\n  },\r\n  \"Shape\": [\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    }\r\n  ],\r\n  \"ComponentType\": 127,\r\n  \"Rotation\": 0,\r\n  \"EmergencyFixtureType\": \"Maintained|NonMaintained|Central\",\r\n  \"ProlongTime\": 0,\r\n  \"XmlTemplate\": \"\" \r\n\r\n},\r\n\t\r\n\t\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EmergencyLuminaireTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EmergencyLuminaireTemplate"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains CentralBatteryTemplate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"CentralBatteryTemplate\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"CentralBatteryTemplateId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsCentralBatteryTemplateId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"CentralBatteryTemplateId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"CentralBatteryTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"CentralBatteryTemplate Id: \" + postman.getGlobalVariable(\"CentralBatteryTemplateId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to CentralBatteryTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsCentralBatteryTemplateId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"node\": {\r\n   \"nodeType\": \"CentralBatteryTemplate\",\r\n  \"InternalID\": 0,\r\n  \"ObjectType\": 264,\r\n  \"ControlItemGroup\": \"ig_unknown|ig_fixture|ig_phs|ig_controller|ig_ocs|ig_other\",\r\n  \"Caption\": \"Backup Power Template\",\r\n  \"Description\": \"description\",\r\n  \"Size\": {\r\n    \"x\": 6.40148,\r\n    \"y\": 19.9764\r\n  },\r\n  \"Shape\": [\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    }\r\n  ],\r\n  \"ComponentType\": 117,\r\n  \"TurnOffDelay\": 0,\r\n  \"TurnOnNoMaster\": 0,\r\n  \"TurnOnAlarm\": 0\r\n},\r\n\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/CentralBatteryTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"CentralBatteryTemplate"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains PlugloadTemplate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PlugLoadTemplate\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PlugLoadTemplateId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsPlugLoadTemplateId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"PlugLoadTemplateId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PlugLoadTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"PlugLoadTemplate Id: \" + postman.getGlobalVariable(\"PlugLoadTemplateId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to PlugLoadTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsPlugLoadTemplateId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"node\": {\r\n   \"nodeType\": \"PlugLoadTemplate\",\r\n  \"InternalID\": 0,\r\n  \"ObjectType\": 264,\r\n  \"ControlItemGroup\": \"ig_unknown|ig_fixture|ig_phs|ig_controller|ig_ocs|ig_other\",\r\n  \"Caption\": \"PlugLoad Template\",\r\n  \"Description\": \"description\",\r\n  \"Size\": {\r\n    \"x\": 6.40148,\r\n    \"y\": 19.9764\r\n  },\r\n  \"Shape\": [\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    }\r\n  ],\r\n  \"ComponentType\": 127,\r\n  \"NightLight\": false,\r\n  \"BaselineWattage\":  0,\r\n  \"WattageConsumption\":  0,\r\n  \"Demand\":  0,\r\n  \"DemandMin\": 0\r\n},\r\n\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PlugLoadTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PlugLoadTemplate"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains ShadeTemplate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"ShadeTemplate\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"ShadeTemplateId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsShadeTemplateId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"ShadeTemplateId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"ShadeTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"ShadeTemplate Id: \" + postman.getGlobalVariable(\"ShadeTemplateId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to ShadeTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsShadeTemplateId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"node\": {\r\n   \"nodeType\": \"ShadeTemplate\",\r\n \"InternalID\": 0,\r\n  \"ObjectType\": 264,\r\n  \"ControlItemGroup\": \"ig_unknown|ig_fixture|ig_phs|ig_controller|ig_ocs|ig_other\",\r\n  \"Caption\": \"Shade Template\",\r\n  \"Description\": \"description\",\r\n  \"Size\": {\r\n    \"x\": 6.40148,\r\n    \"y\": 19.9764\r\n  },\r\n  \"Shape\": [\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    }\r\n  ],\r\n  \"SubType\": 6,\r\n  \"Rotation\": 0\r\n  \t\r\n  },\r\n\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/ShadeTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"ShadeTemplate"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains PartitionWallTemplate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PartitionWallTemplate\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PartitionWallTemplateId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsPartitionWallTemplateId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"PartitionWallTemplateId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PartitionWallTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"PartitionWallTemplate Id: \" + postman.getGlobalVariable(\"PartitionWallTemplateId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to PartitionWallTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsPartitionWallTemplateId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"node\": {\r\n   \"nodeType\": \"PartitionWallTemplate\",\r\n   \"InternalID\": 0,\r\n  \"ObjectType\": 264,\r\n  \"ControlItemGroup\": \"ig_unknown|ig_fixture|ig_phs|ig_controller|ig_ocs|ig_other\",\r\n  \"Caption\": \"PartitionWall Template\",\r\n  \"Description\": \"description\",\r\n  \"Size\": {\r\n    \"x\": 6.40148,\r\n    \"y\": 19.9764\r\n  },\r\n  \"Shape\": [\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    }\r\n  ],\r\n  \"ComponentType\": 127,\r\n  \"Rotation\": 0\r\n},\r\n\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PartitionWallTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PartitionWallTemplate"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains FireAlarmTemplate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"FireAlarmTemplate\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FireAlarmTemplateId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsFireAlarmTemplateId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"FireAlarmTemplateId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"FireAlarmTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"FireAlarmTemplate Id: \" + postman.getGlobalVariable(\"FireAlarmTemplateId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to FireAlarmTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsFireAlarmTemplateId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"node\": {\r\n   \"nodeType\": \"FireAlarmTemplate\",\r\n    \"InternalID\": 0,\r\n  \"ObjectType\": 264,\r\n  \"ControlItemGroup\": \"ig_unknown|ig_fixture|ig_phs|ig_controller|ig_ocs|ig_other\",\r\n  \"Caption\": \"FireAlarm Template\",\r\n  \"Description\": \"description\",\r\n  \"Size\": {\r\n    \"x\": 6.40148,\r\n    \"y\": 19.9764\r\n  },\r\n  \"Shape\": [\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    },\r\n    {\r\n      \"x\": 6.40148,\r\n      \"y\": 19.9764\r\n    }\r\n  ],\r\n  \"ComponentType\": 117,\r\n  \"TurnOffDelay\": 0,\r\n  \"TurnOnNoMaster\": 0,\r\n  \"TurnOnAlarm\": 0\r\n},\r\n\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/FireAlarmTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"FireAlarmTemplate"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains LoadSheddingPrioritizer",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"LoadSheddingPrioritizer\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"LoadSheddingPrioritizerId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsLoadSheddingPrioritizerId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"LoadSheddingPrioritizerId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"LoadSheddingPrioritizer\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"LoadSheddingPrioritizer Id: \" + postman.getGlobalVariable(\"LoadSheddingPrioritizerId\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to LoadSheddingPrioritizer: \" + postman.getGlobalVariable(\"EncSystemContainsLoadSheddingPrioritizerId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"node\": {\r\n   \"nodeType\": \"LoadSheddingPrioritizer\",\r\n    \"Name\": \"Prioritizer [0064-FFFF]\",\r\n  \"Caption\": \"Prioritizer\",\r\n  \"RefAddress\": 44294967295,\r\n  \"ObjectType\": 245,\r\n  \"PrioritizerData\": [\r\n    \"\",\r\n    \"\",\r\n    \"\"\r\n  ],\r\n  \"BacNetIndex\": -1,\r\n  \"BacNetIndex2\": -1,\r\n  \"BacNetIndex3\": -1,\r\n  \"PrioritizerType\": \"Undefined|EcsLoadShedding|LoadSheddingByRequest|PrioritizedLoadShedding\",\r\n  \"SyncState\": 2\r\n\r\n},\r\n\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/LoadSheddingPrioritizer",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"LoadSheddingPrioritizer"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "Pick randomNonChildNode",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "75dd6efd-0393-43c7-b2dd-8690e6044762",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"var jsonData = pm.response.json();\r",
							"  // Store all the \"contains\" supported nodetypes to a list or array\r",
							"  var supportedNodeTypes=['Building','BuildingTemplate','AvInterfaceHandler','BacnetConfiguration','BacnetGateway','Calendar','CentralBatteryTemplate','CommandOptimizer','ContactClosureTrigger','EmergencyTestManager','EmergencyLuminaireTemplate','EventList','EventLogger','FireAlarmTemplate',\r",
							"  'KeypadTemplate','LoadSheddingPrioritizer','LuminaireTemplate','OccupancySensorTemplate','OrganizationalAreaTemplate','PartitionWallTemplate','PhotoSensorTemplate','PlugLoadTemplate',\r",
							"  'PolarisVirtualFloorTemplate','Schedule','ScheduleTrigger','ShadeTemplate','SolarCalculator','StatusTrigger',\r",
							"  'TunableWhiteLuminaireTemplate','WalcLuminaireTemplate','WslcLuminaireTemplate','WalcHiddenTemplate'\r",
							"  ]\r",
							"\r",
							" //Remove supported nodetypes  from the return\r",
							" supportedNodeTypes.forEach(function(item, index, array) {\r",
							"    index = jsonData.indexOf(item);\r",
							"    if (index > -1) {\r",
							"        jsonData.splice(index,1) //The second parameter of splice is the number of elements to remove.\r",
							"    }\r",
							" });\r",
							"    console.log(jsonData);\r",
							"    //Randowmly pick one element from the array\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"    var randomNode = jsonData[Math.floor(Math.random() * jsonData.length)];\r",
							"    postman.setGlobalVariable(\"randomNodeType\", randomNode);\r",
							"    //console.log(postman.getGlobalVariable(\"randomNodeType\"));\r",
							"});\r",
							"\r",
							"//Output Ids\r",
							"pm.test(\"Random Node Type: \" + postman.getGlobalVariable(\"randomNodeType\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/schemas/nodetypes",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"schemas",
						"nodetypes"
					]
				},
				"description": "Returns a node by IP address"
			},
			"response": []
		},
		{
			"name": "Pick randomNonContainsRelation",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "75dd6efd-0393-43c7-b2dd-8690e6044762",
						"exec": [
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"    //Remove Contains from the return\r",
							"    var index = jsonData.indexOf(\"Contains\");\r",
							"    if (index > -1) {\r",
							"        jsonData.splice(index,1) //The second parameter of splice is the number of elements to remove.\r",
							"    }\r",
							"    //console.log(jsonData);\r",
							"    //Randowmly pick one element from the array\r",
							"    var randomNonContainsRelation = jsonData[Math.floor(Math.random() * jsonData.length)];\r",
							"    postman.setGlobalVariable(\"randomNonContainsRelationType\", randomNonContainsRelation);\r",
							"    //console.log(postman.getGlobalVariable(\"randomNonContainsRelationType\"));\r",
							"});\r",
							"\r",
							"//Output Ids\r",
							"pm.test(\"Non-Contains Relation Type: \" + postman.getGlobalVariable(\"randomNonContainsRelationType\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/schemas/relationshiptypes",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"schemas",
						"relationshiptypes"
					]
				},
				"description": "Returns all valid relationship types"
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains randomNonContainsRelation randomNonChildNode",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - rules are still disabled NOT IMPLEMENTED\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"//Response body check\r",
							"pm.test(\"Response body check - rules are still disabled NOT IMPLEMENTED\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.errorCode).to.eql(800);\r",
							"    pm.expect(jsonData.message).to.include(\"Floor cannot have Contains relations with \" + postman.getGlobalVariable(\"randomNodeType\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"{{randomNodeType}}\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/{{randomNodeType}}",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"{{randomNodeType}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pick randomChildNode",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var supportedNodeTypes=['Building','BuildingTemplate','AvInterfaceHandler','BacnetConfiguration','BacnetGateway','Calendar','CentralBatteryTemplate','CommandOptimizer','ContactClosureTrigger','EmergencyTestManager','EmergencyLuminaireTemplate','EventList','EventLogger','FireAlarmTemplate',\r",
							"  'KeypadTemplate','LoadSheddingPrioritizer','LuminaireTemplate','OccupancySensorTemplate','OrganizationalAreaTemplate','PartitionWallTemplate','PhotoSensorTemplate','PlugLoadTemplate',\r",
							"  'PolarisVirtualFloorTemplate','Schedule','ScheduleTrigger','ShadeTemplate','SolarCalculator','StatusTrigger',\r",
							"  'TunableWhiteLuminaireTemplate','WalcLuminaireTemplate','WslcLuminaireTemplate','WalcHiddenTemplate'\r",
							"  ];\r",
							"    var randomNode = supportedNodeTypes[Math.floor(Math.random() * supportedNodeTypes.length)];\r",
							"    postman.setGlobalVariable(\"randomSupportedChildNodeType\", randomNode);\r",
							"    //console.log(postman.getGlobalVariable(\"randomChildNodeType\"));\r",
							"});\r",
							"\r",
							"//Output Ids\r",
							"pm.test(\"Random supported Child Node Type: \" + postman.getGlobalVariable(\"randomSupportedChildNodeType\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/schemas/nodetypes",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"schemas",
						"nodetypes"
					]
				},
				"description": "Returns list of nodes with relations."
			},
			"response": []
		},
		{
			"name": "POST Encsystem randomNonContainsRelation randomChildNode",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - rules are still disabled NOT IMPLEMENTED\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check - rules are still disabled NOT IMPLEMENTED\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.errorCode).to.eql(800);\r",
							"    pm.expect(jsonData.message).to.include(\"EncSystem cannot have \" + postman.getGlobalVariable(\"randomNonContainsRelationType\") + \" relations with randomSupportedChildNodeType\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b4eebd6b-f0fe-48c6-8061-1928c4853bc4",
						"exec": [
							"var node_id_local = postman.getGlobalVariable(\"randomSupportedChildNodeType\") + 'Id';\r",
							"var node_id_local_value = postman.getGlobalVariable(node_id_local);\r",
							"pm.environment.set(\"inNodeId\", node_id_local_value);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"inNodeId\": \"{{inNodeId}}\",\n    \"outNodeId\": \"{{EncSystemId}}\"\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/{{randomNonContainsRelationType}}",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"{{randomNonContainsRelationType}}"
					]
				},
				"description": "Creates a relation between two pre-existing nodes.\r The relationship is directed, out node => in node."
			},
			"response": []
		},
		{
			"name": "GET EncSystem",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check - properties existence\", function () {\r",
							"    pm.expect(jsonData.hasOwnProperty(\"dbStatus\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"enable3D\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"enable4hrExtensionTime\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"formatStrings\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"timeZone\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"customer\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"notes\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"siteAddress\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"siteLatitude\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"siteLongitude\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"nodeType\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"name\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"description\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"resources\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"encSystemId\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"id\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"nodeSystemType\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"createdBy\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"createdDate\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"updatedBy\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"updatedDate\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"encSystemId\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"externalId\")).to.eql(true);\r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - properties count\", function () {\r",
							"    pm.expect(Object.keys(jsonData).length).to.eql(Number(postman.getGlobalVariable(\"NodePropertiesCount\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.dbStatus).to.eql(\"new\");\r",
							"    pm.expect(jsonData.enable3D).to.eql(true);\r",
							"    pm.expect(jsonData.enable4hrExtensionTime).to.eql(false);\r",
							"    pm.expect(jsonData.name).to.eql(\"EncSystemName\");\r",
							"    pm.expect(jsonData.customer).to.eql(\"CustomerName\");\r",
							"    pm.expect(jsonData.notes).to.eql(\"Additional Notes\");\r",
							"    pm.expect(jsonData.siteAddress).to.eql(\"53 street st\");\r",
							"    pm.expect(jsonData.siteLatitude).to.eql(\"43.8563\");\r",
							"    pm.expect(jsonData.siteLongitude).to.eql(\"-79.37784\");\r",
							"    pm.expect(jsonData.nodeType).to.eql(\"EncSystem\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.createdDate).to.not.eql(null);\r",
							"    pm.expect(jsonData.updatedBy).to.eql(null);\r",
							"    pm.expect(jsonData.updatedDate).to.eql(null);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EncSystem/{{EncSystemId}}",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EncSystem",
						"{{EncSystemId}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET EncSystem Relations",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"\r",
							"pm.test(\"Response body check - rules are still disabled NOT IMPLEMENTED\", function () {\r",
							"    pm.expect(jsonData.nodes.length).to.eql(32);\r",
							"    console.log(\"1\");\r",
							"    pm.expect(jsonData.relations.length).to.eql(32);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EncSystem/{{EncSystemId}}/relations?direction=out",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EncSystem",
						"{{EncSystemId}}",
						"relations"
					],
					"query": [
						{
							"key": "direction",
							"value": "out"
						}
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "DELETE  EncSystem",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1551f680-e5e9-46a4-b944-a39758717fec",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EncSystem/{{EncSystemId}}?cascade=true",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EncSystem",
						"{{EncSystemId}}"
					],
					"query": [
						{
							"key": "cascade",
							"value": "true"
						}
					]
				},
				"description": "Deletes a node by record id"
			},
			"response": []
		},
		{
			"name": "DELETE  Organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1551f680-e5e9-46a4-b944-a39758717fec",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Organization/{{OrganizationId}}?cascade=true",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Organization",
						"{{OrganizationId}}"
					],
					"query": [
						{
							"key": "cascade",
							"value": "true"
						}
					]
				},
				"description": "Deletes a node by record id"
			},
			"response": []
		},
		{
			"name": "GET all nodes under EncSystem Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "263550bb-9e36-4fa6-8d7e-6529b2b38c44",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.values.length).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes?EncSystemId={{EncSystemId}}&pageSize=50&pageIndex=0",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes"
					],
					"query": [
						{
							"key": "EncSystemId",
							"value": "{{EncSystemId}}"
						},
						{
							"key": "pageSize",
							"value": "50"
						},
						{
							"key": "pageIndex",
							"value": "0"
						}
					]
				},
				"description": "Returns all the nodes"
			},
			"response": []
		},
		{
			"name": "GET all relations under EncSystem Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "263550bb-9e36-4fa6-8d7e-6529b2b38c44",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.values.length).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations?EncSystemId={{EncSystemId}}&pageSize=50&pageIndex=0",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations"
					],
					"query": [
						{
							"key": "EncSystemId",
							"value": "{{EncSystemId}}"
						},
						{
							"key": "pageSize",
							"value": "50"
						},
						{
							"key": "pageIndex",
							"value": "0"
						}
					]
				},
				"description": "Returns all the nodes"
			},
			"response": []
		},
		{
			"name": "GET EncSystem Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "263550bb-9e36-4fa6-8d7e-6529b2b38c44",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.values.length).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations?EncSystemId={{EncSystemId}}&pageSize=50&pageIndex=0",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations"
					],
					"query": [
						{
							"key": "EncSystemId",
							"value": "{{EncSystemId}}"
						},
						{
							"key": "pageSize",
							"value": "50"
						},
						{
							"key": "pageIndex",
							"value": "0"
						}
					]
				},
				"description": "Returns all the nodes"
			},
			"response": []
		},
		{
			"name": "GET Organization Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Organization/{{OrganizationId}}",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Organization",
						"{{OrganizationId}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET  Organization Contained EncSystem relation Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Contains/{{OrganizationContainsEncSystemId}}",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Contains",
						"{{OrganizationContainsEncSystemId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "username",
				"value": "{{username}}",
				"type": "string"
			},
			{
				"key": "password",
				"value": "{{password}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "70296f5e-e050-46bd-954f-c899ba361909",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7e6bac53-bdeb-4338-82e6-9ec2ddceae77",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}