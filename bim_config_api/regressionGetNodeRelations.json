{
	"info": {
		"_postman_id": "4a0b1913-b9bc-49fa-b495-8039dd329497",
		"name": "regressionGetNodeRelations",
		"description": "this script is a test for GET /v1/nodes/{nodeType}/{id}/relations endpoint covers CMCF-649, 656, 719, 724, 726, 727, 729, 497",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POST Organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Organization\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OrganizationName\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Output node Id\r",
							"pm.test(\"Organization Id: \" + postman.getGlobalVariable(\"OrganizationId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Organization\",\r\n\t\t\"name\": \"OrganizationName\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Organization",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Organization"
					]
				},
				"description": "Creates an Organization."
			},
			"response": []
		},
		{
			"name": "POST Organization Contains EncSystem",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"EncSystem\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"EncSystemName\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationContainsEncSystemId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"OrganizationId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"EncSystem\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Organization\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Organization Id: \" + postman.getGlobalVariable(\"OrganizationId\"), function () {});\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Organizational to EncSystem: \" + postman.getGlobalVariable(\"OrganizationContainsEncSystemId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"EncSystem\",\r\n\t\t\"DBStatus\": \"new\",\r\n\t\t\"Enable3D\": true,\r\n\t\t\"Enable4hrExtensionTime\": false,\r\n\t\t\"FormatStrings\": {\r\n\t\t\t\"default\": \"%type% %refaddress%\",\r\n    \t\t\"FixtureModel\": \"%type% %refaddress%\"\r\n\t\t},\r\n\t\t\"TimeZone\": {\r\n    \t\t\"PolarisId\": \"TimeZone_Eastern_Standard_Time\",\r\n    \t\t\"Offset\": -180000000000\r\n\t\t},\r\n\t\t\"Name\": \"EncSystemName\",\r\n\t\t\"Customer\": \"CustomerName\",\r\n\t\t\"Notes\": \"Additional Notes\",\r\n\t\t\"SiteAddress\": \"53 street st\",\r\n\t\t\"SiteLatitude\": \"43.8563\",\r\n\t\t\"SiteLongitude\": \"-79.37784\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Organization\",\r\n\t\t\"outNodeId\": \"{{OrganizationId}}\"\r\n\t}\r\n}\r\n\r\n"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EncSystem",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EncSystem"
					]
				},
				"description": "Creates an EncSystem contains by the Organization."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains Building1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Building\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Building1Name is Zone [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Building1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsBuilding1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Building1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Building\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"Building1 Id: \" + postman.getGlobalVariable(\"Building1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to Building1: \" + postman.getGlobalVariable(\"EncSystemContainsBuilding1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Building\",\r\n\t\t\"SyncState\": 2,\r\n\t\t\"Name\": \"Building1Name is Zone [0064-FFFF]\",\r\n\t\t\"Caption\": \"Zone\",\r\n\t\t\"ObjectType\": 245,\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"ZOrder\": 2,\r\n\t\t\"EnableScenes\": true,\r\n\t\t\"EnableControllable\": true,\r\n\t\t\"EnablePC\": true,\r\n\t\t\"BacNetIndex\": -1,\r\n\t\t\"ComponentType\": 10,\r\n\t\t\"PCS_ActivityOnly\": false,\r\n\t\t\"PreviousEcu\": \"13165559-9116-4921-A22B-3679BE039017\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"OcsAutoTurnOn\": true,\r\n\t\t\"TimeScheduleAutoTurnOn\": true,\r\n\t\t\"OccupancyToTurnOnSchedule\": true,\r\n\t\t\"OcsExtensionTime\": 60,\r\n\t\t\"OcsManualUserExtensionTime\": 1200,\r\n\t\t\"VacancyExtensionTime\": 60,\r\n\t\t\"TwoStageExtensionTime\": 1200,\r\n\t\t\"StandbyOffBehaviour\": \"StandbyBrightness\",\r\n\t\t\"ManualFadeToOff\": 60,\r\n\t\t\"OccupancyFadeToOff\": 1200,\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Building",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Building"
					]
				},
				"description": "Creates a Building contains by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST Building1 Contains Floor1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Floor\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Floor1Name\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Building1ContainsFloor1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Building1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Floor\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Building\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Building1 Id: \" + postman.getGlobalVariable(\"Building1Id\"), function () {});\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Building1 to Floor1: \" + postman.getGlobalVariable(\"Building1ContainsFloor1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Floor\",\r\n\t\t\"name\": \"Floor1Name\",\r\n\t\t\"Caption\": \"New Floor\",\r\n\t\t\"ChangeID\": \"e792aff7-eae6-4a22-8fb7-eace30c58b98\",\r\n\t\t\"FloorLevel\": 0,\r\n\t\t\"DisplayMode\": \"ThreeD\",\r\n\t\t\"VisibleLayers\": [ 0, 1, 4, 6 ],\r\n\t\t\"ColorType\": \"FullColor\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Building\",\r\n\t\t\"outNodeId\": \"{{Building1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Floor",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Floor"
					]
				},
				"description": "Creates a Floor contains by the Building."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains OrganizationalArea1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OrganizationalArea1Name is Zone [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsOrganizationalArea1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea1 Id: \" + postman.getGlobalVariable(\"OrganizationalArea1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to OrganizationalArea1: \" + postman.getGlobalVariable(\"Floor1ContainsOrganizationalArea1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"OrganizationalArea\",\r\n\t\t\"SyncState\": 2,\r\n\t\t\"Name\": \"OrganizationalArea1Name is Zone [0064-FFFF]\",\r\n\t\t\"Caption\": \"Zone\",\r\n\t\t\"ObjectType\": 245,\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"ZOrder\": 2,\r\n\t\t\"EnableScenes\": true,\r\n\t\t\"EnableControllable\": true,\r\n\t\t\"EnablePC\": true,\r\n\t\t\"BacNetIndex\": -1,\r\n\t\t\"ComponentType\": 10,\r\n\t\t\"PCS_ActivityOnly\": false,\r\n\t\t\"PreviousEcu\": \"13165559-9116-4921-A22B-3679BE039017\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"OcsAutoTurnOn\": true,\r\n\t\t\"TimeScheduleAutoTurnOn\": true,\r\n\t\t\"OccupancyToTurnOnSchedule\": true,\r\n\t\t\"OcsExtensionTime\": 60,\r\n\t\t\"OcsManualUserExtensionTime\": 1200,\r\n\t\t\"VacancyExtensionTime\": 60,\r\n\t\t\"TwoStageExtensionTime\": 1200,\r\n\t\t\"StandbyOffBehaviour\": \"StandbyBrightness\",\r\n\t\t\"ManualFadeToOff\": 60,\r\n\t\t\"OccupancyFadeToOff\": 1200,\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OrganizationalArea",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OrganizationalArea"
					]
				},
				"description": "Creates an OrganizationalArea contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains Luminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Luminaire1Name is Fixture []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Luminaire1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsLuminaire1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Luminaire1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"Luminaire1 Id: \" + postman.getGlobalVariable(\"Luminaire1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to Luminaire1: \" + postman.getGlobalVariable(\"Floor1ContainsLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Luminaire\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"Luminaire1Name is Fixture []\",\r\n\t\t\"Caption\": \"Fixture\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Rotation\": 0,\r\n\t\t\"DayLightOrientation\": 0,\r\n\t\t\"DayLightDistance\": 0.0,\r\n\t\t\"DayLightOutOfRange\": false,\r\n\t\t\"DayLightBrightness\": 0,\r\n\t\t\"DayLightOverride\": 0,\r\n\t\t\"DayLightCompRemainder\": 0,\r\n\t\t\"MaxBrightness\": 0,\r\n\t\t\"MinBrightness\": 0,\r\n\t\t\"ComfortBrightness\": 0,\r\n\t\t\"TwoStageBrightness\": 0,\r\n\t\t\"MinComfortBrightness\": 0,\r\n\t\t\"ComfortBrightnessRelative\": false,\r\n\t\t\"BackupPowerBrightness\": 0,\r\n\t\t\"EnabledForcedOverrideBrightness\": false,\r\n\t\t\"ForcedOverrideBrightness\": 0,\r\n\t\t\"NightLight\": false,\r\n\t\t\"LuxMin\": 0,\r\n\t\t\"LuxMax\": 0,\r\n\t\t\"RemainingBurnIn\": 0,\r\n\t\t\"FixBaselineWattage\": 0,\r\n\t\t\"BallastNameplateWattage\": 0,\r\n\t\t\"Demand\": 0,\r\n\t\t\"DemandMin\": 0,\r\n\t\t\"Dimmable\": true,\r\n\t\t\"Restrike\": false,\r\n\t\t\"DisableDLHV\": false,\r\n\t\t\"DaliFadeTime\": 0,\r\n\t\t\"DaliFadeRate\": 0,\r\n\t\t\"DaliPowerOnBrightnessLevel\": 0,\r\n\t\t\"DaliSystemFailureBrightnessLevel\": 0,\r\n\t\t\"StartupBehaviorType\": \"NoChanges\",\r\n\t\t\"StartupBrightness\": 0,\r\n\t\t\"StartupDuration\": 0,\r\n\t\t\"PhaseCutDimmerLoadType\": \"LeadingTrailing\",\r\n\t\t\"PhaseCutDimmerModeType\": \"Trailing\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"PowerCurve\": [0.0,0.0,0.0],\r\n\t\t\"ColorTemperature\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Luminaire",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Luminaire"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST OrganizationalArea1 Controls Luminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea1ControlsLuminaire1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"Luminaire1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OrganizationalArea\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OrganizationalArea1 Id: \" + postman.getGlobalVariable(\"OrganizationalArea1Id\"), function () {});\r",
							"pm.test(\"Luminaire1 Id: \" + postman.getGlobalVariable(\"Luminaire1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from OrganizationalArea1 to Luminaire1: \" + postman.getGlobalVariable(\"OrganizationalArea1ControlsLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{Luminaire1Id}}\",\r\n    \"outNodeId\": \"{{OrganizationalArea1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains Keypad1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Keypad\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Keypad1Name is Programmable Controller []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Keypad1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsKeypad1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Keypad1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Keypad\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"Keypad1 Id: \" + postman.getGlobalVariable(\"Keypad1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to Keypad1: \" + postman.getGlobalVariable(\"Floor1ContainsKeypad1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Keypad\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"Keypad1Name is Programmable Controller []\",\r\n\t\t\"Caption\": \"Programmable Controller\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t  \"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Locked\": false\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Keypad",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Keypad"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Keypad1 Controls OrganizationalArea1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Keypad1ControlsOrganizationalArea1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"Keypad1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Keypad\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Keypad1 Id: \" + postman.getGlobalVariable(\"Keypad1Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea1 Id: \" + postman.getGlobalVariable(\"OrganizationalArea1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from Keypad1 to OrganizationalArea1: \" + postman.getGlobalVariable(\"Keypad1ControlsOrganizationalArea1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea1Id}}\",\r\n    \"outNodeId\": \"{{Keypad1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains OccupancySensor1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OccupancySensor\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OccupancySensor1Name is Occupancy Sensor []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OccupancySensor1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsOccupancySensor1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OccupancySensor1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OccupancySensor\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"OccupancySensor1 Id: \" + postman.getGlobalVariable(\"OccupancySensor1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to OccupancySensor1: \" + postman.getGlobalVariable(\"Floor1ContainsOccupancySensor1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"OccupancySensor\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"OccupancySensor1Name is Occupancy Sensor []\",\r\n\t\t\"Caption\": \"Occupancy Sensor\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"HasSwitch\": false,\r\n\t\t\"Disabled\": false\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OccupancySensor",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OccupancySensor"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST OccupancySensor1 Controls OrganizationalArea1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OccupancySensor1ControlsOrganizationalArea1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OccupancySensor1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OccupancySensor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OccupancySensor1 Id: \" + postman.getGlobalVariable(\"OccupancySensor1Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea1 Id: \" + postman.getGlobalVariable(\"OrganizationalArea1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from OccupancySensor1 to OrganizationalArea1: \" + postman.getGlobalVariable(\"OccupancySensor1ControlsOrganizationalArea1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea1Id}}\",\r\n    \"outNodeId\": \"{{OccupancySensor1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains OrganizationalArea2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OrganizationalArea2Name is Zone [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea2Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsOrganizationalArea2Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea2Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea2 Id: \" + postman.getGlobalVariable(\"OrganizationalArea2Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to OrganizationalArea2: \" + postman.getGlobalVariable(\"Floor1ContainsOrganizationalArea2Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"OrganizationalArea\",\r\n\t\t\"SyncState\": 2,\r\n\t\t\"Name\": \"OrganizationalArea2Name is Zone [0064-FFFF]\",\r\n\t\t\"Caption\": \"Zone\",\r\n\t\t\"ObjectType\": 245,\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"ZOrder\": 2,\r\n\t\t\"EnableScenes\": true,\r\n\t\t\"EnableControllable\": true,\r\n\t\t\"EnablePC\": true,\r\n\t\t\"BacNetIndex\": -1,\r\n\t\t\"ComponentType\": 10,\r\n\t\t\"PCS_ActivityOnly\": false,\r\n\t\t\"PreviousEcu\": \"13165559-9116-4921-A22B-3679BE039017\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"OcsAutoTurnOn\": true,\r\n\t\t\"TimeScheduleAutoTurnOn\": true,\r\n\t\t\"OccupancyToTurnOnSchedule\": true,\r\n\t\t\"OcsExtensionTime\": 60,\r\n\t\t\"OcsManualUserExtensionTime\": 1200,\r\n\t\t\"VacancyExtensionTime\": 60,\r\n\t\t\"TwoStageExtensionTime\": 1200,\r\n\t\t\"StandbyOffBehaviour\": \"StandbyBrightness\",\r\n\t\t\"ManualFadeToOff\": 60,\r\n\t\t\"OccupancyFadeToOff\": 1200,\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OrganizationalArea",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OrganizationalArea"
					]
				},
				"description": "Creates an OrganizationalArea contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains Luminaire2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Luminaire2Name is Fixture []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Luminaire2Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsLuminaire2Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Luminaire2Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"Luminaire2 Id: \" + postman.getGlobalVariable(\"Luminaire2Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to Luminaire2: \" + postman.getGlobalVariable(\"Floor1ContainsLuminaire2Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Luminaire\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"Luminaire2Name is Fixture []\",\r\n\t\t\"Caption\": \"Fixture\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Rotation\": 0,\r\n\t\t\"DayLightOrientation\": 0,\r\n\t\t\"DayLightDistance\": 0.0,\r\n\t\t\"DayLightOutOfRange\": false,\r\n\t\t\"DayLightBrightness\": 0,\r\n\t\t\"DayLightOverride\": 0,\r\n\t\t\"DayLightCompRemainder\": 0,\r\n\t\t\"MaxBrightness\": 0,\r\n\t\t\"MinBrightness\": 0,\r\n\t\t\"ComfortBrightness\": 0,\r\n\t\t\"TwoStageBrightness\": 0,\r\n\t\t\"MinComfortBrightness\": 0,\r\n\t\t\"ComfortBrightnessRelative\": false,\r\n\t\t\"BackupPowerBrightness\": 0,\r\n\t\t\"EnabledForcedOverrideBrightness\": false,\r\n\t\t\"ForcedOverrideBrightness\": 0,\r\n\t\t\"NightLight\": false,\r\n\t\t\"LuxMin\": 0,\r\n\t\t\"LuxMax\": 0,\r\n\t\t\"RemainingBurnIn\": 0,\r\n\t\t\"FixBaselineWattage\": 0,\r\n\t\t\"BallastNameplateWattage\": 0,\r\n\t\t\"Demand\": 0,\r\n\t\t\"DemandMin\": 0,\r\n\t\t\"Dimmable\": true,\r\n\t\t\"Restrike\": false,\r\n\t\t\"DisableDLHV\": false,\r\n\t\t\"DaliFadeTime\": 0,\r\n\t\t\"DaliFadeRate\": 0,\r\n\t\t\"DaliPowerOnBrightnessLevel\": 0,\r\n\t\t\"DaliSystemFailureBrightnessLevel\": 0,\r\n\t\t\"StartupBehaviorType\": \"NoChanges\",\r\n\t\t\"StartupBrightness\": 0,\r\n\t\t\"StartupDuration\": 0,\r\n\t\t\"PhaseCutDimmerLoadType\": \"LeadingTrailing\",\r\n\t\t\"PhaseCutDimmerModeType\": \"Trailing\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"PowerCurve\": [0.0,0.0,0.0],\r\n\t\t\"ColorTemperature\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Luminaire",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Luminaire"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST OrganizationalArea2 Controls Luminaire2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea2ControlsLuminaire2Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"Luminaire2Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea2Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OrganizationalArea\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OrganizationalArea2 Id: \" + postman.getGlobalVariable(\"OrganizationalArea2Id\"), function () {});\r",
							"pm.test(\"Luminaire2 Id: \" + postman.getGlobalVariable(\"Luminaire2Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from OrganizationalArea2 to Luminaire2: \" + postman.getGlobalVariable(\"OrganizationalArea2ControlsLuminaire2Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{Luminaire2Id}}\",\r\n    \"outNodeId\": \"{{OrganizationalArea2Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains Keypad2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Keypad\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Keypad2Name is Programmable Controller []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Keypad2Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsKeypad2Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Keypad2Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Keypad\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"Keypad2 Id: \" + postman.getGlobalVariable(\"Keypad2Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to Keypad2: \" + postman.getGlobalVariable(\"Floor1ContainsKeypad2Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Keypad\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"Keypad2Name is Programmable Controller []\",\r\n\t\t\"Caption\": \"Programmable Controller\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t  \"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Locked\": false\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Keypad",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Keypad"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Keypad2 Controls OrganizationalArea2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Keypad2ControlsOrganizationalArea2Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea2Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"Keypad2Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Keypad\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Keypad2 Id: \" + postman.getGlobalVariable(\"Keypad2Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea2 Id: \" + postman.getGlobalVariable(\"OrganizationalArea2Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from Keypad2 to OrganizationalArea2: \" + postman.getGlobalVariable(\"Keypad2ControlsOrganizationalArea2Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea2Id}}\",\r\n    \"outNodeId\": \"{{Keypad2Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains OrganizationalArea3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OrganizationalArea3Name is Zone [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea3Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsOrganizationalArea3Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea3Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea3 Id: \" + postman.getGlobalVariable(\"OrganizationalArea3Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to OrganizationalArea3: \" + postman.getGlobalVariable(\"Floor1ContainsOrganizationalArea3Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"OrganizationalArea\",\r\n\t\t\"SyncState\": 2,\r\n\t\t\"Name\": \"OrganizationalArea3Name is Zone [0064-FFFF]\",\r\n\t\t\"Caption\": \"Zone\",\r\n\t\t\"ObjectType\": 245,\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"ZOrder\": 2,\r\n\t\t\"EnableScenes\": true,\r\n\t\t\"EnableControllable\": true,\r\n\t\t\"EnablePC\": true,\r\n\t\t\"BacNetIndex\": -1,\r\n\t\t\"ComponentType\": 10,\r\n\t\t\"PCS_ActivityOnly\": false,\r\n\t\t\"PreviousEcu\": \"13165559-9116-4921-A22B-3679BE039017\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"OcsAutoTurnOn\": true,\r\n\t\t\"TimeScheduleAutoTurnOn\": true,\r\n\t\t\"OccupancyToTurnOnSchedule\": true,\r\n\t\t\"OcsExtensionTime\": 60,\r\n\t\t\"OcsManualUserExtensionTime\": 1200,\r\n\t\t\"VacancyExtensionTime\": 60,\r\n\t\t\"TwoStageExtensionTime\": 1200,\r\n\t\t\"StandbyOffBehaviour\": \"StandbyBrightness\",\r\n\t\t\"ManualFadeToOff\": 60,\r\n\t\t\"OccupancyFadeToOff\": 1200,\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor1\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OrganizationalArea",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OrganizationalArea"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST OrganizationalArea2 Controls OrganizationalArea3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea2ControlsOrganizationalArea3Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea2Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea3Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OrganizationalArea\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OrganizationalArea2 Id: \" + postman.getGlobalVariable(\"OrganizationalArea2Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea3 Id: \" + postman.getGlobalVariable(\"OrganizationalArea3Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from OrganizationalArea2 to OrganizationalArea3: \" + postman.getGlobalVariable(\"OrganizationalArea2ControlsOrganizationalArea3Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea2Id}}\",\r\n    \"outNodeId\": \"{{OrganizationalArea3Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains Luminaire3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Luminaire3Name is Fixture []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Luminaire3Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsLuminaire3Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Luminaire3Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"Luminaire3 Id: \" + postman.getGlobalVariable(\"Luminaire3Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to Luminaire3: \" + postman.getGlobalVariable(\"Floor1ContainsLuminaire3Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Luminaire\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"Luminaire3Name is Fixture []\",\r\n\t\t\"Caption\": \"Fixture\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Rotation\": 0,\r\n\t\t\"DayLightOrientation\": 0,\r\n\t\t\"DayLightDistance\": 0.0,\r\n\t\t\"DayLightOutOfRange\": false,\r\n\t\t\"DayLightBrightness\": 0,\r\n\t\t\"DayLightOverride\": 0,\r\n\t\t\"DayLightCompRemainder\": 0,\r\n\t\t\"MaxBrightness\": 0,\r\n\t\t\"MinBrightness\": 0,\r\n\t\t\"ComfortBrightness\": 0,\r\n\t\t\"TwoStageBrightness\": 0,\r\n\t\t\"MinComfortBrightness\": 0,\r\n\t\t\"ComfortBrightnessRelative\": false,\r\n\t\t\"BackupPowerBrightness\": 0,\r\n\t\t\"EnabledForcedOverrideBrightness\": false,\r\n\t\t\"ForcedOverrideBrightness\": 0,\r\n\t\t\"NightLight\": false,\r\n\t\t\"LuxMin\": 0,\r\n\t\t\"LuxMax\": 0,\r\n\t\t\"RemainingBurnIn\": 0,\r\n\t\t\"FixBaselineWattage\": 0,\r\n\t\t\"BallastNameplateWattage\": 0,\r\n\t\t\"Demand\": 0,\r\n\t\t\"DemandMin\": 0,\r\n\t\t\"Dimmable\": true,\r\n\t\t\"Restrike\": false,\r\n\t\t\"DisableDLHV\": false,\r\n\t\t\"DaliFadeTime\": 0,\r\n\t\t\"DaliFadeRate\": 0,\r\n\t\t\"DaliPowerOnBrightnessLevel\": 0,\r\n\t\t\"DaliSystemFailureBrightnessLevel\": 0,\r\n\t\t\"StartupBehaviorType\": \"NoChanges\",\r\n\t\t\"StartupBrightness\": 0,\r\n\t\t\"StartupDuration\": 0,\r\n\t\t\"PhaseCutDimmerLoadType\": \"LeadingTrailing\",\r\n\t\t\"PhaseCutDimmerModeType\": \"Trailing\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"PowerCurve\": [0.0,0.0,0.0],\r\n\t\t\"ColorTemperature\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Luminaire",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Luminaire"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST OrganizationalArea3 Controls Luminaire3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea3ControlsLuminaire3Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"Luminaire3Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea3Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OrganizationalArea\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OrganizationalArea3 Id: \" + postman.getGlobalVariable(\"OrganizationalArea3Id\"), function () {});\r",
							"pm.test(\"Luminaire3 Id: \" + postman.getGlobalVariable(\"Luminaire3Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from OrganizationalArea3 to Luminaire3: \" + postman.getGlobalVariable(\"OrganizationalArea3ControlsLuminaire3Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{Luminaire3Id}}\",\r\n    \"outNodeId\": \"{{OrganizationalArea3Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains Keypad3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Keypad\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Keypad3Name is Programmable Controller []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Keypad3Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsKeypad3Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Keypad3Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Keypad\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"Keypad3 Id: \" + postman.getGlobalVariable(\"Keypad3Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to Keypad3: \" + postman.getGlobalVariable(\"Floor1ContainsKeypad3Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Keypad\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"Keypad3Name is Programmable Controller []\",\r\n\t\t\"Caption\": \"Programmable Controller\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t  \"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Locked\": false\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Keypad",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Keypad"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Keypad3 Controls OrganizationalArea3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Keypad3ControlsOrganizationalArea3Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea3Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"Keypad3Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Keypad\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Keypad3 Id: \" + postman.getGlobalVariable(\"Keypad3Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea3 Id: \" + postman.getGlobalVariable(\"OrganizationalArea3Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from Keypad3 to OrganizationalArea3: \" + postman.getGlobalVariable(\"Keypad3ControlsOrganizationalArea3Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea3Id}}\",\r\n    \"outNodeId\": \"{{Keypad3Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains OccupancySensor2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OccupancySensor\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OccupancySensor2Name is Occupancy Sensor []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OccupancySensor2Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsOccupancySensor2Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OccupancySensor2Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OccupancySensor\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"OccupancySensor2 Id: \" + postman.getGlobalVariable(\"OccupancySensor2Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to OccupancySensor2: \" + postman.getGlobalVariable(\"Floor1ContainsOccupancySensor2Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"OccupancySensor\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"OccupancySensor2Name is Occupancy Sensor []\",\r\n\t\t\"Caption\": \"Occupancy Sensor\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"HasSwitch\": false,\r\n\t\t\"Disabled\": false\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OccupancySensor",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OccupancySensor"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST OccupancySensor2 Controls OrganizationalArea3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OccupancySensor2ControlsOrganizationalArea3Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea3Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OccupancySensor2Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OccupancySensor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OccupancySensor2 Id: \" + postman.getGlobalVariable(\"OccupancySensor2Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea3 Id: \" + postman.getGlobalVariable(\"OrganizationalArea3Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from OccupancySensor2 to OrganizationalArea3: \" + postman.getGlobalVariable(\"OccupancySensor2ControlsOrganizationalArea3Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea3Id}}\",\r\n    \"outNodeId\": \"{{OccupancySensor2Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST Building1 Contains Floor2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Floor\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Floor2Name\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor2Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Building1ContainsFloor2Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Floor2Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Building1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Floor\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Building\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Building1 Id: \" + postman.getGlobalVariable(\"Building1Id\"), function () {});\r",
							"pm.test(\"Floor2 Id: \" + postman.getGlobalVariable(\"Floor2Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Building1 to Floor2: \" + postman.getGlobalVariable(\"Building1ContainsFloor2Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Floor\",\r\n\t\t\"name\": \"Floor2Name\",\r\n\t\t\"Caption\": \"New Floor\",\r\n\t\t\"ChangeID\": \"e792aff7-eae6-4a22-8fb7-eace30c58b98\",\r\n\t\t\"FloorLevel\": 0,\r\n\t\t\"DisplayMode\": \"ThreeD\",\r\n\t\t\"VisibleLayers\": [ 0, 1, 4, 6 ],\r\n\t\t\"ColorType\": \"FullColor\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Building\",\r\n\t\t\"outNodeId\": \"{{Building1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Floor",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Floor"
					]
				},
				"description": "Creates a Floor contains by the Building."
			},
			"response": []
		},
		{
			"name": "POST Floor2 Contains OrganizationalArea4",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OrganizationalArea4Name is Zone [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea4Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor2ContainsOrganizationalArea4Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea4Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor2Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor2 Id: \" + postman.getGlobalVariable(\"Floor2Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea4 Id: \" + postman.getGlobalVariable(\"OrganizationalArea4Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor2 to OrganizationalArea4: \" + postman.getGlobalVariable(\"Floor2ContainsOrganizationalArea4Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"OrganizationalArea\",\r\n\t\t\"SyncState\": 2,\r\n\t\t\"Name\": \"OrganizationalArea4Name is Zone [0064-FFFF]\",\r\n\t\t\"Caption\": \"Zone\",\r\n\t\t\"ObjectType\": 245,\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"ZOrder\": 2,\r\n\t\t\"EnableScenes\": true,\r\n\t\t\"EnableControllable\": true,\r\n\t\t\"EnablePC\": true,\r\n\t\t\"BacNetIndex\": -1,\r\n\t\t\"ComponentType\": 10,\r\n\t\t\"PCS_ActivityOnly\": false,\r\n\t\t\"PreviousEcu\": \"13165559-9116-4921-A22B-3679BE039017\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"OcsAutoTurnOn\": true,\r\n\t\t\"TimeScheduleAutoTurnOn\": true,\r\n\t\t\"OccupancyToTurnOnSchedule\": true,\r\n\t\t\"OcsExtensionTime\": 60,\r\n\t\t\"OcsManualUserExtensionTime\": 1200,\r\n\t\t\"VacancyExtensionTime\": 60,\r\n\t\t\"TwoStageExtensionTime\": 1200,\r\n\t\t\"StandbyOffBehaviour\": \"StandbyBrightness\",\r\n\t\t\"ManualFadeToOff\": 60,\r\n\t\t\"OccupancyFadeToOff\": 1200,\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor2Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OrganizationalArea",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OrganizationalArea"
					]
				},
				"description": "Creates an OrganizationalArea contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor2 Contains Luminaire4",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Luminaire4Name is Fixture []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Luminaire4Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor2ContainsLuminaire4Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Luminaire4Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor2Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor2 Id: \" + postman.getGlobalVariable(\"Floor2Id\"), function () {});\r",
							"pm.test(\"Luminaire4 Id: \" + postman.getGlobalVariable(\"Luminaire4Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor2 to Luminaire4: \" + postman.getGlobalVariable(\"Floor2ContainsLuminaire4Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Luminaire\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"Luminaire4Name is Fixture []\",\r\n\t\t\"Caption\": \"Fixture\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Rotation\": 0,\r\n\t\t\"DayLightOrientation\": 0,\r\n\t\t\"DayLightDistance\": 0.0,\r\n\t\t\"DayLightOutOfRange\": false,\r\n\t\t\"DayLightBrightness\": 0,\r\n\t\t\"DayLightOverride\": 0,\r\n\t\t\"DayLightCompRemainder\": 0,\r\n\t\t\"MaxBrightness\": 0,\r\n\t\t\"MinBrightness\": 0,\r\n\t\t\"ComfortBrightness\": 0,\r\n\t\t\"TwoStageBrightness\": 0,\r\n\t\t\"MinComfortBrightness\": 0,\r\n\t\t\"ComfortBrightnessRelative\": false,\r\n\t\t\"BackupPowerBrightness\": 0,\r\n\t\t\"EnabledForcedOverrideBrightness\": false,\r\n\t\t\"ForcedOverrideBrightness\": 0,\r\n\t\t\"NightLight\": false,\r\n\t\t\"LuxMin\": 0,\r\n\t\t\"LuxMax\": 0,\r\n\t\t\"RemainingBurnIn\": 0,\r\n\t\t\"FixBaselineWattage\": 0,\r\n\t\t\"BallastNameplateWattage\": 0,\r\n\t\t\"Demand\": 0,\r\n\t\t\"DemandMin\": 0,\r\n\t\t\"Dimmable\": true,\r\n\t\t\"Restrike\": false,\r\n\t\t\"DisableDLHV\": false,\r\n\t\t\"DaliFadeTime\": 0,\r\n\t\t\"DaliFadeRate\": 0,\r\n\t\t\"DaliPowerOnBrightnessLevel\": 0,\r\n\t\t\"DaliSystemFailureBrightnessLevel\": 0,\r\n\t\t\"StartupBehaviorType\": \"NoChanges\",\r\n\t\t\"StartupBrightness\": 0,\r\n\t\t\"StartupDuration\": 0,\r\n\t\t\"PhaseCutDimmerLoadType\": \"LeadingTrailing\",\r\n\t\t\"PhaseCutDimmerModeType\": \"Trailing\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"PowerCurve\": [0.0,0.0,0.0],\r\n\t\t\"ColorTemperature\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor2Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Luminaire",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Luminaire"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST OrganizationalArea4 Controls Luminaire4",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea4ControlsLuminaire4Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"Luminaire4Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea4Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OrganizationalArea\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OrganizationalArea4 Id: \" + postman.getGlobalVariable(\"OrganizationalArea4Id\"), function () {});\r",
							"pm.test(\"Luminaire4 Id: \" + postman.getGlobalVariable(\"Luminaire4Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from OrganizationalArea4 to Luminaire4: \" + postman.getGlobalVariable(\"OrganizationalArea4ControlsLuminaire4Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{Luminaire4Id}}\",\r\n    \"outNodeId\": \"{{OrganizationalArea4Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST Floor2 Contains Keypad4",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Keypad\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Keypad4Name is Programmable Controller []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Keypad4Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor2ContainsKeypad4Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Keypad4Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor2Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Keypad\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor2 Id: \" + postman.getGlobalVariable(\"Floor2Id\"), function () {});\r",
							"pm.test(\"Keypad4 Id: \" + postman.getGlobalVariable(\"Keypad4Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor2 to Keypad4: \" + postman.getGlobalVariable(\"Floor2ContainsKeypad4Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Keypad\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"Keypad4Name is Programmable Controller []\",\r\n\t\t\"Caption\": \"Programmable Controller\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t  \"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Locked\": false\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor2Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Keypad",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Keypad"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Keypad4 Controls OrganizationalArea4",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Keypad4ControlsOrganizationalArea4Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea4Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"Keypad4Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Keypad\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Keypad4 Id: \" + postman.getGlobalVariable(\"Keypad4Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea4 Id: \" + postman.getGlobalVariable(\"OrganizationalArea4Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from Keypad4 to OrganizationalArea4: \" + postman.getGlobalVariable(\"Keypad4ControlsOrganizationalArea4Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea4Id}}\",\r\n    \"outNodeId\": \"{{Keypad4Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST Floor2 Contains OccupancySensor3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OccupancySensor\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OccupancySensor3Name is Occupancy Sensor []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OccupancySensor3Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor2ContainsOccupancySensor3Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OccupancySensor3Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor2Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OccupancySensor\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor2 Id: \" + postman.getGlobalVariable(\"Floor2Id\"), function () {});\r",
							"pm.test(\"OccupancySensor3 Id: \" + postman.getGlobalVariable(\"OccupancySensor3Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor2 to OccupancySensor3: \" + postman.getGlobalVariable(\"Floor2ContainsOccupancySensor3Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"OccupancySensor\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"OccupancySensor3Name is Occupancy Sensor []\",\r\n\t\t\"Caption\": \"Occupancy Sensor\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"HasSwitch\": false,\r\n\t\t\"Disabled\": false\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor2Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OccupancySensor",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OccupancySensor"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST OccupancySensor3 Controls OrganizationalArea4",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OccupancySensor3ControlsOrganizationalArea4Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea4Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OccupancySensor3Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OccupancySensor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OccupancySensor3 Id: \" + postman.getGlobalVariable(\"OccupancySensor3Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea4 Id: \" + postman.getGlobalVariable(\"OrganizationalArea4Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from OccupancySensor3 to OrganizationalArea4: \" + postman.getGlobalVariable(\"OccupancySensor3ControlsOrganizationalArea4Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea4Id}}\",\r\n    \"outNodeId\": \"{{OccupancySensor3Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST Floor2 Contains PartitionWall1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PartitionWall\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"PartitionWall1Name is Partion Wall []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PartitionWall1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor2ContainsPartitionWall1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"PartitionWall1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor2Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PartitionWall\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor2 Id: \" + postman.getGlobalVariable(\"Floor2Id\"), function () {});\r",
							"pm.test(\"PartitionWall1 Id: \" + postman.getGlobalVariable(\"PartitionWall1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor2 to PartitionWall1: \" + postman.getGlobalVariable(\"Floor2ContainsPartitionWall1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"PartitionWall\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"PartitionWall1Name is Partion Wall []\",\r\n\t\t\"Caption\": \"Partition Wall\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Rotation\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor2Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PartitionWall",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PartitionWall"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor2 Contains OrganizationalArea5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OrganizationalArea5Name is Zone [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea5Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor2ContainsOrganizationalArea5Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea5Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor2Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor2 Id: \" + postman.getGlobalVariable(\"Floor2Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea5 Id: \" + postman.getGlobalVariable(\"OrganizationalArea5Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor2 to OrganizationalArea5: \" + postman.getGlobalVariable(\"Floor2ContainsOrganizationalArea5Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"OrganizationalArea\",\r\n\t\t\"SyncState\": 2,\r\n\t\t\"Name\": \"OrganizationalArea5Name is Zone [0064-FFFF]\",\r\n\t\t\"Caption\": \"Zone\",\r\n\t\t\"ObjectType\": 245,\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"ZOrder\": 2,\r\n\t\t\"EnableScenes\": true,\r\n\t\t\"EnableControllable\": true,\r\n\t\t\"EnablePC\": true,\r\n\t\t\"BacNetIndex\": -1,\r\n\t\t\"ComponentType\": 10,\r\n\t\t\"PCS_ActivityOnly\": false,\r\n\t\t\"PreviousEcu\": \"13165559-9116-4921-A22B-3679BE039017\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"OcsAutoTurnOn\": true,\r\n\t\t\"TimeScheduleAutoTurnOn\": true,\r\n\t\t\"OccupancyToTurnOnSchedule\": true,\r\n\t\t\"OcsExtensionTime\": 60,\r\n\t\t\"OcsManualUserExtensionTime\": 1200,\r\n\t\t\"VacancyExtensionTime\": 60,\r\n\t\t\"TwoStageExtensionTime\": 1200,\r\n\t\t\"StandbyOffBehaviour\": \"StandbyBrightness\",\r\n\t\t\"ManualFadeToOff\": 60,\r\n\t\t\"OccupancyFadeToOff\": 1200,\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor2Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OrganizationalArea",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OrganizationalArea"
					]
				},
				"description": "Creates an OrganizationalArea contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST PartitionWall1 Controls OrganizationalArea4",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PartitionWall1ControlsOrganizationalArea4Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea4Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PartitionWall1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PartitionWall\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"PartitionWall1 Id: \" + postman.getGlobalVariable(\"PartitionWall1Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea4 Id: \" + postman.getGlobalVariable(\"OrganizationalArea4Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from PartitionWall1 to OrganizationalArea4: \" + postman.getGlobalVariable(\"PartitionWall1ControlsOrganizationalArea4Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea4Id}}\",\r\n    \"outNodeId\": \"{{PartitionWall1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST PartitionWall1 Controls OrganizationalArea5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PartitionWall1ControlsOrganizationalArea5Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea5Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PartitionWall1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PartitionWall\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"PartitionWall1 Id: \" + postman.getGlobalVariable(\"PartitionWall1Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea5 Id: \" + postman.getGlobalVariable(\"OrganizationalArea5Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from PartitionWall1 to OrganizationalArea5: \" + postman.getGlobalVariable(\"PartitionWall1ControlsOrganizationalArea5Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea5Id}}\",\r\n    \"outNodeId\": \"{{PartitionWall1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST Floor2 Contains PhotoSensor1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PhotoSensor\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"PhotoSensor1Name is Photo Sensor []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PhotoSensor1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor2ContainsPhotoSensor1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"PhotoSensor1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor2Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PhotoSensor\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor2 Id: \" + postman.getGlobalVariable(\"Floor2Id\"), function () {});\r",
							"pm.test(\"PhotoSensor1 Id: \" + postman.getGlobalVariable(\"PhotoSensor1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor2 to PhotoSensor1: \" + postman.getGlobalVariable(\"Floor2ContainsPhotoSensor1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"PhotoSensor\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"PhotoSensor1Name is Photo Sensor []\",\r\n\t\t\"Caption\": \"Photo Sensor\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"DayLightOrientation\": 0,\r\n\t\t\"DayLightDistance\": 0.0,\r\n\t\t\"DayLightOutOfRange\": false,\r\n\t\t\"DayLightRange\": 0.0,\r\n\t\t\"DayLightValues\": [\r\n\t\t\t{\r\n\t\t\t  \"M\": 0.0,\r\n\t\t\t  \"L\": 0.0\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"M\": 0.0,\r\n\t\t\t  \"L\": 0.0\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"M\": 0.0,\r\n\t\t\t  \"L\": 0.0\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"PhotoSensorType\": \"EnceliumPIRSensor\",\r\n\t\t\"Disabled\": false\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor2Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PhotoSensor",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PhotoSensor"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor2 Contains Luminaire5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Luminaire5Name is Fixture []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Luminaire5Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor2ContainsLuminaire5Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Luminaire5Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor2Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor2 Id: \" + postman.getGlobalVariable(\"Floor2Id\"), function () {});\r",
							"pm.test(\"Luminaire5 Id: \" + postman.getGlobalVariable(\"Luminaire5Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor2 to Luminaire5: \" + postman.getGlobalVariable(\"Floor2ContainsLuminaire5Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Luminaire\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"Luminaire5Name is Fixture []\",\r\n\t\t\"Caption\": \"Fixture\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Rotation\": 0,\r\n\t\t\"DayLightOrientation\": 0,\r\n\t\t\"DayLightDistance\": 0.0,\r\n\t\t\"DayLightOutOfRange\": false,\r\n\t\t\"DayLightBrightness\": 0,\r\n\t\t\"DayLightOverride\": 0,\r\n\t\t\"DayLightCompRemainder\": 0,\r\n\t\t\"MaxBrightness\": 0,\r\n\t\t\"MinBrightness\": 0,\r\n\t\t\"ComfortBrightness\": 0,\r\n\t\t\"TwoStageBrightness\": 0,\r\n\t\t\"MinComfortBrightness\": 0,\r\n\t\t\"ComfortBrightnessRelative\": false,\r\n\t\t\"BackupPowerBrightness\": 0,\r\n\t\t\"EnabledForcedOverrideBrightness\": false,\r\n\t\t\"ForcedOverrideBrightness\": 0,\r\n\t\t\"NightLight\": false,\r\n\t\t\"LuxMin\": 0,\r\n\t\t\"LuxMax\": 0,\r\n\t\t\"RemainingBurnIn\": 0,\r\n\t\t\"FixBaselineWattage\": 0,\r\n\t\t\"BallastNameplateWattage\": 0,\r\n\t\t\"Demand\": 0,\r\n\t\t\"DemandMin\": 0,\r\n\t\t\"Dimmable\": true,\r\n\t\t\"Restrike\": false,\r\n\t\t\"DisableDLHV\": false,\r\n\t\t\"DaliFadeTime\": 0,\r\n\t\t\"DaliFadeRate\": 0,\r\n\t\t\"DaliPowerOnBrightnessLevel\": 0,\r\n\t\t\"DaliSystemFailureBrightnessLevel\": 0,\r\n\t\t\"StartupBehaviorType\": \"NoChanges\",\r\n\t\t\"StartupBrightness\": 0,\r\n\t\t\"StartupDuration\": 0,\r\n\t\t\"PhaseCutDimmerLoadType\": \"LeadingTrailing\",\r\n\t\t\"PhaseCutDimmerModeType\": \"Trailing\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"PowerCurve\": [0.0,0.0,0.0],\r\n\t\t\"ColorTemperature\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor2Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Luminaire",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Luminaire"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST PhotoSensor1 Controls Luminaire5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PhotoSensor1ControlsLuminaire5Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"Luminaire5Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PhotoSensor1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PhotoSensor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"PhotoSensor1 Id: \" + postman.getGlobalVariable(\"PhotoSensor1Id\"), function () {});\r",
							"pm.test(\"Luminaire5 Id: \" + postman.getGlobalVariable(\"Luminaire5Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from PhotoSensor1 to Luminaire5: \" + postman.getGlobalVariable(\"PhotoSensor1ControlsLuminaire5Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{Luminaire5Id}}\",\r\n    \"outNodeId\": \"{{PhotoSensor1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST OrganizationalArea5 Controls Luminaire5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea5ControlsLuminaire5Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"Luminaire5Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea5Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OrganizationalArea\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OrganizationalArea5 Id: \" + postman.getGlobalVariable(\"OrganizationalArea5Id\"), function () {});\r",
							"pm.test(\"Luminaire5 Id: \" + postman.getGlobalVariable(\"Luminaire5Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from OrganizationalArea5 to Luminaire5: \" + postman.getGlobalVariable(\"OrganizationalArea5ControlsLuminaire5Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{Luminaire5Id}}\",\r\n    \"outNodeId\": \"{{OrganizationalArea5Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST Floor2 Contains Keypad5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Keypad\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Keypad5Name is Programmable Controller []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Keypad5Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor2ContainsKeypad5Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Keypad5Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor2Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Keypad\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor2 Id: \" + postman.getGlobalVariable(\"Floor2Id\"), function () {});\r",
							"pm.test(\"Keypad5 Id: \" + postman.getGlobalVariable(\"Keypad5Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor2 to Keypad5: \" + postman.getGlobalVariable(\"Floor2ContainsKeypad5Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Keypad\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"Keypad5Name is Programmable Controller []\",\r\n\t\t\"Caption\": \"Programmable Controller\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t  \"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Locked\": false\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor2Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Keypad",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Keypad"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Keypad5 Controls OrganizationalArea5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Keypad5ControlsOrganizationalArea5Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea5Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"Keypad5Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Keypad\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Keypad5 Id: \" + postman.getGlobalVariable(\"Keypad5Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea5 Id: \" + postman.getGlobalVariable(\"OrganizationalArea5Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from Keypad5 to OrganizationalArea5: \" + postman.getGlobalVariable(\"Keypad5ControlsOrganizationalArea5Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea5Id}}\",\r\n    \"outNodeId\": \"{{Keypad5Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST Floor2 Contains OccupancySensor4",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OccupancySensor\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OccupancySensor4Name is Occupancy Sensor []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OccupancySensor4Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor2ContainsOccupancySensor4Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OccupancySensor4Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor2Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OccupancySensor\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor2 Id: \" + postman.getGlobalVariable(\"Floor2Id\"), function () {});\r",
							"pm.test(\"OccupancySensor4 Id: \" + postman.getGlobalVariable(\"OccupancySensor4Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor2 to OccupancySensor4: \" + postman.getGlobalVariable(\"Floor2ContainsOccupancySensor4Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"OccupancySensor\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"OccupancySensor4Name is Occupancy Sensor []\",\r\n\t\t\"Caption\": \"Occupancy Sensor\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"HasSwitch\": false,\r\n\t\t\"Disabled\": false\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor2Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OccupancySensor",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OccupancySensor"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST OccupancySensor4 Controls OrganizationalArea5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OccupancySensor4ControlsOrganizationalArea5Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea5Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OccupancySensor4Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OccupancySensor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OccupancySensor4 Id: \" + postman.getGlobalVariable(\"OccupancySensor4Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea5 Id: \" + postman.getGlobalVariable(\"OrganizationalArea5Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from OccupancySensor4 to OrganizationalArea5: \" + postman.getGlobalVariable(\"OccupancySensor4ControlsOrganizationalArea5Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea5Id}}\",\r\n    \"outNodeId\": \"{{OccupancySensor4Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains Building2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Building\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Building2Name is Zone [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Building2Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsBuilding2Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Building2Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Building\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"Building2 Id: \" + postman.getGlobalVariable(\"Building2Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to Building2: \" + postman.getGlobalVariable(\"EncSystemContainsBuilding2Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Building\",\r\n\t\t\"SyncState\": 2,\r\n\t\t\"Name\": \"Building2Name is Zone [0064-FFFF]\",\r\n\t\t\"Caption\": \"Zone\",\r\n\t\t\"ObjectType\": 245,\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"ZOrder\": 2,\r\n\t\t\"EnableScenes\": true,\r\n\t\t\"EnableControllable\": true,\r\n\t\t\"EnablePC\": true,\r\n\t\t\"BacNetIndex\": -1,\r\n\t\t\"ComponentType\": 10,\r\n\t\t\"PCS_ActivityOnly\": false,\r\n\t\t\"PreviousEcu\": \"13165559-9116-4921-A22B-3679BE039017\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"OcsAutoTurnOn\": true,\r\n\t\t\"TimeScheduleAutoTurnOn\": true,\r\n\t\t\"OccupancyToTurnOnSchedule\": true,\r\n\t\t\"OcsExtensionTime\": 60,\r\n\t\t\"OcsManualUserExtensionTime\": 1200,\r\n\t\t\"VacancyExtensionTime\": 60,\r\n\t\t\"TwoStageExtensionTime\": 1200,\r\n\t\t\"StandbyOffBehaviour\": \"StandbyBrightness\",\r\n\t\t\"ManualFadeToOff\": 60,\r\n\t\t\"OccupancyFadeToOff\": 1200,\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Building",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Building"
					]
				},
				"description": "Creates a Building contains by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST Building2 Contains Floor3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Floor\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Floor3Name\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor3Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Building2ContainsFloor3Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Floor3Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Building2Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Floor\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Building\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Building2 Id: \" + postman.getGlobalVariable(\"Building2Id\"), function () {});\r",
							"pm.test(\"Floor3 Id: \" + postman.getGlobalVariable(\"Floor3Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Building2 to Floor3: \" + postman.getGlobalVariable(\"Building2ContainsFloor3Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Floor\",\r\n\t\t\"name\": \"Floor3Name\",\r\n\t\t\"Caption\": \"New Floor\",\r\n\t\t\"ChangeID\": \"e792aff7-eae6-4a22-8fb7-eace30c58b98\",\r\n\t\t\"FloorLevel\": 0,\r\n\t\t\"DisplayMode\": \"ThreeD\",\r\n\t\t\"VisibleLayers\": [ 0, 1, 4, 6 ],\r\n\t\t\"ColorType\": \"FullColor\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Building\",\r\n\t\t\"outNodeId\": \"{{Building2Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Floor",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Floor"
					]
				},
				"description": "Creates a Floor contains by the Building."
			},
			"response": []
		},
		{
			"name": "POST Floor3 Contains OrganizationalArea6",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OrganizationalArea6Name is Zone [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea6Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor3ContainsOrganizationalArea6Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea6Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor3Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor3 Id: \" + postman.getGlobalVariable(\"Floor3Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea6 Id: \" + postman.getGlobalVariable(\"OrganizationalArea6Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor3 to OrganizationalArea6: \" + postman.getGlobalVariable(\"Floor3ContainsOrganizationalArea6Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"OrganizationalArea\",\r\n\t\t\"SyncState\": 2,\r\n\t\t\"Name\": \"OrganizationalArea6Name is Zone [0064-FFFF]\",\r\n\t\t\"Caption\": \"Zone\",\r\n\t\t\"ObjectType\": 245,\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"ZOrder\": 2,\r\n\t\t\"EnableScenes\": true,\r\n\t\t\"EnableControllable\": true,\r\n\t\t\"EnablePC\": true,\r\n\t\t\"BacNetIndex\": -1,\r\n\t\t\"ComponentType\": 10,\r\n\t\t\"PCS_ActivityOnly\": false,\r\n\t\t\"PreviousEcu\": \"13165559-9116-4921-A22B-3679BE039017\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"OcsAutoTurnOn\": true,\r\n\t\t\"TimeScheduleAutoTurnOn\": true,\r\n\t\t\"OccupancyToTurnOnSchedule\": true,\r\n\t\t\"OcsExtensionTime\": 60,\r\n\t\t\"OcsManualUserExtensionTime\": 1200,\r\n\t\t\"VacancyExtensionTime\": 60,\r\n\t\t\"TwoStageExtensionTime\": 1200,\r\n\t\t\"StandbyOffBehaviour\": \"StandbyBrightness\",\r\n\t\t\"ManualFadeToOff\": 60,\r\n\t\t\"OccupancyFadeToOff\": 1200,\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor3Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OrganizationalArea",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OrganizationalArea"
					]
				},
				"description": "Creates an OrganizationalArea contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor3 Contains WalcLuminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"WalcLuminaire\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"WalcLuminaire1Name is Fixture []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"WalcLuminaire1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor3ContainsWalcLuminaire1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"WalcLuminaire1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor3Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"WalcLuminaire\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"Floor3Id\"), function () {});\r",
							"pm.test(\"WalcLuminaire1 Id: \" + postman.getGlobalVariable(\"WalcLuminaire1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor3 to WalcLuminaire1: \" + postman.getGlobalVariable(\"Floor3ContainsWalcLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"WalcLuminaire\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"WalcLuminaire1Name is Fixture []\",\r\n\t\t\"Caption\": \"Fixture\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Rotation\": 0,\r\n\t\t\"DayLightOrientation\": 0,\r\n\t\t\"DayLightDistance\": 0.0,\r\n\t\t\"DayLightOutOfRange\": false,\r\n\t\t\"DayLightBrightness\": 0,\r\n\t\t\"DayLightOverride\": 0,\r\n\t\t\"DayLightCompRemainder\": 0,\r\n\t\t\"MaxBrightness\": 0,\r\n\t\t\"MinBrightness\": 0,\r\n\t\t\"ComfortBrightness\": 0,\r\n\t\t\"TwoStageBrightness\": 0,\r\n\t\t\"MinComfortBrightness\": 0,\r\n\t\t\"ComfortBrightnessRelative\": false,\r\n\t\t\"BackupPowerBrightness\": 0,\r\n\t\t\"EnabledForcedOverrideBrightness\": false,\r\n\t\t\"ForcedOverrideBrightness\": 0,\r\n\t\t\"NightLight\": false,\r\n\t\t\"LuxMin\": 0,\r\n\t\t\"LuxMax\": 0,\r\n\t\t\"RemainingBurnIn\": 0,\r\n\t\t\"FixBaselineWattage\": 0,\r\n\t\t\"BallastNameplateWattage\": 0,\r\n\t\t\"Demand\": 0,\r\n\t\t\"DemandMin\": 0,\r\n\t\t\"Dimmable\": true,\r\n\t\t\"Restrike\": false,\r\n\t\t\"DisableDLHV\": false,\r\n\t\t\"DaliFadeTime\": 0,\r\n\t\t\"DaliFadeRate\": 0,\r\n\t\t\"DaliPowerOnBrightnessLevel\": 0,\r\n\t\t\"DaliSystemFailureBrightnessLevel\": 0,\r\n\t\t\"StartupBehaviorType\": \"NoChanges\",\r\n\t\t\"StartupBrightness\": 0,\r\n\t\t\"StartupDuration\": 0,\r\n\t\t\"PhaseCutDimmerLoadType\": \"LeadingTrailing\",\r\n\t\t\"PhaseCutDimmerModeType\": \"LeadingTrailing\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"PowerCurve\": [0.0,0.0,0.0],\r\n\t\t\"ColorTemperature\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor3\",\r\n\t\t\"outNodeId\": \"{{Floor3Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/WalcLuminaire",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"WalcLuminaire"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST OrganizationalArea6 Controls WalcLuminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea6ControlsWalcLuminaire1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"WalcLuminaire1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea6Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"WalcLuminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OrganizationalArea\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OrganizationalArea6 Id: \" + postman.getGlobalVariable(\"OrganizationalArea6Id\"), function () {});\r",
							"pm.test(\"WalcLuminaire1 Id: \" + postman.getGlobalVariable(\"WalcLuminaire1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from OrganizationalArea6 to WalcLuminaire1: \" + postman.getGlobalVariable(\"OrganizationalArea6ControlsWalcLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{WalcLuminaire1Id}}\",\r\n    \"outNodeId\": \"{{OrganizationalArea6Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST Floor3 Contains OccupancySensor5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OccupancySensor\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OccupancySensor5Name is Occupancy Sensor []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OccupancySensor5Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor3ContainsOccupancySensor5Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OccupancySensor5Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor3Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OccupancySensor\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor3 Id: \" + postman.getGlobalVariable(\"Floor3Id\"), function () {});\r",
							"pm.test(\"OccupancySensor5 Id: \" + postman.getGlobalVariable(\"OccupancySensor5Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor3 to OccupancySensor5: \" + postman.getGlobalVariable(\"Floor3ContainsOccupancySensor5Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"OccupancySensor\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"OccupancySensor5Name is Occupancy Sensor []\",\r\n\t\t\"Caption\": \"Occupancy Sensor\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"HasSwitch\": false,\r\n\t\t\"Disabled\": false\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor3Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OccupancySensor",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OccupancySensor"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST OccupancySensor5 Controls OrganizationalArea6",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OccupancySensor5ControlsOrganizationalArea6Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea6Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OccupancySensor5Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OccupancySensor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OccupancySensor5 Id: \" + postman.getGlobalVariable(\"OccupancySensor5Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea6 Id: \" + postman.getGlobalVariable(\"OrganizationalArea6Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from OccupancySensor5 to OrganizationalArea6: \" + postman.getGlobalVariable(\"OccupancySensor5ControlsOrganizationalArea6Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea6Id}}\",\r\n    \"outNodeId\": \"{{OccupancySensor5Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST Floor3 Contains Keypad6",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Keypad\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Keypad6Name is Programmable Controller []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Keypad6Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor3ContainsKeypad6Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Keypad6Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor3Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Keypad\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor3 Id: \" + postman.getGlobalVariable(\"Floor3Id\"), function () {});\r",
							"pm.test(\"Keypad6 Id: \" + postman.getGlobalVariable(\"Keypad6Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor3 to Keypad6: \" + postman.getGlobalVariable(\"Floor3ContainsKeypad6Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Keypad\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"Keypad6Name is Programmable Controller []\",\r\n\t\t\"Caption\": \"Programmable Controller\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t  \"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Locked\": false\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor3Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Keypad",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Keypad"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Keypad6 Controls OrganizationalArea6",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Keypad6ControlsOrganizationalArea6Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea6Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"Keypad6Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Keypad\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Keypad6 Id: \" + postman.getGlobalVariable(\"Keypad6Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea6 Id: \" + postman.getGlobalVariable(\"OrganizationalArea6Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from Keypad6 to OrganizationalArea6: \" + postman.getGlobalVariable(\"Keypad6ControlsOrganizationalArea6Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea6Id}}\",\r\n    \"outNodeId\": \"{{Keypad6Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST Building2 Contains Floor4",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Floor\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Floor4Name\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor4Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Building2ContainsFloor4Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Floor4Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Building2Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Floor\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Building\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Building2 Id: \" + postman.getGlobalVariable(\"Building2Id\"), function () {});\r",
							"pm.test(\"Floor4 Id: \" + postman.getGlobalVariable(\"Floor4Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Building2 to Floor4: \" + postman.getGlobalVariable(\"Building2ContainsFloor4Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Floor\",\r\n\t\t\"name\": \"Floor4Name\",\r\n\t\t\"Caption\": \"New Floor\",\r\n\t\t\"ChangeID\": \"e792aff7-eae6-4a22-8fb7-eace30c58b98\",\r\n\t\t\"FloorLevel\": 0,\r\n\t\t\"DisplayMode\": \"ThreeD\",\r\n\t\t\"VisibleLayers\": [ 0, 1, 4, 6 ],\r\n\t\t\"ColorType\": \"FullColor\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Building\",\r\n\t\t\"outNodeId\": \"{{Building2Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Floor",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Floor"
					]
				},
				"description": "Creates a Floor contains by the Building."
			},
			"response": []
		},
		{
			"name": "POST Floor4 Contains OrganizationalArea7",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OrganizationalArea7Name is Zone [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea7Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor4ContainsOrganizationalArea7Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea7Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor4Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor4 Id: \" + postman.getGlobalVariable(\"Floor4Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea7 Id: \" + postman.getGlobalVariable(\"OrganizationalArea7Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor4 to OrganizationalArea7: \" + postman.getGlobalVariable(\"Floor4ContainsOrganizationalArea7Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"OrganizationalArea\",\r\n\t\t\"SyncState\": 2,\r\n\t\t\"Name\": \"OrganizationalArea7Name is Zone [0064-FFFF]\",\r\n\t\t\"Caption\": \"Zone\",\r\n\t\t\"ObjectType\": 245,\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"ZOrder\": 2,\r\n\t\t\"EnableScenes\": true,\r\n\t\t\"EnableControllable\": true,\r\n\t\t\"EnablePC\": true,\r\n\t\t\"BacNetIndex\": -1,\r\n\t\t\"ComponentType\": 10,\r\n\t\t\"PCS_ActivityOnly\": false,\r\n\t\t\"PreviousEcu\": \"13165559-9116-4921-A22B-3679BE039017\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"OcsAutoTurnOn\": true,\r\n\t\t\"TimeScheduleAutoTurnOn\": true,\r\n\t\t\"OccupancyToTurnOnSchedule\": true,\r\n\t\t\"OcsExtensionTime\": 60,\r\n\t\t\"OcsManualUserExtensionTime\": 1200,\r\n\t\t\"VacancyExtensionTime\": 60,\r\n\t\t\"TwoStageExtensionTime\": 1200,\r\n\t\t\"StandbyOffBehaviour\": \"StandbyBrightness\",\r\n\t\t\"ManualFadeToOff\": 60,\r\n\t\t\"OccupancyFadeToOff\": 1200,\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor4Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OrganizationalArea",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OrganizationalArea"
					]
				},
				"description": "Creates an OrganizationalArea contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor4 Contains OrganizationalArea8",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OrganizationalArea8Name is Zone [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea8Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor4ContainsOrganizationalArea8Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea8Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor4Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor4 Id: \" + postman.getGlobalVariable(\"Floor4Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea8 Id: \" + postman.getGlobalVariable(\"OrganizationalArea8Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor4 to OrganizationalArea8: \" + postman.getGlobalVariable(\"Floor4ContainsOrganizationalArea8Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"OrganizationalArea\",\r\n\t\t\"SyncState\": 2,\r\n\t\t\"Name\": \"OrganizationalArea8Name is Zone [0064-FFFF]\",\r\n\t\t\"Caption\": \"Zone\",\r\n\t\t\"ObjectType\": 245,\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"ZOrder\": 2,\r\n\t\t\"EnableScenes\": true,\r\n\t\t\"EnableControllable\": true,\r\n\t\t\"EnablePC\": true,\r\n\t\t\"BacNetIndex\": -1,\r\n\t\t\"ComponentType\": 10,\r\n\t\t\"PCS_ActivityOnly\": false,\r\n\t\t\"PreviousEcu\": \"13165559-9116-4921-A22B-3679BE039017\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"OcsAutoTurnOn\": true,\r\n\t\t\"TimeScheduleAutoTurnOn\": true,\r\n\t\t\"OccupancyToTurnOnSchedule\": true,\r\n\t\t\"OcsExtensionTime\": 60,\r\n\t\t\"OcsManualUserExtensionTime\": 1200,\r\n\t\t\"VacancyExtensionTime\": 60,\r\n\t\t\"TwoStageExtensionTime\": 1200,\r\n\t\t\"StandbyOffBehaviour\": \"StandbyBrightness\",\r\n\t\t\"ManualFadeToOff\": 60,\r\n\t\t\"OccupancyFadeToOff\": 1200,\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor4Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OrganizationalArea",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OrganizationalArea"
					]
				},
				"description": "Creates an OrganizationalArea contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor4 Contains OrganizationalArea9",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OrganizationalArea9Name is Zone [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea9Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor4ContainsOrganizationalArea9Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea9Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor4Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor4 Id: \" + postman.getGlobalVariable(\"Floor4Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea9 Id: \" + postman.getGlobalVariable(\"OrganizationalArea9Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor4 to OrganizationalArea9: \" + postman.getGlobalVariable(\"Floor4ContainsOrganizationalArea9Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"OrganizationalArea\",\r\n\t\t\"SyncState\": 2,\r\n\t\t\"Name\": \"OrganizationalArea9Name is Zone [0064-FFFF]\",\r\n\t\t\"Caption\": \"Zone\",\r\n\t\t\"ObjectType\": 245,\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"ZOrder\": 2,\r\n\t\t\"EnableScenes\": true,\r\n\t\t\"EnableControllable\": true,\r\n\t\t\"EnablePC\": true,\r\n\t\t\"BacNetIndex\": -1,\r\n\t\t\"ComponentType\": 10,\r\n\t\t\"PCS_ActivityOnly\": false,\r\n\t\t\"PreviousEcu\": \"13165559-9116-4921-A22B-3679BE039017\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"OcsAutoTurnOn\": true,\r\n\t\t\"TimeScheduleAutoTurnOn\": true,\r\n\t\t\"OccupancyToTurnOnSchedule\": true,\r\n\t\t\"OcsExtensionTime\": 60,\r\n\t\t\"OcsManualUserExtensionTime\": 1200,\r\n\t\t\"VacancyExtensionTime\": 60,\r\n\t\t\"TwoStageExtensionTime\": 1200,\r\n\t\t\"StandbyOffBehaviour\": \"StandbyBrightness\",\r\n\t\t\"ManualFadeToOff\": 60,\r\n\t\t\"OccupancyFadeToOff\": 1200,\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor4Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OrganizationalArea",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OrganizationalArea"
					]
				},
				"description": "Creates an OrganizationalArea contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor4 Contains Keypad7",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Keypad\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Keypad7Name is Programmable Controller []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Keypad7Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor4ContainsKeypad7Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Keypad7Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor4Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Keypad\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor4 Id: \" + postman.getGlobalVariable(\"Floor4Id\"), function () {});\r",
							"pm.test(\"Keypad7 Id: \" + postman.getGlobalVariable(\"Keypad7Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor4 to Keypad7: \" + postman.getGlobalVariable(\"Floor4ContainsKeypad7Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Keypad\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"Keypad7Name is Programmable Controller []\",\r\n\t\t\"Caption\": \"Programmable Controller\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t  \"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Locked\": false\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor4Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Keypad",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Keypad"
					]
				},
				"description": "Creates an OrganizationalArea contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Keypad7 Controls OrganizationalArea7",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Keypad7ControlsOrganizationalArea7Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea7Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"Keypad7Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Keypad\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Keypad7 Id: \" + postman.getGlobalVariable(\"Keypad7Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea7 Id: \" + postman.getGlobalVariable(\"OrganizationalArea7Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from Keypad7 to OrganizationalArea7: \" + postman.getGlobalVariable(\"Keypad7ControlsOrganizationalArea7Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea7Id}}\",\r\n    \"outNodeId\": \"{{Keypad7Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST Keypad7 Controls OrganizationalArea8",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Keypad7ControlsOrganizationalArea8Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea8Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"Keypad7Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Keypad\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Keypad7 Id: \" + postman.getGlobalVariable(\"Keypad7Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea8 Id: \" + postman.getGlobalVariable(\"OrganizationalArea8Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from Keypad7 to OrganizationalArea8: \" + postman.getGlobalVariable(\"Keypad7ControlsOrganizationalArea8Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea8Id}}\",\r\n    \"outNodeId\": \"{{Keypad7Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST Keypad7 Controls OrganizationalArea9",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Keypad7ControlsOrganizationalArea9Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea9Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"Keypad7Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Keypad\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Keypad7 Id: \" + postman.getGlobalVariable(\"Keypad7Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea9 Id: \" + postman.getGlobalVariable(\"OrganizationalArea9Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from Keypad7 to OrganizationalArea9: \" + postman.getGlobalVariable(\"Keypad7ControlsOrganizationalArea9Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea9Id}}\",\r\n    \"outNodeId\": \"{{Keypad7Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST Floor4 Contains WalcLuminaire2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"WalcLuminaire\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"WalcLuminaire2Name is Fixture []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"WalcLuminaire2Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor4ContainsWalcLuminaire2Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"WalcLuminaire2Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor4Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"WalcLuminaire\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor4 Id: \" + postman.getGlobalVariable(\"Floor4Id\"), function () {});\r",
							"pm.test(\"WalcLuminaire2 Id: \" + postman.getGlobalVariable(\"WalcLuminaire2Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor4 to WalcLuminaire2: \" + postman.getGlobalVariable(\"Floor4ContainsWalcLuminaire2Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"WalcLuminaire\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"WalcLuminaire2Name is Fixture []\",\r\n\t\t\"Caption\": \"Fixture\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Rotation\": 0,\r\n\t\t\"DayLightOrientation\": 0,\r\n\t\t\"DayLightDistance\": 0.0,\r\n\t\t\"DayLightOutOfRange\": false,\r\n\t\t\"DayLightBrightness\": 0,\r\n\t\t\"DayLightOverride\": 0,\r\n\t\t\"DayLightCompRemainder\": 0,\r\n\t\t\"MaxBrightness\": 0,\r\n\t\t\"MinBrightness\": 0,\r\n\t\t\"ComfortBrightness\": 0,\r\n\t\t\"TwoStageBrightness\": 0,\r\n\t\t\"MinComfortBrightness\": 0,\r\n\t\t\"ComfortBrightnessRelative\": false,\r\n\t\t\"BackupPowerBrightness\": 0,\r\n\t\t\"EnabledForcedOverrideBrightness\": false,\r\n\t\t\"ForcedOverrideBrightness\": 0,\r\n\t\t\"NightLight\": false,\r\n\t\t\"LuxMin\": 0,\r\n\t\t\"LuxMax\": 0,\r\n\t\t\"RemainingBurnIn\": 0,\r\n\t\t\"FixBaselineWattage\": 0,\r\n\t\t\"BallastNameplateWattage\": 0,\r\n\t\t\"Demand\": 0,\r\n\t\t\"DemandMin\": 0,\r\n\t\t\"Dimmable\": true,\r\n\t\t\"Restrike\": false,\r\n\t\t\"DisableDLHV\": false,\r\n\t\t\"DaliFadeTime\": 0,\r\n\t\t\"DaliFadeRate\": 0,\r\n\t\t\"DaliPowerOnBrightnessLevel\": 0,\r\n\t\t\"DaliSystemFailureBrightnessLevel\": 0,\r\n\t\t\"StartupBehaviorType\": \"NoChanges\",\r\n\t\t\"StartupBrightness\": 0,\r\n\t\t\"StartupDuration\": 0,\r\n\t\t\"PhaseCutDimmerLoadType\": \"LeadingTrailing\",\r\n\t\t\"PhaseCutDimmerModeType\": \"LeadingTrailing\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"PowerCurve\": [0.0,0.0,0.0],\r\n\t\t\"ColorTemperature\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor4Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/WalcLuminaire",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"WalcLuminaire"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor4 Contains WalcLuminaire3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"WalcLuminaire\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"WalcLuminaire3Name is Fixture []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"WalcLuminaire3Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor4ContainsWalcLuminaire3Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"WalcLuminaire3Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor4Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"WalcLuminaire\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor4 Id: \" + postman.getGlobalVariable(\"Floor4Id\"), function () {});\r",
							"pm.test(\"WalcLuminaire3 Id: \" + postman.getGlobalVariable(\"WalcLuminaire3Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor4 to WalcLuminaire3: \" + postman.getGlobalVariable(\"Floor4ContainsWalcLuminaire3Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"WalcLuminaire\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"WalcLuminaire3Name is Fixture []\",\r\n\t\t\"Caption\": \"Fixture\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Rotation\": 0,\r\n\t\t\"DayLightOrientation\": 0,\r\n\t\t\"DayLightDistance\": 0.0,\r\n\t\t\"DayLightOutOfRange\": false,\r\n\t\t\"DayLightBrightness\": 0,\r\n\t\t\"DayLightOverride\": 0,\r\n\t\t\"DayLightCompRemainder\": 0,\r\n\t\t\"MaxBrightness\": 0,\r\n\t\t\"MinBrightness\": 0,\r\n\t\t\"ComfortBrightness\": 0,\r\n\t\t\"TwoStageBrightness\": 0,\r\n\t\t\"MinComfortBrightness\": 0,\r\n\t\t\"ComfortBrightnessRelative\": false,\r\n\t\t\"BackupPowerBrightness\": 0,\r\n\t\t\"EnabledForcedOverrideBrightness\": false,\r\n\t\t\"ForcedOverrideBrightness\": 0,\r\n\t\t\"NightLight\": false,\r\n\t\t\"LuxMin\": 0,\r\n\t\t\"LuxMax\": 0,\r\n\t\t\"RemainingBurnIn\": 0,\r\n\t\t\"FixBaselineWattage\": 0,\r\n\t\t\"BallastNameplateWattage\": 0,\r\n\t\t\"Demand\": 0,\r\n\t\t\"DemandMin\": 0,\r\n\t\t\"Dimmable\": true,\r\n\t\t\"Restrike\": false,\r\n\t\t\"DisableDLHV\": false,\r\n\t\t\"DaliFadeTime\": 0,\r\n\t\t\"DaliFadeRate\": 0,\r\n\t\t\"DaliPowerOnBrightnessLevel\": 0,\r\n\t\t\"DaliSystemFailureBrightnessLevel\": 0,\r\n\t\t\"StartupBehaviorType\": \"NoChanges\",\r\n\t\t\"StartupBrightness\": 0,\r\n\t\t\"StartupDuration\": 0,\r\n\t\t\"PhaseCutDimmerLoadType\": \"LeadingTrailing\",\r\n\t\t\"PhaseCutDimmerModeType\": \"LeadingTrailing\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"PowerCurve\": [0.0,0.0,0.0],\r\n\t\t\"ColorTemperature\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor4Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/WalcLuminaire",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"WalcLuminaire"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor4 Contains PlugLoad1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PlugLoad\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"PlugLoad1Name is Plug Load []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PlugLoad1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor4ContainsPlugLoad1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"PlugLoad1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor4Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PlugLoad\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor4 Id: \" + postman.getGlobalVariable(\"Floor4Id\"), function () {});\r",
							"pm.test(\"PlugLoad1 Id: \" + postman.getGlobalVariable(\"PlugLoad1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor4 to PlugLoad1: \" + postman.getGlobalVariable(\"Floor4ContainsPlugLoad1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"PlugLoad\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"PlugLoad1Name is Plug Load []\",\r\n\t\t\"Caption\": \"Plug Load\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"NightLight\": false,\r\n\t\t\"BaselineWattage\": 0,\r\n\t\t\"WattageConsumption\": 0,\r\n\t\t\"Demand\": 0,\r\n\t\t\"DemandMin\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor4Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PlugLoad",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PlugLoad"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST OrganizationalArea8 Controls WalcLuminaire2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea8ControlsWalcLuminaire2Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"WalcLuminaire2Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea8Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"WalcLuminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OrganizationalArea\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OrganizationalArea8 Id: \" + postman.getGlobalVariable(\"OrganizationalArea8Id\"), function () {});\r",
							"pm.test(\"WalcLuminaire2 Id: \" + postman.getGlobalVariable(\"WalcLuminaire2Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from OrganizationalArea8 to WalcLuminaire2: \" + postman.getGlobalVariable(\"OrganizationalArea8ControlsWalcLuminaire2Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{WalcLuminaire2Id}}\",\r\n    \"outNodeId\": \"{{OrganizationalArea8Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST OrganizationalArea9 Controls WalcLuminaire3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea9ControlsWalcLuminaire3Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"WalcLuminaire3Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea9Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"WalcLuminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OrganizationalArea\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OrganizationalArea9 Id: \" + postman.getGlobalVariable(\"OrganizationalArea9Id\"), function () {});\r",
							"pm.test(\"WalcLuminaire3 Id: \" + postman.getGlobalVariable(\"WalcLuminaire3Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from OrganizationalArea9 to WalcLuminaire3: \" + postman.getGlobalVariable(\"OrganizationalArea9ControlsWalcLuminaire3Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{WalcLuminaire3Id}}\",\r\n    \"outNodeId\": \"{{OrganizationalArea9Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST OrganizationalArea7 Controls PlugLoad1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea7ControlsPlugLoad1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"PlugLoad1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea7Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"PlugLoad\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OrganizationalArea\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OrganizationalArea7 Id: \" + postman.getGlobalVariable(\"OrganizationalArea7Id\"), function () {});\r",
							"pm.test(\"PlugLoad1 Id: \" + postman.getGlobalVariable(\"PlugLoad1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from OrganizationalArea7 to PlugLoad1: \" + postman.getGlobalVariable(\"OrganizationalArea7ControlsPlugLoad1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{PlugLoad1Id}}\",\r\n    \"outNodeId\": \"{{OrganizationalArea7Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "GET  Node Relations Unlimited Depth",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check - nodes count\", function () {\r",
							"    pm.expect(jsonData.values.nodes.length).to.eql(38);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - relations count\", function () {\r",
							"    pm.expect(jsonData.values.relations.length).to.eql(38);\r",
							"    postman.setGlobalVariable(\"Count\", jsonData.values.nodes.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - only contains relations are returned\", function () {\r",
							"    for (var i = 0; i < postman.getGlobalVariable(\"Count\"); i++) {\r",
							"        pm.expect(jsonData.values.relations[i].relationType).to.eql(\"Contains\");    \r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EncSystem/{{EncSystemId}}/relations?direction=out&relationTypes=Contains",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EncSystem",
						"{{EncSystemId}}",
						"relations"
					],
					"query": [
						{
							"key": "direction",
							"value": "out"
						},
						{
							"key": "relationTypes",
							"value": "Contains"
						}
					]
				},
				"description": "CMCF-649"
			},
			"response": []
		},
		{
			"name": "GET  Node Relations Depth 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check - nodes count\", function () {\r",
							"    pm.expect(jsonData.values.nodes.length).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - relations count\", function () {\r",
							"    pm.expect(jsonData.values.relations.length).to.eql(2);\r",
							"    postman.setGlobalVariable(\"Count\", jsonData.values.nodes.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - only contains relations are returned\", function () {\r",
							"    for (var i = 0; i < postman.getGlobalVariable(\"Count\"); i++) {\r",
							"        pm.expect(jsonData.values.relations[i].relationType).to.eql(\"Contains\");    \r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EncSystem/{{EncSystemId}}/relations?direction=out&relationTypes=Contains&depth=1",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EncSystem",
						"{{EncSystemId}}",
						"relations"
					],
					"query": [
						{
							"key": "direction",
							"value": "out"
						},
						{
							"key": "relationTypes",
							"value": "Contains"
						},
						{
							"key": "depth",
							"value": "1"
						}
					]
				},
				"description": "CMCF-649"
			},
			"response": []
		},
		{
			"name": "GET  Node Relations Depth 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check - nodes count\", function () {\r",
							"    pm.expect(jsonData.values.nodes.length).to.eql(6);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - relations count\", function () {\r",
							"    pm.expect(jsonData.values.relations.length).to.eql(6);\r",
							"    postman.setGlobalVariable(\"Count\", jsonData.values.nodes.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - only contains relations are returned\", function () {\r",
							"    for (var i = 0; i < postman.getGlobalVariable(\"Count\"); i++) {\r",
							"        pm.expect(jsonData.values.relations[i].relationType).to.eql(\"Contains\");    \r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EncSystem/{{EncSystemId}}/relations?direction=out&relationTypes=Contains&depth=2",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EncSystem",
						"{{EncSystemId}}",
						"relations"
					],
					"query": [
						{
							"key": "direction",
							"value": "out"
						},
						{
							"key": "relationTypes",
							"value": "Contains"
						},
						{
							"key": "depth",
							"value": "2"
						}
					]
				},
				"description": "CMCF-649"
			},
			"response": []
		},
		{
			"name": "GET  Node Relations Depth 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check - nodes count\", function () {\r",
							"    pm.expect(jsonData.values.nodes.length).to.eql(38);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - relations count\", function () {\r",
							"    pm.expect(jsonData.values.relations.length).to.eql(38);\r",
							"    postman.setGlobalVariable(\"Count\", jsonData.values.nodes.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - only contains relations are returned\", function () {\r",
							"    for (var i = 0; i < postman.getGlobalVariable(\"Count\"); i++) {\r",
							"        pm.expect(jsonData.values.relations[i].relationType).to.eql(\"Contains\");    \r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EncSystem/{{EncSystemId}}/relations?direction=out&relationTypes=Contains&depth=3",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EncSystem",
						"{{EncSystemId}}",
						"relations"
					],
					"query": [
						{
							"key": "direction",
							"value": "out"
						},
						{
							"key": "relationTypes",
							"value": "Contains"
						},
						{
							"key": "depth",
							"value": "3"
						}
					]
				},
				"description": "CMCF-649"
			},
			"response": []
		},
		{
			"name": "GET  Node Relations Depth 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check - nodes count\", function () {\r",
							"    pm.expect(jsonData.values.nodes.length).to.eql(38);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - relations count\", function () {\r",
							"    pm.expect(jsonData.values.relations.length).to.eql(38);\r",
							"    postman.setGlobalVariable(\"Count\", jsonData.values.nodes.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - only contains relations are returned\", function () {\r",
							"    for (var i = 0; i < postman.getGlobalVariable(\"Count\"); i++) {\r",
							"        pm.expect(jsonData.values.relations[i].relationType).to.eql(\"Contains\");    \r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EncSystem/{{EncSystemId}}/relations?direction=out&relationTypes=Contains&depth=4",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EncSystem",
						"{{EncSystemId}}",
						"relations"
					],
					"query": [
						{
							"key": "direction",
							"value": "out"
						},
						{
							"key": "relationTypes",
							"value": "Contains"
						},
						{
							"key": "depth",
							"value": "4"
						}
					]
				},
				"description": "CMCF-649"
			},
			"response": []
		},
		{
			"name": "GET  Node Relations Only Direction",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check - nodes count\", function () {\r",
							"    pm.expect(jsonData.values.nodes.length).to.eql(39);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - relations count\", function () {\r",
							"    pm.expect(jsonData.values.relations.length).to.eql(39);\r",
							"    postman.setGlobalVariable(\"Count\", jsonData.values.nodes.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - only contains relations are returned\", function () {\r",
							"    for (var i = 0; i < postman.getGlobalVariable(\"Count\"); i++) {\r",
							"        pm.expect(jsonData.values.relations[i].relationType).to.eql(\"Contains\");    \r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Organization/{{OrganizationId}}/relations?direction=out",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Organization",
						"{{OrganizationId}}",
						"relations"
					],
					"query": [
						{
							"key": "direction",
							"value": "out"
						}
					]
				},
				"description": "CMCF-656, it will return all relations but only Contains."
			},
			"response": []
		},
		{
			"name": "GET  Node Relations Direct Controls",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check - nodes count\", function () {\r",
							"    pm.expect(jsonData.values.nodes.length).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - relations count\", function () {\r",
							"    pm.expect(jsonData.values.relations.length).to.eql(2);\r",
							"    postman.setGlobalVariable(\"Count\", jsonData.values.nodes.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - only controls relations are returned\", function () {\r",
							"    for (var i = 0; i < postman.getGlobalVariable(\"Count\"); i++) {\r",
							"        pm.expect(jsonData.values.relations[i].relationType).to.eql(\"Controls\");    \r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PartitionWall/{{PartitionWall1Id}}/relations?direction=out&relationTypes=Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PartitionWall",
						"{{PartitionWall1Id}}",
						"relations"
					],
					"query": [
						{
							"key": "direction",
							"value": "out"
						},
						{
							"key": "relationTypes",
							"value": "Controls"
						}
					]
				},
				"description": "CMCF-724"
			},
			"response": []
		},
		{
			"name": "GET  Node Relations Indirect Controls",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check - nodes count\", function () {\r",
							"    pm.expect(jsonData.values.nodes.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - relations count\", function () {\r",
							"    pm.expect(jsonData.values.relations.length).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EncSystem/{{EncSystemId}}/relations?direction=out&relationTypes=Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EncSystem",
						"{{EncSystemId}}",
						"relations"
					],
					"query": [
						{
							"key": "direction",
							"value": "out"
						},
						{
							"key": "relationTypes",
							"value": "Controls"
						}
					]
				},
				"description": "CMCF-724"
			},
			"response": []
		},
		{
			"name": "DELETE  Organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1551f680-e5e9-46a4-b944-a39758717fec",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Organization/{{OrganizationId}}?cascade=true",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Organization",
						"{{OrganizationId}}"
					],
					"query": [
						{
							"key": "cascade",
							"value": "true"
						}
					]
				},
				"description": "Deletes a node by record id"
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "username",
				"value": "removed",
				"type": "string"
			},
			{
				"key": "password",
				"value": "removed",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "70296f5e-e050-46bd-954f-c899ba361909",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7e6bac53-bdeb-4338-82e6-9ec2ddceae77",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}