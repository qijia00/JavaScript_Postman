{
	"info": {
		"_postman_id": "d19c97dc-8e35-4a7a-a96f-038f0ec50258",
		"name": "sanityConfigSchemas",
		"description": "sanity check for BIM Config Schemas.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET /v1/schemas/nodetypes !!!",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "75dd6efd-0393-43c7-b2dd-8690e6044762",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Response body check - node type in swagger\", function () {\r",
							"    pm.expect(jsonData.includes(\"AvInterfaceHandler\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"BacnetConfiguration\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"BacnetGateway\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"Ballast\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"Building\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"BuildingTemplate\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"Button\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"CentralBattery\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"CentralBatteryTemplate\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"CommandOptimizer\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"ContactClosureTrigger\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"EmergencyGroupDispatcher\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"EmergencyInverter\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"EmergencyLuminaire\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"EmergencyLuminaireTemplate\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"EmergencyTestGroup\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"EmergencyTestManager\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"EncSystem\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"EventDispatcher\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"EventList\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"EventLogger\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"Facade\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"FireAlarm\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"FireAlarmTemplate\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"Floor\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"GenericDeviceEndpoint\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"Keypad\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"KeypadTemplate\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"LoadSheddingDispatcher\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"LoadSheddingGroup\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"LoadSheddingPrioritizer\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"LoadSheddingRequestor\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"Luminaire\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"LuminaireTemplate\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"Manager\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"OccupancySensor\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"OccupancySensorTemplate\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"Organization\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"OrganizationalArea\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"OrganizationalAreaTemplate\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"PartitionWall\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"PartitionWallTemplate\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"PersonalControlDevice\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"PhotoSensor\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"PhotoSensorTemplate\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"PhysicalLoadMeter\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"PlugLoad\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"PlugLoadTemplate\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"PolarisVirtualFloor\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"PolarisVirtualFloorTemplate\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"Repeater\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"ScheduleTrigger\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"Shade\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"ShadeTemplate\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"SolarCalculator\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"StatusTrigger\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"TunableWhiteLuminaire\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"TunableWhiteLuminaireTemplate\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"WalcHiddenTemplate\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"WalcLuminaire\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"WalcLuminaireTemplate\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"WslcLuminaire\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"WslcLuminaireTemplate\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"ZigbeeNetworkInfo\")).to.eql(true);\r",
							"});\r",
							"\r",
							"//we implemented 64 node types in swagger\r",
							"//but there are still 5 undifined not types need future implementation.\r",
							"pm.test(\"Response body check - total node type count\", function () {\r",
							"    pm.expect(jsonData.length).to.eql(64+5);\r",
							"});\r",
							"\r",
							"//as per Deane, \r",
							"//the calendar, calendar entry, schedule, schedule dispatcher, schedule exception are not defined yet. \r",
							"//meaning, you can see them in Liam's diagram but not yet in the list of nodetypes in swagger. \r",
							"pm.test(\"Response body check - node type not defined yet\", function () {\r",
							"    pm.expect(jsonData.includes(\"Calendar\")).to.eql(true, \"Calendar node type is not defined yet.\");\r",
							"    pm.expect(jsonData.includes(\"CalendarEntry\")).to.eql(true, \"CalendarEntry node type is not defined yet.\");\r",
							"    pm.expect(jsonData.includes(\"Schedule\")).to.eql(true, \"Schedule node type is not defined yet.\");\r",
							"    pm.expect(jsonData.includes(\"ScheduleDispatcher\")).to.eql(true, \"ScheduleDispatcher node type is not defined yet.\");\r",
							"    pm.expect(jsonData.includes(\"ScheduleException\")).to.eql(true, \"ScheduleException node type is not defined yet.\");    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{url}}/v1/schemas/nodetypes",
					"host": [
						"{{http}}{{env}}{{url}}"
					],
					"path": [
						"v1",
						"schemas",
						"nodetypes"
					]
				},
				"description": "Returns a node by IP address"
			},
			"response": []
		},
		{
			"name": "GET /v1/schemas/nodetypes/{nodeType} AvInterfaceHandler",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "72225d8d-54ab-493d-8ab4-579787d09bda",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.type).to.eql(\"object\", \"Failed at type line.\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.refAddress.required).to.eql(true, \"Failed at properties line refAddress.required.\");\r",
							"    pm.expect(jsonData.properties.refAddress.type).to.eql(\"integer\", \"Failed at  properties line refAddress.type.\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.syncState.required).to.eql(true, \"Failed at properties line syncState.required.\");\r",
							"    pm.expect(jsonData.properties.syncState.type).to.eql(\"integer\", \"Failed at properties line syncState.type.\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.isEnabled.required).to.eql(true, \"Failed at properties line isEnabled.required.\");\r",
							"    pm.expect(jsonData.properties.isEnabled.type).to.eql(\"boolean\", \"Failed at properties line isEnabled.type.\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.port.required).to.eql(true, \"Failed at properties line port.required.\");\r",
							"    pm.expect(jsonData.properties.port.type).to.eql(\"integer\", \"Failed at properties line port.type.\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.loginMessage.required).to.eql(true, \"Failed at properties line loginMessage.required.\");\r",
							"    pm.expect(jsonData.properties.loginMessage.type[0]).to.eql(\"string\", \"Failed at properties line loginMessage.type[0].\");\r",
							"    pm.expect(jsonData.properties.loginMessage.type[1]).to.eql(\"null\", \"Failed at properties line loginMessage.type[1].\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.prompt.required).to.eql(true, \"Failed at properties line prompt.required.\");\r",
							"    pm.expect(jsonData.properties.prompt.type[0]).to.eql(\"string\", \"Failed at properties line prompt.type[0].\");\r",
							"    pm.expect(jsonData.properties.prompt.type[1]).to.eql(\"null\", \"Failed at properties line prompt.type[1].\");\r",
							"        \r",
							"    pm.expect(jsonData.properties.exitMessage.required).to.eql(true, \"Failed at properties line exitMessage.required.\");\r",
							"    pm.expect(jsonData.properties.exitMessage.type[0]).to.eql(\"string\", \"Failed at properties line exitMessage.type[0].\");\r",
							"    pm.expect(jsonData.properties.exitMessage.type[1]).to.eql(\"null\", \"Failed at properties line exitMessage.type[1].\");\r",
							"        \r",
							"    pm.expect(jsonData.properties.isRequestLoginEnabled.required).to.eql(true, \"Failed at properties line isRequestLoginEnabled.required.\");\r",
							"    pm.expect(jsonData.properties.isRequestLoginEnabled.type).to.eql(\"boolean\", \"Failed at properties line isRequestLoginEnabled.type.\");\r",
							"            \r",
							"    pm.expect(jsonData.properties.username.required).to.eql(true, \"Failed at properties line username.required.\");\r",
							"    pm.expect(jsonData.properties.username.type[0]).to.eql(\"string\", \"Failed at properties line username.type[0].\");\r",
							"    pm.expect(jsonData.properties.username.type[1]).to.eql(\"null\", \"Failed at properties line username.type[1].\");\r",
							"                \r",
							"    pm.expect(jsonData.properties.password.required).to.eql(true, \"Failed at properties line password.required.\");\r",
							"    pm.expect(jsonData.properties.password.type[0]).to.eql(\"string\", \"Failed at properties line password.type[0].\");\r",
							"    pm.expect(jsonData.properties.password.type[1]).to.eql(\"null\", \"Failed at properties line password.type[1].\");\r",
							"                    \r",
							"    pm.expect(jsonData.properties.nodeType.required).to.eql(true, \"Failed at properties line nodeType.required.\");\r",
							"    pm.expect(jsonData.properties.nodeType.type[0]).to.eql(\"string\", \"Failed at properties line nodeType.type[0].\");\r",
							"    pm.expect(jsonData.properties.nodeType.type[1]).to.eql(\"null\", \"Failed at properties line nodeType.type[1].\");\r",
							"                        \r",
							"    pm.expect(jsonData.properties.name.required).to.eql(true, \"Failed at properties line name.required.\");\r",
							"    pm.expect(jsonData.properties.name.type[0]).to.eql(\"string\", \"Failed at properties line name.type[0].\");\r",
							"    pm.expect(jsonData.properties.name.type[1]).to.eql(\"null\", \"Failed at properties line name.type[1].\");\r",
							"                            \r",
							"    pm.expect(jsonData.properties.description.required).to.eql(true, \"Failed at properties line description.required.\");\r",
							"    pm.expect(jsonData.properties.description.type[0]).to.eql(\"string\", \"Failed at properties line description.type[0].\");\r",
							"    pm.expect(jsonData.properties.description.type[1]).to.eql(\"null\", \"Failed at properties line description.type[1].\");\r",
							"                                \r",
							"    pm.expect(jsonData.properties.resources.required).to.eql(true, \"Failed at properties line prompt.required.\");\r",
							"    pm.expect(jsonData.properties.resources.type[0]).to.eql(\"array\", \"Failed at properties line resources.type[0].\");\r",
							"    pm.expect(jsonData.properties.resources.type[1]).to.eql(\"null\", \"Failed at properties line resources.type[1].\");\r",
							"    pm.expect(jsonData.properties.resources.items.type[0]).to.eql(\"object\", \"Failed at properties line resources.items.type[0].\");\r",
							"    pm.expect(jsonData.properties.resources.items.type[1]).to.eql(\"null\", \"Failed at properties line resources.items.type[1].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.name.required).to.eql(true, \"Failed at properties line resources.items.properties.name.required.\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.name.type[0]).to.eql(\"string\", \"Failed at properties line resources.items.properties.name.type[0].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.name.type[1]).to.eql(\"null\", \"Failed at properties line resources.items.properties.name.type[1].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.description.required).to.eql(true, \"Failed at properties line resources.items.properties.description.required.\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.description.type[0]).to.eql(\"string\", \"Failed at properties line resources.items.properties.description.type[0]).\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.description.type[1]).to.eql(\"null\", \"Failed at properties line resources.items.properties.description.type[1]).\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.link.required).to.eql(true, \"Failed at properties line resources.items.properties.link.required.\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.link.type[0]).to.eql(\"string\", \"Failed at properties line resources.items.properties.link.type[0].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.link.type[1]).to.eql(\"null\", \"Failed at properties line resources.items.properties.link.type[1].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.metaData.required).to.eql(true, \"Failed at properties line resources.items.properties.metaData.required.\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.metaData.type[0]).to.eql(\"object\", \"Failed at properties line resources.items.properties.metaData.type[0].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.metaData.type[1]).to.eql(\"null\", \"Failed at properties line resources.items.properties.metaData.type[1].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.metaData.additionalProperties.type[0]).to.eql(\"string\", \"Failed at properties line resources.items.properties.metaData.additionalProperties.type[0].\");\r",
							"    pm.expect(jsonData.properties.resources.items.properties.metaData.additionalProperties.type[1]).to.eql(\"null\", \"Failed at properties line resources.items.properties.metaData.additionalProperties.type[1].\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.createdBy.required).to.eql(true, \"Failed at properties line createdBy.required.\");\r",
							"    pm.expect(jsonData.properties.createdBy.type[0]).to.eql(\"string\", \"Failed at properties line createdBy.type[0].\");\r",
							"    pm.expect(jsonData.properties.createdBy.type[1]).to.eql(\"null\", \"Failed at properties line createdBy.type[1].\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.createdDate.required).to.eql(true, \"Failed at properties line createdDate.required.\");\r",
							"    pm.expect(jsonData.properties.createdDate.type).to.eql(\"string\", \"Failed at properties line createdDate.type.\");\r",
							"        \r",
							"    pm.expect(jsonData.properties.updatedBy.required).to.eql(true, \"Failed at properties line updatedBy.required.\");\r",
							"    pm.expect(jsonData.properties.updatedBy.type[0]).to.eql(\"string\", \"Failed at properties line updatedBy.type[0].\");\r",
							"    pm.expect(jsonData.properties.updatedBy.type[1]).to.eql(\"null\", \"Failed at properties line updatedBy.type[1].\");\r",
							"            \r",
							"    pm.expect(jsonData.properties.updatedDate.required).to.eql(true, \"Failed at properties line updatedDate.required.\");\r",
							"    pm.expect(jsonData.properties.updatedDate.type[0]).to.eql(\"string\", \"Failed at properties line updatedDate.type[0].\");\r",
							"    pm.expect(jsonData.properties.updatedDate.type[1]).to.eql(\"null\", \"Failed at properties line updatedDate.type[1].\");\r",
							"        \r",
							"    pm.expect(jsonData.properties.id.required).to.eql(true, \"Failed at properties line id.required.\");\r",
							"    pm.expect(jsonData.properties.id.type).to.eql(\"string\", \"Failed at properties line id.type.\");\r",
							"        \r",
							"    pm.expect(jsonData.properties.nodeSystemType.required).to.eql(true, \"Failed at properties line nodeSystemType.required).\");\r",
							"    pm.expect(jsonData.properties.nodeSystemType.type).to.eql(\"integer\", \"Failed at properties line nodeSystemType.type.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{url}}/v1/schemas/nodetypes/AvInterfaceHandler",
					"host": [
						"{{http}}{{env}}{{url}}"
					],
					"path": [
						"v1",
						"schemas",
						"nodetypes",
						"AvInterfaceHandler"
					]
				},
				"description": "Returns schema of the nodeType"
			},
			"response": []
		},
		{
			"name": "GET /v1/schemas/nodetypes/{nodeType}/sample Ballast",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a92ab9f4-7419-4b6b-8a90-dbd54a5a74e7",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.hasOwnProperty(\"isEmergency\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"enabled\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"caption\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"position\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"size\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"shape\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"refAddress\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"syncState\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"componentType\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"rotation\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"dayLightOrientation\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"dayLightDistance\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"dayLightOutOfRange\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"dayLightBrightness\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"dayLightOverride\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"dayLightCompRemainder\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"maxBrightness\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"minBrightness\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"comfortBrightness\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"twoStageBrightness\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"minComfortBrightness\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"comfortBrightnessRelative\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"backupPowerBrightness\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"enabledForcedOverrideBrightness\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"forcedOverrideBrightness\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"nightLight\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"luxMin\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"luxMax\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"remainingBurnIn\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"fixBaselineWattage\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"ballastNameplateWattage\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"demand\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"demandMin\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"dimmable\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"restrike\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"disableDlhv\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"daliFadeTime\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"daliFadeRate\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"daliPowerOnBrightnessLevel\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"daliSystemFailureBrightnessLevel\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"startupBehaviorType\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"startupBrightness\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"startupDuration\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"phaseCutDimmerLoadType\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"phaseCutDimmerModeType\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"previousRefAddress\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"powerCurve\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"colorTemperature\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"nodeType\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"name\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"description\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"resources\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"createdBy\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"createdDate\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"updatedBy\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"updatedDate\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"id\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"nodeSystemType\")).to.eql(true);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - total count\", function () {\r",
							"    pm.expect(Object.keys(jsonData).length).to.eql(58);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{url}}/v1/schemas/nodetypes/Ballast/sample",
					"host": [
						"{{http}}{{env}}{{url}}"
					],
					"path": [
						"v1",
						"schemas",
						"nodetypes",
						"Ballast",
						"sample"
					]
				},
				"description": "Returns a sample instance of the nodeType"
			},
			"response": []
		},
		{
			"name": "GET /v1/schemas/relationshiptypes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "75dd6efd-0393-43c7-b2dd-8690e6044762",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Response body check - relation type in swagger\", function () {\r",
							"    pm.expect(jsonData.includes(\"Contains\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"Controls\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"Hosts\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"Mapped\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"PolarisFloorContains\")).to.eql(true);\r",
							"    pm.expect(jsonData.includes(\"Templates\")).to.eql(true);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - total relation type count\", function () {\r",
							"    pm.expect(jsonData.length).to.eql(6);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{url}}/v1/schemas/relationshiptypes",
					"host": [
						"{{http}}{{env}}{{url}}"
					],
					"path": [
						"v1",
						"schemas",
						"relationshiptypes"
					]
				},
				"description": "Returns all valid relationship types"
			},
			"response": []
		},
		{
			"name": "GET /v1/schemas/relationshiptypes/{relationshipType} Contains",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "72225d8d-54ab-493d-8ab4-579787d09bda",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.type).to.eql(\"object\", \"Failed at type line.\");\r",
							"    \r",
							"    \r",
							"    pm.expect(jsonData.properties.relationType.required).to.eql(true, \"Failed at properties line relationType.required.\");\r",
							"    pm.expect(jsonData.properties.relationType.type[0]).to.eql(\"string\", \"Failed at properties line relationType.type[0].\");\r",
							"    pm.expect(jsonData.properties.relationType.type[1]).to.eql(\"null\", \"Failed at properties line relationType.type[1].\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.createdBy.required).to.eql(true, \"Failed at properties line createdBy.required.\");\r",
							"    pm.expect(jsonData.properties.createdBy.type[0]).to.eql(\"string\", \"Failed at properties line createdBy.type[0].\");\r",
							"    pm.expect(jsonData.properties.createdBy.type[1]).to.eql(\"null\", \"Failed at properties line createdBy.type[1].\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.createdDate.required).to.eql(true, \"Failed at properties line createdDate.required.\");\r",
							"    pm.expect(jsonData.properties.createdDate.type).to.eql(\"string\", \"Failed at properties line createdDate.type.\");\r",
							"        \r",
							"    pm.expect(jsonData.properties.updatedBy.required).to.eql(true, \"Failed at properties line updatedBy.required.\");\r",
							"    pm.expect(jsonData.properties.updatedBy.type[0]).to.eql(\"string\", \"Failed at properties line updatedBy.type[0].\");\r",
							"    pm.expect(jsonData.properties.updatedBy.type[1]).to.eql(\"null\", \"Failed at properties line updatedBy.type[1].\");\r",
							"            \r",
							"    pm.expect(jsonData.properties.updatedDate.required).to.eql(true, \"Failed at properties line updatedDate.required.\");\r",
							"    pm.expect(jsonData.properties.updatedDate.type[0]).to.eql(\"string\", \"Failed at properties line updatedDate.type[0].\");\r",
							"    pm.expect(jsonData.properties.updatedDate.type[1]).to.eql(\"null\", \"Failed at properties line updatedDate.type[1].\");\r",
							"        \r",
							"    pm.expect(jsonData.properties.id.required).to.eql(true, \"Failed at properties line id.required.\");\r",
							"    pm.expect(jsonData.properties.id.type).to.eql(\"string\", \"Failed at properties line id.type.\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.inNodeId.required).to.eql(true, \"Failed at properties line inNodeId.required.\");\r",
							"    pm.expect(jsonData.properties.inNodeId.type).to.eql(\"string\", \"Failed at properties line inNodeId.type.\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.outNodeId.required).to.eql(true, \"Failed at properties line outNodeId.required.\");\r",
							"    pm.expect(jsonData.properties.outNodeId.type).to.eql(\"string\", \"Failed at properties line outNodeId.type.\");\r",
							"        \r",
							"    pm.expect(jsonData.properties.inNodeType.required).to.eql(true, \"Failed at properties line inNodeType.required.\");\r",
							"    pm.expect(jsonData.properties.inNodeType.type[0]).to.eql(\"string\", \"Failed at properties line inNodeType.type[0].\");\r",
							"    pm.expect(jsonData.properties.inNodeType.type[1]).to.eql(\"null\", \"Failed at properties line inNodeType.type[1].\");\r",
							"    \r",
							"    pm.expect(jsonData.properties.outNodeType.required).to.eql(true, \"Failed at properties line outNodeType.required.\");\r",
							"    pm.expect(jsonData.properties.outNodeType.type[0]).to.eql(\"string\", \"Failed at properties line outNodeType.type[0].\");\r",
							"    pm.expect(jsonData.properties.outNodeType.type[1]).to.eql(\"null\", \"Failed at properties line outNodeType.type[1].\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{url}}/v1/schemas/relationshiptypes/Contains",
					"host": [
						"{{http}}{{env}}{{url}}"
					],
					"path": [
						"v1",
						"schemas",
						"relationshiptypes",
						"Contains"
					]
				},
				"description": "Returns schema of the specified Relationship Type"
			},
			"response": []
		},
		{
			"name": "GET /v1/schemas/relationshiptypes/{relationshipType}/sample Contains",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a92ab9f4-7419-4b6b-8a90-dbd54a5a74e7",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.hasOwnProperty(\"containsOrder\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"relationType\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"id\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"inNodeId\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"outNodeId\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"inNodeType\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"outNodeType\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"createdBy\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"createdDate\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"updatedBy\")).to.eql(true);\r",
							"    pm.expect(jsonData.hasOwnProperty(\"updatedDate\")).to.eql(true);\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Response body check - total count\", function () {\r",
							"    pm.expect(Object.keys(jsonData).length).to.eql(11);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{url}}/v1/schemas/relationshiptypes/Contains/sample",
					"host": [
						"{{http}}{{env}}{{url}}"
					],
					"path": [
						"v1",
						"schemas",
						"relationshiptypes",
						"Contains",
						"sample"
					]
				},
				"description": "Returns a sample instance of the relationship Type"
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "removed to protect privacy",
				"type": "string"
			},
			{
				"key": "username",
				"value": "removed to protect privacy",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "373afbd8-89e6-44e0-9bda-0e9576950851",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c770e33f-b556-4090-a92c-17403a891b25",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}