{
	"info": {
		"_postman_id": "9520a1df-40ed-4813-bd1e-b7de35e7cdb5",
		"name": "sanityConfigNodes",
		"description": "sanity check for BIM Config-Nodes.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET /v1/nodes !!!",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "263550bb-9e36-4fa6-8d7e-6529b2b38c44",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200, \"Sprting 3, endpoint not implemented for the Cosmos DB yet, it returns not implemented exception, i.e., 500 server error.\");\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"//var jsonData = pm.response.json();\r",
							"//pm.test(\"Response body should be empty\", function () {\r",
							"//    console.log(\"1\");\r",
							"//    console.log(jsonData.length);\r",
							"//    console.log(\"2\");\r",
							"//    console.log(JSON.parse(jsonData).length);\r",
							"//    pm.expect(jsonData.length).to.eql(0);\r",
							"//});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{url}}/v1/nodes",
					"host": [
						"{{http}}{{env}}{{url}}"
					],
					"path": [
						"v1",
						"nodes"
					]
				},
				"description": "Returns all the nodes"
			},
			"response": []
		},
		{
			"name": "POST /v1/nodes/{nodeType} TOP NODE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.node.code).to.eql(\"node1Code\");\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(postman.getEnvironmentVariable(\"node1Type\"));\r",
							"    postman.setEnvironmentVariable(\"node1Type\", jsonData.node.nodeType);\r",
							"    pm.expect(jsonData.node.name).to.eql(\"node1Name\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"node1Id\", jsonData.node.id);\r",
							"    pm.expect(jsonData.relation).to.eql(null);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1f271faa-24d8-4655-99c8-4eb86e5f707f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"code\": \"node1Code\",\r\n\t\t\"nodeType\": \"{{node1Type}}\",\r\n\t\t\"name\": \"node1Name\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{url}}/v1/nodes/{{node1Type}}",
					"host": [
						"{{http}}{{env}}{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"{{node1Type}}"
					]
				},
				"description": "Creates a new TOP node WITHOUT Relations\nTop node, input body does not need to contain relations."
			},
			"response": []
		},
		{
			"name": "GET  /v1/nodes/{nodeType}/{id} TOP NODE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.code).to.eql(\"node1Code\");\r",
							"    pm.expect(jsonData.nodeType).to.eql(pm.environment.get(\"node1Type\"));\r",
							"    pm.expect(jsonData.name).to.eql(\"node1Name\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"node1Id\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{url}}/v1/nodes/{{node1Type}}/{{node1Id}}",
					"host": [
						"{{http}}{{env}}{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"{{node1Type}}",
						"{{node1Id}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "POST /v1/nodes/{nodeType} SECOND NODE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(postman.getEnvironmentVariable(\"node2Type\"));\r",
							"    postman.setEnvironmentVariable(\"node2Type\", jsonData.node.nodeType);\r",
							"    pm.expect(jsonData.node.name).to.eql(\"node2Name\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"node2Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(postman.getEnvironmentVariable(\"relation1Type\"));\r",
							"    postman.setEnvironmentVariable(\"relation1Type\", jsonData.relation.relationType);\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"relation1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getEnvironmentVariable(\"node2Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getEnvironmentVariable(\"node1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(postman.getEnvironmentVariable(\"node2Type\"));\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(postman.getEnvironmentVariable(\"node1Type\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"{{node2Type}}\",\r\n\t\t\"name\": \"node2Name\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"{{relation1Type}}\",\r\n\t\t\"outNodeType\": \"{{node1Type}}\",\r\n\t\t\"outNodeId\": \"{{node1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{url}}/v1/nodes/{{node2Type}}",
					"host": [
						"{{http}}{{env}}{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"{{node2Type}}"
					]
				},
				"description": "Creates a new NON-TOP node with Relations"
			},
			"response": []
		},
		{
			"name": "GET  /v1/nodes/{nodeType}/{id} SECOND NODE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.nodeType).to.eql(pm.environment.get(\"node2Type\"));\r",
							"    pm.expect(jsonData.name).to.eql(\"node2Name\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"node2Id\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{url}}/v1/nodes/{{node2Type}}/{{node2Id}}",
					"host": [
						"{{http}}{{env}}{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"{{node2Type}}",
						"{{node2Id}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET  /v1/nodes/{nodeType}/{id}/relations SECOND NODE !!!",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"//pm.test(\"Response body check\", function () {\r",
							"//    var jsonData = pm.response.json();\r",
							"//    pm.expect(jsonData.values.nodes.length).to.eql(0);\r",
							"//    pm.expect(jsonData.values.relations.length).to.eql(0);\r",
							"//});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{url}}/v1/nodes/{{node2Type}}/{{node2Id}}/relations?direction=in&relationTypes={{relation1Type}}&depth=1",
					"host": [
						"{{http}}{{env}}{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"{{node2Type}}",
						"{{node2Id}}",
						"relations"
					],
					"query": [
						{
							"key": "direction",
							"value": "in"
						},
						{
							"key": "relationTypes",
							"value": "{{relation1Type}}"
						},
						{
							"key": "depth",
							"value": "1"
						}
					]
				},
				"description": "Returns list of nodes with relations"
			},
			"response": []
		},
		{
			"name": "GET  /v1/nodes/{nodeType}/{id}/relations TOP NODE RELATION",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check - node section\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.values.nodes[0].nodeType).to.eql(postman.getEnvironmentVariable(\"node2Type\"));\r",
							"    pm.expect(jsonData.values.nodes[0].name).to.eql(\"node2Name\");\r",
							"    pm.expect(jsonData.values.nodes[0].createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.values.nodes[0].id).to.eql(postman.getEnvironmentVariable(\"node2Id\"));\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.values.relations[0].relationType).to.eql(postman.getEnvironmentVariable(\"relation1Type\"));\r",
							"    pm.expect(jsonData.values.relations[0].createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.values.relations[0].id).to.eql(postman.getEnvironmentVariable(\"relation1Id\"));\r",
							"    pm.expect(jsonData.values.relations[0].inNodeType).to.eql(postman.getEnvironmentVariable(\"node2Type\"));\r",
							"    pm.expect(jsonData.values.relations[0].outNodeType).to.eql(postman.getEnvironmentVariable(\"node1Type\"));\r",
							"    pm.expect(jsonData.values.relations[0].inNodeId).to.eql(postman.getEnvironmentVariable(\"node2Id\"));\r",
							"    pm.expect(jsonData.values.relations[0].outNodeId).to.eql(postman.getEnvironmentVariable(\"node1Id\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{url}}/v1/nodes/{{node1Type}}/{{node1Id}}/relations?direction=out&relationTypes={{relation1Type}}&depth=1",
					"host": [
						"{{http}}{{env}}{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"{{node1Type}}",
						"{{node1Id}}",
						"relations"
					],
					"query": [
						{
							"key": "direction",
							"value": "out"
						},
						{
							"key": "relationTypes",
							"value": "{{relation1Type}}"
						},
						{
							"key": "depth",
							"value": "1"
						}
					]
				},
				"description": "Returns list of nodes with relations"
			},
			"response": []
		},
		{
			"name": "PUT /v1/nodes/{nodeType}/{id} SECOND NODE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "abb379ba-3f5f-4bdb-a01d-bae2efdfb989",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.dbStatus).to.eql(\"up\");\r",
							"    pm.expect(jsonData.enable3D).to.eql(true);\r",
							"    pm.expect(jsonData.enable4hrExtensionTime).to.eql(true);\r",
							"    pm.expect(jsonData.formatStrings.default).to.eql(\"%type% %refaddress%\");\r",
							"    pm.expect(jsonData.timeZone.polarisId).to.eql(\"TimeZone_Eastern_Standard_Time\");\r",
							"    pm.expect(jsonData.timeZone.offset).to.eql(-18000);\r",
							"    pm.expect(jsonData.customer).to.eql(\"customer name\");\r",
							"    pm.expect(jsonData.notes).to.eql(\"overwirte you\");\r",
							"    pm.expect(jsonData.nodeType).to.eql(pm.environment.get(\"node2Type\"));\r",
							"    pm.expect(jsonData.name).to.eql(\"node name?\");\r",
							"    pm.expect(jsonData.description).to.eql(\"node description?\");\r",
							"    pm.expect(jsonData.resources).to.eql(null);\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"node2Id\"));\r",
							"    pm.expect(jsonData.nodeSystemType).to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"dbStatus\": \"up\",\r\n\t\"enable3D\": true,\r\n\t\"enable4hrExtensionTime\": true,\r\n\t\"formatStrings\": {\r\n        \"default\": \"%type% %refaddress%\"\r\n    },\r\n    \"additionalProperties\":null,\r\n\t    \"timeZone\": {\r\n        \"PolarisId\": \"TimeZone_Eastern_Standard_Time\",\r\n        \"Offset\": -18000\r\n    },\r\n\t\"customer\": \"customer name\",\r\n\t\"notes\": \"overwirte you\",\r\n\t\"nodeType\": \"{{node2Type}}\",\r\n\t\"name\": \"node name?\",\r\n\t\"description\": \"node description?\",\r\n\t\"resources\": null,\r\n\t\"id\": \"{{node2Id}}\",\r\n\t\"nodeSystemType\": 2\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{url}}/v1/nodes/{{node2Type}}/{{node2Id}}",
					"host": [
						"{{http}}{{env}}{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"{{node2Type}}",
						"{{node2Id}}"
					]
				},
				"description": "Updates a Node"
			},
			"response": []
		},
		{
			"name": "GET  /v1/nodes/{nodeType}/{id} SECOND NODE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.dbStatus).to.eql(\"up\");\r",
							"    pm.expect(jsonData.enable3D).to.eql(true);\r",
							"    pm.expect(jsonData.enable4hrExtensionTime).to.eql(true);\r",
							"    pm.expect(jsonData.formatStrings.default).to.eql(\"%type% %refaddress%\");\r",
							"    pm.expect(jsonData.timeZone.polarisId).to.eql(\"TimeZone_Eastern_Standard_Time\");\r",
							"    pm.expect(jsonData.timeZone.offset).to.eql(-18000);\r",
							"    pm.expect(jsonData.customer).to.eql(\"customer name\");\r",
							"    pm.expect(jsonData.notes).to.eql(\"overwirte you\");\r",
							"    pm.expect(jsonData.nodeType).to.eql(pm.environment.get(\"node2Type\"));\r",
							"    pm.expect(jsonData.name).to.eql(\"node name?\");\r",
							"    pm.expect(jsonData.description).to.eql(\"node description?\");\r",
							"    pm.expect(jsonData.resources).to.eql(null);\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"node2Id\"));\r",
							"    pm.expect(jsonData.nodeSystemType).to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{url}}/v1/nodes/{{node2Type}}/{{node2Id}}",
					"host": [
						"{{http}}{{env}}{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"{{node2Type}}",
						"{{node2Id}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET  /v1/nodes/{nodeType}/{id}/relations SECOND NODE !!!",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"//pm.test(\"Response body check\", function () {\r",
							"//    var jsonData = pm.response.json();\r",
							"//    pm.expect(jsonData.code).to.eql(\"codeSanityOrganization\");\r",
							"//    pm.expect(jsonData.nodeType).to.eql(\"Organization\");\r",
							"//    pm.expect(jsonData.name).to.eql(\"sanityOrganization\");\r",
							"//    pm.expect(jsonData.createdBy).to.eql(\"system\");\r",
							"//    pm.expect(jsonData.id).to.eql(pm.environment.get(\"id\"));\r",
							"//});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{url}}/v1/nodes/{{node2Type}}/{{node2Id}}/relations?direction=in&relationTypes={{relation1Type}}&depth=1",
					"host": [
						"{{http}}{{env}}{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"{{node2Type}}",
						"{{node2Id}}",
						"relations"
					],
					"query": [
						{
							"key": "direction",
							"value": "in"
						},
						{
							"key": "relationTypes",
							"value": "{{relation1Type}}"
						},
						{
							"key": "depth",
							"value": "1"
						}
					]
				},
				"description": "Returns list of nodes with relations"
			},
			"response": []
		},
		{
			"name": "GET  /v1/nodes/{nodeType}/{id}/relations TOP NODE RELATION",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check - node section\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.values.nodes[0].nodeType).to.eql(postman.getEnvironmentVariable(\"node2Type\"));\r",
							"    pm.expect(jsonData.values.nodes[0].name).to.eql(\"node name?\");\r",
							"    pm.expect(jsonData.values.nodes[0].createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.values.nodes[0].id).to.eql(postman.getEnvironmentVariable(\"node2Id\"));\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.values.relations[0].relationType).to.eql(postman.getEnvironmentVariable(\"relation1Type\"));\r",
							"    pm.expect(jsonData.values.relations[0].createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.values.relations[0].id).to.eql(postman.getEnvironmentVariable(\"relation1Id\"));\r",
							"    pm.expect(jsonData.values.relations[0].inNodeType).to.eql(postman.getEnvironmentVariable(\"node2Type\"));\r",
							"    pm.expect(jsonData.values.relations[0].outNodeType).to.eql(postman.getEnvironmentVariable(\"node1Type\"));\r",
							"    pm.expect(jsonData.values.relations[0].inNodeId).to.eql(postman.getEnvironmentVariable(\"node2Id\"));\r",
							"    pm.expect(jsonData.values.relations[0].outNodeId).to.eql(postman.getEnvironmentVariable(\"node1Id\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{url}}/v1/nodes/{{node1Type}}/{{node1Id}}/relations?direction=out&relationTypes={{relation1Type}}&depth=1",
					"host": [
						"{{http}}{{env}}{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"{{node1Type}}",
						"{{node1Id}}",
						"relations"
					],
					"query": [
						{
							"key": "direction",
							"value": "out"
						},
						{
							"key": "relationTypes",
							"value": "{{relation1Type}}"
						},
						{
							"key": "depth",
							"value": "1"
						}
					]
				},
				"description": "Returns list of nodes with relations"
			},
			"response": []
		},
		{
			"name": "DELETE /v1/nodes/{nodeType}/{id} TOP NODE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1551f680-e5e9-46a4-b944-a39758717fec",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{url}}/v1/nodes/{{node1Type}}/{{node1Id}}?cascade=true",
					"host": [
						"{{http}}{{env}}{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"{{node1Type}}",
						"{{node1Id}}"
					],
					"query": [
						{
							"key": "cascade",
							"value": "true"
						}
					]
				},
				"description": "Deletes a node by record id"
			},
			"response": []
		},
		{
			"name": "GET  /v1/nodes/{nodeType}/{id} TOP NODE GONE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{url}}/v1/nodes/{{node1Type}}/{{node1Id}}",
					"host": [
						"{{http}}{{env}}{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"{{node1Type}}",
						"{{node1Id}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET  /v1/nodes/{nodeType}/{id} SECOND NODE GONE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{url}}/v1/nodes/{{node2Type}}/{{node2Id}}",
					"host": [
						"{{http}}{{env}}{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"{{node2Type}}",
						"{{node2Id}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET  /v1/relations/{relationType}/{id} RELATION GONE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{url}}/v1/relations/{{relation1Type}}/{{relation1Id}}",
					"host": [
						"{{http}}{{env}}{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation1Type}}",
						"{{relation1Id}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "removed to protect privacy",
				"type": "string"
			},
			{
				"key": "username",
				"value": "removed to protect privacy",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "22bc15c8-8706-4291-a8f9-9241d8905b6a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7e0df058-117c-4797-a8e6-4a75dddd1d4f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}