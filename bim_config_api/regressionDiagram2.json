{
	"info": {
		"_postman_id": "208e07bb-95be-4f4b-a19e-4f7df5b244cc",
		"name": "regressionDiagram2",
		"description": "this script is a test for GET /v1/nodes/{nodeType}/{id}/relations endpoint covers CMCF-649, 656, 719, 724, 726, 727, 729, 497",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POST Organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Organization\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OrganizationName\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Output node Id\r",
							"pm.test(\"Organization Id: \" + postman.getGlobalVariable(\"OrganizationId\"), function () {});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e1362519-3f2f-4f01-80cc-6783abbc185b",
						"exec": [
							"//capture script start time",
							"var startTime = new Date().getTime();",
							"postman.setGlobalVariable(\"StartTime\", startTime);",
							"//console.log(postman.getGlobalVariable(\"StartTime\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Organization\",\r\n\t\t\"name\": \"OrganizationName\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Organization",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Organization"
					]
				},
				"description": "Creates an Organization."
			},
			"response": []
		},
		{
			"name": "POST Organization Contains EncSystem",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"EncSystem\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"EncSystemName\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationContainsEncSystemId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"OrganizationId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"EncSystem\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Organization\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Organization Id: \" + postman.getGlobalVariable(\"OrganizationId\"), function () {});\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"Contains relation Id from Organizational to EncSystem: \" + postman.getGlobalVariable(\"OrganizationContainsEncSystemId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"EncSystem\",\r\n\t\t\"DBStatus\": \"new\",\r\n\t\t\"Enable3D\": true,\r\n\t\t\"Enable4hrExtensionTime\": false,\r\n\t\t\"FormatStrings\": {\r\n\t\t\t\"default\": \"%type% %refaddress%\",\r\n    \t\t\"FixtureModel\": \"%type% %refaddress%\"\r\n\t\t},\r\n\t\t\"TimeZone\": {\r\n    \t\t\"PolarisId\": \"TimeZone_Eastern_Standard_Time\",\r\n    \t\t\"Offset\": -180000000000\r\n\t\t},\r\n\t\t\"Name\": \"EncSystemName\",\r\n\t\t\"Customer\": \"CustomerName\",\r\n\t\t\"Notes\": \"Additional Notes\",\r\n\t\t\"SiteAddress\": \"53 street st\",\r\n\t\t\"SiteLatitude\": \"43.8563\",\r\n\t\t\"SiteLongitude\": \"-79.37784\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Organization\",\r\n\t\t\"outNodeId\": \"{{OrganizationId}}\"\r\n\t}\r\n}\r\n\r\n"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EncSystem",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EncSystem"
					]
				},
				"description": "Creates an EncSystem contained by the Organization."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains BuildingTemplate1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"BuildingTemplate\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"BuildingTemplate Name is Zone [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"BuildingTemplate1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsBuildingTemplateId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"BuildingTemplate1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"BuildingTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"BuildingTemplate Id: \" + postman.getGlobalVariable(\"BuildingTemplate1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to BuildingTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsBuildingTemplateId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"node\": {\n        \"nodeType\": \"BuildingTemplate\",\n        \"caption\": \"Zone\",\n        \"enableControllable\": true,\n        \"enableScenes\": true,\n        \"enablePC\": true,\n        \"overrideAutonomousMode\": \"Auto\",\n        \"Shape\": [\n            {\n                \"x\": 6.40148,\n                \"y\": 19.9764\n            },\n            {\n                \"x\": 6.40148,\n                \"y\": 19.9764\n            },\n            {\n                \"x\": 6.40148,\n                \"y\": 19.9764\n            }\n        ],\n        \"shapeType\": \"Rectangle\",\n        \"componentType\": 10,\n        \"pcsActivityOnly\": false,\n        \"shapeSizeX\": 10,\n        \"shapeSizeY\": 10,\n        \"shapeRadius\": 10,\n        \"ocsAutoTurnOn\": true,\n        \"ocsExtensionTime\": 60,\n        \"ocsManualUserExtensionTime\": 1200,\n        \"name\": \"BuildingTemplate Name is Zone [0064-FFFF]\",\n        \"description\": null,\n        \"resources\": null,\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\n        \"encSystemId\": null,\n        \"nodeSystemType\": 0,\n        \"createdBy\": null,\n        \"createdDate\": \"0001-01-01T00:00:00+00:00\",\n        \"updatedBy\": null,\n        \"updatedDate\": null,\n        \"externalId\": null\n    },\n    \"relation\": {\n        \"relationType\": \"Contains\",\n        \"outNodeType\": \"EncSystem\",\n        \"outNodeId\": \"{{EncSystemId}}\"\n    }\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/BuildingTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"BuildingTemplate"
					]
				},
				"description": "Creates a Building contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains CentralBatteryTemplate1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"CentralBatteryTemplate\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"CentralBatteryTemplate1Name is Backup Power Template [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"CentralBatteryTemplate1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsCentralBatteryTemplate1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"CentralBatteryTemplate1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"CentralBatteryTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"CentralBatteryTemplate Id: \" + postman.getGlobalVariable(\"CentralBatteryTemplate1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to CentralBatteryTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsCentralBatteryTemplate1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"internalId\": 0,\r\n        \"controlItemGroup\": \"ig_fixture\",\r\n        \"caption\": \"Backup Power Template\",\r\n        \"size\": {\r\n\t\t\t\t\"x\": 6.40148,\r\n\t\t\t\t\"y\": 19.9764\r\n\t\t\t},\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"componentType\": 117,\r\n        \"turnOffDelay\": 0,\r\n        \"turnOnNoMaster\": 0,\r\n        \"turnOnAlarm\": 0,\r\n        \"nodeType\": \"CentralBatteryTemplate\",\r\n        \"name\": \"CentralBatteryTemplate1Name is Backup Power Template [0064-FFFF]\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"44f22bc5-db0a-4619-91c6-84a5e6754318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-04T22:22:05.552196+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/CentralBatteryTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"CentralBatteryTemplate"
					]
				},
				"description": "Creates a Central Battery Template contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains EmergencyLuminaireTemplate1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"EmergencyLuminaireTemplate\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"EmergencyLuminaireTemplate Name is Emergency Fixture Template [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EmergencyLuminaireTemplate1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsEmergencyLuminaireTemplate1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"EmergencyLuminaireTemplate1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"EmergencyLuminaireTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"EmergencyLuminaireTemplate Id: \" + postman.getGlobalVariable(\"EmergencyLuminaireTemplate1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to EmergencyLuminaireTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsEmergencyLuminaireTemplate1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"internalId\": 0,\r\n        \"controlItemGroup\": \"ig_fixture\",\r\n        \"caption\": \"Emergency Fixture Template\",\r\n        \"size\": {\r\n\t\t\t\t\"x\": 6.40148,\r\n\t\t\t\t\"y\": 19.9764\r\n\t\t\t},\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"componentType\": 117,\r\n        \"rotation\": 0,\r\n        \"emergencyFixtureType\": \"Maintained\",\r\n        \"prolongTime\": 0,\r\n        \"xmlTemplate\": null,\r\n        \"nodeType\": \"EmergencyLuminaireTemplate\",\r\n        \"name\": \"EmergencyLuminaireTemplate Name is Emergency Fixture Template [0064-FFFF]\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-04T23:04:54.304653+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n        \"relationType\": \"Contains\",\r\n        \"outNodeType\": \"EncSystem\",\r\n        \"outNodeId\": \"{{EncSystemId}}\"\r\n    }\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EmergencyLuminaireTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EmergencyLuminaireTemplate"
					]
				},
				"description": "Creates an Emergency Luminaire Template contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains FireAlarmTemplate1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"FireAlarmTemplate\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"FireAlarmTemplate Name is FireAlarm Template [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FireAlarmTemplate1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsFireAlarmTemplate1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"FireAlarmTemplate1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"FireAlarmTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"FireAlarmTemplate Id: \" + postman.getGlobalVariable(\"FireAlarmTemplate1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to FireAlarmTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsFireAlarmTemplate1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"internalId\": 0,\r\n        \"controlItemGroup\": \"ig_fixture\",\r\n        \"caption\": \"FireAlarm Template\",\r\n        \"size\": {\r\n\t\t\t\t\"x\": 6.40148,\r\n\t\t\t\t\"y\": 19.9764\r\n\t\t\t},\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"componentType\": 117,\r\n        \"turnOffDelay\": 0,\r\n        \"turnOnNoMaster\": 0,\r\n        \"turnOnAlarm\": 0,\r\n        \"nodeType\": \"FireAlarmTemplate\",\r\n        \"name\": \"FireAlarmTemplate Name is FireAlarm Template [0064-FFFF]\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-04T23:24:26.428603+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n     \"relation\": {\r\n        \"relationType\": \"Contains\",\r\n        \"outNodeType\": \"EncSystem\",\r\n        \"outNodeId\": \"{{EncSystemId}}\"\r\n    }\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/FireAlarmTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"FireAlarmTemplate"
					]
				},
				"description": "Creates a Fire Alarm Template contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains KeypadTemplate1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"KeypadTemplate\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"KeypadTemplate Name is Programmable Controller Template [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"KeypadTemplate1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsKeypadTemplate1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"KeypadTemplate1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"KeypadTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"KeypadTemplate Id: \" + postman.getGlobalVariable(\"KeypadTemplate1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to KeypadTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsKeypadTemplate1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"internalId\": 0,\r\n        \"controlItemGroup\": \"ig_fixture\",\r\n        \"caption\": \"Programmable Controller Template\",\r\n        \"size\": {\r\n\t\t\t\t\"x\": 6.40148,\r\n\t\t\t\t\"y\": 19.9764\r\n\t\t\t},\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"componentType\": 127,\r\n        \"xmlTemplate\": null,\r\n        \"graphic\": null,\r\n        \"isLedAlwaysOn\": false,\r\n        \"pcdOffset\": null,\r\n        \"sceneOffset\": null,\r\n        \"allowDimming\": null,\r\n        \"assignToAll\": false,\r\n        \"pchType\": 0,\r\n        \"nodeType\": \"KeypadTemplate\",\r\n        \"name\": \"KeypadTemplate Name is Programmable Controller Template [0064-FFFF]\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-04T23:30:03.906927+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/KeypadTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"KeypadTemplate"
					]
				},
				"description": "Creates a Keypad Template contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains LuminaireTemplate1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"LuminaireTemplate\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"LuminaireTemplate Name is Fixture Template [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"LuminaireTemplate1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsLuminaireTemplate1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"LuminaireTemplate1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"LuminaireTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"LuminaireTemplate Id: \" + postman.getGlobalVariable(\"LuminaireTemplate1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to LuminaireTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsLuminaireTemplate1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"internalId\": 0,\r\n        \"controlItemGroup\": \"ig_fixture\",\r\n        \"caption\": \"Fixture Template\",\r\n        \"size\": {\r\n\t\t\t\t\"x\": 6.40148,\r\n\t\t\t\t\"y\": 19.9764\r\n\t\t\t},\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"componentType\": 127,\r\n        \"rotation\": 0,\r\n        \"dayLightOrientation\": 0,\r\n        \"dayLightDistance\": 0.0,\r\n        \"dayLightOutOfRange\": false,\r\n        \"dayLightBrightness\": 0,\r\n        \"dayLightOverride\": 0,\r\n        \"dayLightCompRemainder\": 0,\r\n        \"maxBrightness\": 0,\r\n        \"minBrightness\": 0,\r\n        \"backupPowerBrightness\": 0,\r\n        \"enabledForcedOverrideBrightness\": false,\r\n        \"forcedOverrideBrightness\": 0,\r\n        \"comfortBrightness\": 0,\r\n        \"minComfortBrightness\": 0,\r\n        \"comfortBrightnessRelative\": false,\r\n        \"nightLight\": false,\r\n        \"luxMin\": 0,\r\n        \"luxMax\": 0,\r\n        \"linearisations\": [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ],\r\n        \"remainingBurnIn\": 0,\r\n        \"lampExpected\": 0,\r\n        \"ballastExpected\": 0,\r\n        \"fixBaselineWattage\": 0,\r\n        \"ballastNameplateWattage\": 0,\r\n        \"demand\": 0,\r\n        \"demandMin\": 0,\r\n        \"dimmable\": true,\r\n        \"restrike\": false,\r\n        \"disableDlhv\": false,\r\n        \"daliFadeTime\": 0,\r\n        \"daliFadeRate\": 0,\r\n        \"daliPowerOnBrightnessLevel\": 0,\r\n        \"daliSystemFailureBrightnessLevel\": 0,\r\n        \"colorTemperature\": 0,\r\n        \"lampFailureReportingEnabled\": true,\r\n        \"nodeType\": \"LuminaireTemplate\",\r\n        \"name\": \"LuminaireTemplate Name is Fixture Template [0064-FFFF]\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-04T23:48:30.757015+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/LuminaireTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"LuminaireTemplate"
					]
				},
				"description": "Creates a Luminaire Template contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains OccupancySensorTemplate1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OccupancySensorTemplate\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OccupancySensorTemplate Name is Occupancy Sensor Template [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OccupancySensorTemplate1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsOccupancySensorTemplate1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OccupancySensorTemplate1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OccupancySensorTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"OccupancySensorTemplate Id: \" + postman.getGlobalVariable(\"OccupancySensorTemplate1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to OccupancySensorTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsOccupancySensorTemplate1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"internalId\": 0,\r\n        \"controlItemGroup\": \"ig_fixture\",\r\n        \"caption\": \"Occupancy Sensor Template\",\r\n        \"size\": {\r\n\t\t\t\t\"x\": 6.40148,\r\n\t\t\t\t\"y\": 19.9764\r\n\t\t\t},\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"componentType\": 127,\r\n        \"hasSwitch\": false,\r\n        \"nodeType\": \"OccupancySensorTemplate\",\r\n        \"name\": \"OccupancySensorTemplate Name is Occupancy Sensor Template [0064-FFFF]\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T00:00:39.736225+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OccupancySensorTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OccupancySensorTemplate"
					]
				},
				"description": "Creates an Occupancy Sensor Template contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains OrganizationalAreaTemplate1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OrganizationalAreaTemplate\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OrganizationalAreaTemplate Name is Zone [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalAreaTemplate1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsOrganizationalAreaTemplate1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalAreaTemplate1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OrganizationalAreaTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"OrganizationalAreaTemplate Id: \" + postman.getGlobalVariable(\"OrganizationalAreaTemplate1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to OrganizationalAreaTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsOrganizationalAreaTemplate1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"nodeType\": \"OrganizationalAreaTemplate\",\r\n        \"caption\": \"Zone\",\r\n        \"enableControllable\": true,\r\n        \"enableScenes\": true,\r\n        \"enablePC\": true,\r\n        \"overrideAutonomousMode\": \"Auto\",\r\n        \"Shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"shapeType\": \"Rectangle\",\r\n        \"componentType\": 10,\r\n        \"pcsActivityOnly\": false,\r\n        \"shapeSizeX\": 10,\r\n        \"shapeSizeY\": 10,\r\n        \"shapeRadius\": 10,\r\n        \"ocsAutoTurnOn\": true,\r\n        \"ocsExtensionTime\": 60,\r\n        \"ocsManualUserExtensionTime\": 1200,\r\n        \"name\": \"OrganizationalAreaTemplate Name is Zone [0064-FFFF]\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": null,\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": null,\r\n        \"createdDate\": \"0001-01-01T00:00:00+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n        \"relationType\": \"Contains\",\r\n        \"outNodeType\": \"EncSystem\",\r\n        \"outNodeId\": \"{{EncSystemId}}\"\r\n    }\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OrganizationalAreaTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OrganizationalAreaTemplate"
					]
				},
				"description": "Creates an Organizational Area Template contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains PartitionWallTemplate1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PartitionWallTemplate\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"PartitionWallTemplate Name is PartitionWall Template [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PartitionWallTemplate1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsPartitionWallTemplate1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"PartitionWallTemplate1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PartitionWallTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"PartitionWallTemplate Id: \" + postman.getGlobalVariable(\"PartitionWallTemplate1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to PartitionWallTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsPartitionWallTemplate1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"internalId\": 0,\r\n        \"controlItemGroup\": \"ig_fixture\",\r\n        \"caption\": \"PartitionWall Template\",\r\n        \"size\": {\r\n\t\t\t\t\"x\": 6.40148,\r\n\t\t\t\t\"y\": 19.9764\r\n\t\t\t},\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"componentType\": 127,\r\n        \"rotation\": 0,\r\n        \"nodeType\": \"PartitionWallTemplate\",\r\n        \"name\": \"PartitionWallTemplate Name is PartitionWall Template [0064-FFFF]\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T00:21:02.163406+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PartitionWallTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PartitionWallTemplate"
					]
				},
				"description": "Creates a Partition Wall Template contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains PhotoSensorTemplate1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PhotoSensorTemplate\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"PhotoSensorTemplate Name is PhotoSensor Template [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PhotoSensorTemplate1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsPhotoSensorTemplate1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"PhotoSensorTemplate1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PhotoSensorTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"PhotoSensorTemplate Id: \" + postman.getGlobalVariable(\"PhotoSensorTemplate1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to PhotoSensorTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsPhotoSensorTemplate1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"internalId\": 0,\r\n        \"controlItemGroup\": \"ig_fixture\",\r\n        \"caption\": \"PhotoSensor Template\",\r\n        \"size\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"componentType\": 127,\r\n        \"rotation\": 0,\r\n        \"dayLightOrientation\": 0,\r\n        \"dayLightDistance\": 0.0,\r\n        \"dayLightOutOfRange\": false,\r\n        \"dayLightRange\": 0.0,\r\n        \"dayLightValues\": [\r\n\t\t\t{\r\n\t\t\t\t\"M\": 0.0,\r\n\t\t\t\t\"L\": 0.0\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"M\": 0.0,\r\n\t\t\t\t\"L\": 0.0\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"M\": 0.0,\r\n\t\t\t\t\"L\": 0.0\r\n\t\t\t}\r\n\t\t],\r\n        \"photoSensorType\": \"PLCMultiPoint\",\r\n        \"nodeType\": \"PhotoSensorTemplate\",\r\n        \"name\": \"PhotoSensorTemplate Name is PhotoSensor Template [0064-FFFF]\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T00:38:33.053673+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PhotoSensorTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PhotoSensorTemplate"
					]
				},
				"description": "Creates a Photo Sensor Template contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains PlugLoadTemplate1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PlugLoadTemplate\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"PlugLoadTemplate Name is PlugLoad Template [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PlugLoadTemplate1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsPlugLoadTemplate1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"PlugLoadTemplate1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PlugLoadTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"PlugLoadTemplate Id: \" + postman.getGlobalVariable(\"PlugLoadTemplate1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to PlugLoadTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsPlugLoadTemplate1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"internalId\": 0,\r\n        \"controlItemGroup\": \"ig_fixture\",\r\n        \"caption\": \"PlugLoad Template\",\r\n        \"size\": {\r\n\t\t\t\t\"x\": 6.40148,\r\n\t\t\t\t\"y\": 19.9764\r\n\t\t},\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"componentType\": 127,\r\n        \"nightLight\": false,\r\n        \"baselineWattage\": 0,\r\n        \"wattageConsumption\": 0,\r\n        \"demand\": 0,\r\n        \"demandMin\": 0,\r\n        \"nodeType\": \"PlugLoadTemplate\",\r\n        \"name\": \"PlugLoadTemplate Name is PlugLoad Template [0064-FFFF]\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T00:44:24.217934+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PlugLoadTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PlugLoadTemplate"
					]
				},
				"description": "Creates a Plug Load Template contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains PolarisVirtualFloorTemplate1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PolarisVirtualFloorTemplate\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"PolarisVirtualFloorTemplate Name is Zone [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PolarisVirtualFloorTemplate1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsPolarisVirtualFloorTemplate1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloorTemplate1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PolarisVirtualFloorTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"PolarisVirtualFloorTemplate Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloorTemplate1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to PolarisVirtualFloorTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsPolarisVirtualFloorTemplate1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"caption\": \"Zone\",\r\n        \"enableControllable\": true,\r\n        \"enableScenes\": true,\r\n        \"enablePc\": true,\r\n        \"overrideAutonomousMode\": null,\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"shapeType\": null,\r\n        \"componentType\": 10,\r\n        \"pcsActivityOnly\": false,\r\n        \"shapeSizeX\": 0,\r\n        \"shapeSizeY\": 0,\r\n        \"shapeRadius\": 0,\r\n        \"ocsAutoTurnOn\": true,\r\n        \"ocsExtensionTime\": 60,\r\n        \"ocsManualUserExtensionTime\": 1200,\r\n        \"nodeType\": \"PolarisVirtualFloorTemplate\",\r\n        \"name\": \"PolarisVirtualFloorTemplate Name is Zone [0064-FFFF]\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T00:48:13.787689+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PolarisVirtualFloorTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PolarisVirtualFloorTemplate"
					]
				},
				"description": "Creates a Polaris Virtual Floor Template contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains ShadeTemplate1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"ShadeTemplate\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"ShadeTemplate Name is Shade Template [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"ShadeTemplate1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsShadeTemplate1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"ShadeTemplate1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"ShadeTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"ShadeTemplate Id: \" + postman.getGlobalVariable(\"ShadeTemplate1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to ShadeTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsShadeTemplate1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"internalId\": 0,\r\n        \"controlItemGroup\": null,\r\n        \"caption\": \"Shade Template\",\r\n        \"size\": {\r\n\t\t\t\t\"x\": 6.40148,\r\n\t\t\t\t\"y\": 19.9764\r\n\t\t},\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"subType\": 6,\r\n        \"rotation\": 0,\r\n        \"nodeType\": \"ShadeTemplate\",\r\n        \"name\": \"ShadeTemplate Name is Shade Template [0064-FFFF]\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T00:59:57.089725+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/ShadeTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"ShadeTemplate"
					]
				},
				"description": "Creates a Shade Template contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains TunableWhiteLuminaireTemplate1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"TunableWhiteLuminaireTemplate\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"TunableWhiteLuminaireTemplate Name is Tunable White Fixture Template [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"TunableWhiteLuminaireTemplate1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsTunableWhiteLuminaireTemplate1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"TunableWhiteLuminaireTemplate1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"TunableWhiteLuminaireTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"TunableWhiteLuminaireTemplate Id: \" + postman.getGlobalVariable(\"TunableWhiteLuminaireTemplate1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to TunableWhiteLuminaireTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsTunableWhiteLuminaireTemplate1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"internalId\": 0,\r\n        \"controlItemGroup\": \"ig_fixture\",\r\n        \"caption\": \"Tunable White Fixture Template\",\r\n        \"size\": {\r\n\t\t\t\t\"x\": 6.40148,\r\n\t\t\t\t\"y\": 19.9764\r\n\t\t\t},\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"componentType\": 127,\r\n        \"rotation\": 0,\r\n        \"dayLightOrientation\": 0,\r\n        \"dayLightDistance\": 0,\r\n        \"dayLightOutOfRange\": false,\r\n        \"dayLightBrightness\": 0,\r\n        \"dayLightOverride\": 0,\r\n        \"dayLightCompRemainder\": 0,\r\n        \"maxBrightness\": 0,\r\n        \"minBrightness\": 0,\r\n        \"backupPowerBrightness\": 0,\r\n        \"enabledForcedOverrideBrightness\": false,\r\n        \"forcedOverrideBrightness\": 0,\r\n        \"comfortBrightness\": 0,\r\n        \"minComfortBrightness\": 0,\r\n        \"comfortBrightnessRelative\": false,\r\n        \"nightLight\": false,\r\n        \"luxMin\": 0,\r\n        \"luxMax\": 0,\r\n        \"linearisations\": [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ],\r\n        \"remainingBurnIn\": 0,\r\n        \"lampExpected\": 0,\r\n        \"ballastExpected\": 0,\r\n        \"fixBaselineWattage\": 0,\r\n        \"ballastNameplateWattage\": 0,\r\n        \"demand\": 0,\r\n        \"demandMin\": 0,\r\n        \"dimmable\": true,\r\n        \"restrike\": false,\r\n        \"disableDlhv\": false,\r\n        \"daliFadeTime\": 0,\r\n        \"daliFadeRate\": 0,\r\n        \"daliPowerOnBrightnessLevel\": 0,\r\n        \"daliSystemFailureBrightnessLevel\": 0,\r\n        \"colorTemperature\": 0,\r\n        \"lampFailureReportingEnabled\": true,\r\n        \"xmlTemplate\": null,\r\n        \"nodeType\": \"TunableWhiteLuminaireTemplate\",\r\n        \"name\": \"TunableWhiteLuminaireTemplate Name is Tunable White Fixture Template [0064-FFFF]\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T01:09:53.895531+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/TunableWhiteLuminaireTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"TunableWhiteLuminaireTemplate"
					]
				},
				"description": "Creates a Tunable White Luminaire Template contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains WalcLuminaireTemplate1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"WalcLuminaireTemplate\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"WalcLuminaireTemplate Name is Fixture Template [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"WalcLuminaireTemplate1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsWalcLuminaireTemplate1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"WalcLuminaireTemplate1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"WalcLuminaireTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"WalcLuminaireTemplate Id: \" + postman.getGlobalVariable(\"WalcLuminaireTemplate1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to WalcLuminaireTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsWalcLuminaireTemplate1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"internalId\": 0,\r\n        \"controlItemGroup\": \"ig_fixture\",\r\n        \"caption\": \"Fixture Template\",\r\n        \"size\": {\r\n\t\t\t\t\"x\": 6.40148,\r\n\t\t\t\t\"y\": 19.9764\r\n\t\t},\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"componentType\": 127,\r\n        \"rotation\": 0,\r\n        \"dayLightOrientation\": 0,\r\n        \"dayLightDistance\": 0.0,\r\n        \"dayLightOutOfRange\": false,\r\n        \"dayLightBrightness\": 0,\r\n        \"dayLightOverride\": 0,\r\n        \"dayLightCompRemainder\": 0,\r\n        \"maxBrightness\": 0,\r\n        \"minBrightness\": 0,\r\n        \"backupPowerBrightness\": 0,\r\n        \"enabledForcedOverrideBrightness\": false,\r\n        \"forcedOverrideBrightness\": 0,\r\n        \"comfortBrightness\": 0,\r\n        \"minComfortBrightness\": 0,\r\n        \"comfortBrightnessRelative\": false,\r\n        \"nightLight\": false,\r\n        \"luxMin\": 0,\r\n        \"luxMax\": 0,\r\n        \"linearisations\": [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ],\r\n        \"remainingBurnIn\": 0,\r\n        \"lampExpected\": 0,\r\n        \"ballastExpected\": 0,\r\n        \"fixBaselineWattage\": 0,\r\n        \"ballastNameplateWattage\": 0,\r\n        \"demand\": 0,\r\n        \"demandMin\": 0,\r\n        \"dimmable\": true,\r\n        \"restrike\": false,\r\n        \"disableDlhv\": false,\r\n        \"daliFadeTime\": 0,\r\n        \"daliFadeRate\": 0,\r\n        \"daliPowerOnBrightnessLevel\": 0,\r\n        \"daliSystemFailureBrightnessLevel\": 0,\r\n        \"colorTemperature\": 0,\r\n        \"lampFailureReportingEnabled\": true,\r\n        \"nodeType\": \"WalcLuminaireTemplate\",\r\n        \"name\": \"WalcLuminaireTemplate Name is Fixture Template [0064-FFFF]\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T01:14:06.250671+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/WalcLuminaireTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"WalcLuminaireTemplate"
					]
				},
				"description": "Creates a Walc Luminaire Template contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains WslcLuminaireTemplate1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"WslcLuminaireTemplate\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"WslcLuminaireTemplate Name is Fixture Template [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"WslcLuminaireTemplate1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsWslcLuminaireTemplate1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"WslcLuminaireTemplate1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"WslcLuminaireTemplate\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"WslcLuminaireTemplate Id: \" + postman.getGlobalVariable(\"WslcLuminaireTemplate1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to WslcLuminaireTemplate: \" + postman.getGlobalVariable(\"EncSystemContainsWslcLuminaireTemplate1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"internalId\": 0,\r\n        \"controlItemGroup\": \"ig_fixture\",\r\n        \"caption\": \"Fixture Template\",\r\n        \"size\": {\r\n\t\t\t\t\"x\": 6.40148,\r\n\t\t\t\t\"y\": 19.9764\r\n\t\t},\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"componentType\": 127,\r\n        \"rotation\": 0,\r\n        \"dayLightOrientation\": 0,\r\n        \"dayLightDistance\": 0.0,\r\n        \"dayLightOutOfRange\": false,\r\n        \"dayLightBrightness\": 0,\r\n        \"dayLightOverride\": 0,\r\n        \"dayLightCompRemainder\": 0,\r\n        \"maxBrightness\": 0,\r\n        \"minBrightness\": 0,\r\n        \"backupPowerBrightness\": 0,\r\n        \"enabledForcedOverrideBrightness\": false,\r\n        \"forcedOverrideBrightness\": 0,\r\n        \"comfortBrightness\": 0,\r\n        \"minComfortBrightness\": 0,\r\n        \"comfortBrightnessRelative\": false,\r\n        \"nightLight\": false,\r\n        \"luxMin\": 0,\r\n        \"luxMax\": 0,\r\n        \"linearisations\": [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ],\r\n        \"remainingBurnIn\": 0,\r\n        \"lampExpected\": 0,\r\n        \"ballastExpected\": 0,\r\n        \"fixBaselineWattage\": 0,\r\n        \"ballastNameplateWattage\": 0,\r\n        \"demand\": 0,\r\n        \"demandMin\": 0,\r\n        \"dimmable\": true,\r\n        \"restrike\": false,\r\n        \"disableDlhv\": false,\r\n        \"daliFadeTime\": 0,\r\n        \"daliFadeRate\": 0,\r\n        \"daliPowerOnBrightnessLevel\": 0,\r\n        \"daliSystemFailureBrightnessLevel\": 0,\r\n        \"colorTemperature\": 0,\r\n        \"lampFailureReportingEnabled\": true,\r\n        \"nodeType\": \"WslcLuminaireTemplate\",\r\n        \"name\": \"WslcLuminaireTemplate Name is Fixture Template [0064-FFFF]\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T01:14:06.250671+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/WslcLuminaireTemplate",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"WslcLuminaireTemplate"
					]
				},
				"description": "Creates a Wslc Luminaire Template contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains Building1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Building\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Building1Name is Zone [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Building1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsBuilding1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Building1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Building\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"Building1 Id: \" + postman.getGlobalVariable(\"Building1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to Building1: \" + postman.getGlobalVariable(\"EncSystemContainsBuilding1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Building\",\r\n\t\t\"SyncState\": 2,\r\n\t\t\"Name\": \"Building1Name is Zone [0064-FFFF]\",\r\n\t\t\"Caption\": \"Zone\",\r\n\t\t\"ObjectType\": 245,\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"ZOrder\": 2,\r\n\t\t\"EnableScenes\": true,\r\n\t\t\"EnableControllable\": true,\r\n\t\t\"EnablePC\": true,\r\n\t\t\"BacNetIndex\": -1,\r\n\t\t\"ComponentType\": 10,\r\n\t\t\"PCS_ActivityOnly\": false,\r\n\t\t\"PreviousEcu\": \"13165559-9116-4921-A22B-3679BE039017\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"OcsAutoTurnOn\": true,\r\n\t\t\"TimeScheduleAutoTurnOn\": true,\r\n\t\t\"OccupancyToTurnOnSchedule\": true,\r\n\t\t\"OcsExtensionTime\": 60,\r\n\t\t\"OcsManualUserExtensionTime\": 1200,\r\n\t\t\"VacancyExtensionTime\": 60,\r\n\t\t\"TwoStageExtensionTime\": 1200,\r\n\t\t\"StandbyOffBehaviour\": \"StandbyBrightness\",\r\n\t\t\"ManualFadeToOff\": 60,\r\n\t\t\"OccupancyFadeToOff\": 1200,\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Building",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Building"
					]
				},
				"description": "Creates a Building contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains Calendar1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Calendar\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Calendar1Name is Calendar [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Calendar1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsCalendar1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Calendar1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Calendar\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"Calendar1 Id: \" + postman.getGlobalVariable(\"Calendar1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to Calendar1: \" + postman.getGlobalVariable(\"EncSystemContainsCalendar1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"syncState\": 2,\r\n        \"caption\": \"Calendar\",\r\n        \"refAddress\": 44294967295,\r\n        \"nodeType\": \"Calendar\",\r\n        \"name\": \"Calendar1Name is Calendar [0064-FFFF]\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T11:32:09.485449+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Calendar",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Calendar"
					]
				},
				"description": "Creates a Calendar contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains ContactClosureTrigger1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"ContactClosureTrigger\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"ContactClosureTrigger1Name is ContactClosureTrigger [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"ContactClosureTrigger1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsContactClosureTrigger1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"ContactClosureTrigger1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"ContactClosureTrigger\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"ContactClosureTriggerr1 Id: \" + postman.getGlobalVariable(\"ContactClosureTrigger1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to ContactClosureTrigger1: \" + postman.getGlobalVariable(\"EncSystemContainsContactClosureTrigger1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"caption\": \"ContactClosureTrigger\",\r\n        \"refAddress\": 44294967295,\r\n        \"position\": null,\r\n        \"syncState\": 2,\r\n        \"activeStateBoolValue\": false,\r\n        \"inactiveStateBoolValue\": false,\r\n        \"noCommStateBoolValue\": false,\r\n        \"unknownStateBoolValue\": false,\r\n        \"nodeType\": \"ContactClosureTrigger\",\r\n        \"name\": \"ContactClosureTrigger1Name is ContactClosureTrigger [0064-FFFF]\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"1f83f23f-6472-40bb-94d1-957789f260bd\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-09T18:25:50.030811+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/ContactClosureTrigger",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"ContactClosureTrigger"
					]
				},
				"description": "Creates a Contact Closure Trigger contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains EmergencyTestManager1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"EmergencyTestManager\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"EmergencyTestManager1Name is Emergency Test Manager []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EmergencyTestManager1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsEmergencyTestManager1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"EmergencyTestManager1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"EmergencyTestManager\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"EmergencyTestManager1 Id: \" + postman.getGlobalVariable(\"EmergencyTestManager1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to EmergencyTestManager1: \" + postman.getGlobalVariable(\"EncSystemContainsEmergencyTestManager1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"caption\": \"Emergency Test Manager\",\r\n        \"refAddress\": 44294967295,\r\n        \"testManagerType\": \"Contained\",\r\n        \"syncState\": 2,\r\n        \"nodeType\": \"EmergencyTestManager\",\r\n        \"name\": \"EmergencyTestManager1Name is Emergency Test Manager []\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T11:35:38.839129+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EmergencyTestManager",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EmergencyTestManager"
					]
				},
				"description": "Creates a Emergency Test Manager contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains EventList1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"EventList\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"EventList1Name is Event List []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EventList1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsEventList1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"EventList1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"EventList\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"EventList1 Id: \" + postman.getGlobalVariable(\"EventList1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to EventList1: \" + postman.getGlobalVariable(\"EncSystemContainsEventList1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"refAddress\": 44294967295,\r\n        \"syncState\": 2,\r\n        \"nodeType\": \"EventList\",\r\n        \"name\": \"EventList1Name is Event List []\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"1f83f23f-6472-40bb-94d1-957789f260bd\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-09T18:31:55.983511+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EventList",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EventList"
					]
				},
				"description": "Creates a Event List contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains Manager1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Manager\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Manager1Name is Wireless Manager\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Manager1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsManager1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Manager1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Manager\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"Manager1 Id: \" + postman.getGlobalVariable(\"Manager1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to Manager1: \" + postman.getGlobalVariable(\"EncSystemContainsManager1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"refAddress\": 44294967295,\r\n        \"syncState\": 2,\r\n        \"nodeType\": \"Manager\",\r\n        \"name\": \"Manager1Name is Wireless Manager\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"1f83f23f-6472-40bb-94d1-957789f260bd\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-09T18:31:55.983511+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Manager",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Manager"
					]
				},
				"description": "Creates a Manager contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains Schedule1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Schedule\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Schedule1Name is Schedule []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Schedule1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsSchedule1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Schedule1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Schedule\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"Schedule1 Id: \" + postman.getGlobalVariable(\"Schedule1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to Schedule1: \" + postman.getGlobalVariable(\"EncSystemContainsSchedule1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"syncState\": 2,\r\n        \"bacNetIndex\": -1,\r\n        \"caption\": \"Schedule\",\r\n        \"refAddress\": 44294967295,\r\n        \"nodeType\": \"Schedule\",\r\n        \"name\": \"Schedule1Name is Schedule []\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T11:40:43.368226+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Schedule",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Schedule"
					]
				},
				"description": "Creates a Schedule contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST EncSystem Contains SolarCalculator1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"SolarCalculator\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"SolarCalculator1Name is Solar Calculator []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"SolarCalculator1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EncSystemContainsSolarCalculator1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"SolarCalculator1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"SolarCalculator\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getGlobalVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"SolarCalculator1 Id: \" + postman.getGlobalVariable(\"SolarCalculator1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EncSystem to SolarCalculator1: \" + postman.getGlobalVariable(\"EncSystemContainsSolarCalculator1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"refAddress\": 44294967295,\r\n        \"syncState\": 2,\r\n        \"nodeType\": \"SolarCalculator\",\r\n        \"name\": \"SolarCalculator1Name is Solar Calculator []\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"1f83f23f-6472-40bb-94d1-957789f260bd\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-09T18:35:24.648727+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/SolarCalculator",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"SolarCalculator"
					]
				},
				"description": "Creates a Solar Calculator contained by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST Building1 Contains Floor1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Floor\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Floor1Name is New Floor\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Building1ContainsFloor1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Building1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Floor\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Building\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Building1 Id: \" + postman.getGlobalVariable(\"Building1Id\"), function () {});\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Building1 to Floor1: \" + postman.getGlobalVariable(\"Building1ContainsFloor1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Floor\",\r\n\t\t\"name\": \"Floor1Name is New Floor\",\r\n\t\t\"Caption\": \"New Floor\",\r\n\t\t\"ChangeID\": \"e792aff7-eae6-4a22-8fb7-eace30c58b98\",\r\n\t\t\"FloorLevel\": 0,\r\n\t\t\"DisplayMode\": \"ThreeD\",\r\n\t\t\"VisibleLayers\": [ 0, 1, 4, 6 ],\r\n\t\t\"ColorType\": \"FullColor\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Building\",\r\n\t\t\"outNodeId\": \"{{Building1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Floor",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Floor"
					]
				},
				"description": "Creates a Floor contained by the Building."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains PolarisVirtualFloor1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PolarisVirtualFloor\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"PolarisVirtualFloor1Name is Zone [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PolarisVirtualFloor1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsPolarisVirtualFloor1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PolarisVirtualFloor\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"PolarisVirtualFloor1 Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to PolarisVirtualFloor1: \" + postman.getGlobalVariable(\"Floor1ContainsPolarisVirtualFloor1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"node\": {\r\n    \"syncState\": 2,\r\n    \"caption\": \"Zone\",\r\n    \"refAddress\": 44294967295,\r\n    \"zOrder\": 0,\r\n    \"enableScenes\": false,\r\n    \"enableControllable\": false,\r\n    \"enablePc\": false,\r\n    \"componentType\": 0,\r\n    \"pcsActivityOnly\": false,\r\n    \"previousEcu\": null,\r\n    \"previousRefAddress\": 0,\r\n    \"ocsAutoTurnOn\": false,\r\n    \"timeScheduleAutoTurnOn\": false,\r\n    \"occupancyToTurnOnSchedule\": false,\r\n    \"ocsExtensionTime\": 0,\r\n    \"ocsManualUserExtensionTime\": 0,\r\n    \"vacancyExtensionTime\": 0,\r\n    \"twoStageExtensionTime\": 0,\r\n    \"standbyOffBehaviour\": null,\r\n    \"manualFadeToOff\": 0,\r\n    \"occupancyFadeToOff\": 0,\r\n    \"shape\": [\r\n      {\r\n        \"x\": 6.40148,\r\n        \"y\": 19.9764\r\n      },\r\n      {\r\n        \"x\": 6.40148,\r\n        \"y\": 19.9764\r\n      },\r\n      {\r\n        \"x\": 6.40148,\r\n        \"y\": 19.9764\r\n      }\r\n    ],\r\n    \"nodeType\": \"PolarisVirtualFloor\",\r\n    \"name\": \"PolarisVirtualFloor1Name is Zone [0064-FFFF]\",\r\n    \"description\": null,\r\n    \"resources\": null,\r\n    \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n    \"encSystemId\": \"1f83f23f-6472-40bb-94d1-957789f260bd\",\r\n    \"nodeSystemType\": 0,\r\n    \"createdBy\": \"root\",\r\n    \"createdDate\": \"2019-07-10T20:36:28.675748+00:00\",\r\n    \"updatedBy\": null,\r\n    \"updatedDate\": null,\r\n    \"externalId\": null\r\n  },\r\n  \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PolarisVirtualFloor",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PolarisVirtualFloor"
					]
				},
				"description": "Creates a Polaris Virtual Floor contained by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains CentralBattery1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"CentralBattery\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"CentralBattery1Name is CentralBattery []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"CentralBattery1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsCentralBattery1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"CentralBattery1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"CentralBattery\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"CentralBattery1 Id: \" + postman.getGlobalVariable(\"CentralBattery1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to CentralBattery1: \" + postman.getGlobalVariable(\"Floor1ContainsCentralBattery1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"caption\": \"CentralBattery\",\r\n        \"position\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"enabled\": true,\r\n        \"size\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"refAddress\": 44294967295,\r\n        \"syncState\": 2,\r\n        \"turnOffDelay\": 0,\r\n        \"turnOnNoMaster\": 0,\r\n        \"turnOnAlarm\": 0,\r\n        \"turnOnNoComs\": 0,\r\n        \"invertInputSignal\": false,\r\n        \"nodeType\": \"CentralBattery\",\r\n        \"name\": \"CentralBattery1Name is CentralBattery []\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T14:26:26.400345+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/CentralBattery",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"CentralBattery"
					]
				},
				"description": "Creates a Central Battery contained by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains EmergencyInverter1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"EmergencyInverter\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"EmergencyInverter1Name is Inverter []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EmergencyInverter1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsEmergencyInverter1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"EmergencyInverter1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"EmergencyInverter\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"EmergencyInverter1 Id: \" + postman.getGlobalVariable(\"EmergencyInverter1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to EmergencyInverter1: \" + postman.getGlobalVariable(\"Floor1ContainsEmergencyInverter1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"enabled\": true,\r\n        \"caption\": \"Inverter\",\r\n        \"position\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"size\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"refAddress\": 44294967295,\r\n        \"syncState\": 2,\r\n        \"nodeType\": \"EmergencyInverter\",\r\n        \"name\": \"EmergencyInverter1Name is Inverter []\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T14:23:28.709502+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EmergencyInverter",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EmergencyInverter"
					]
				},
				"description": "Creates an EmergencyInverter contained by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains EmergencyLuminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"EmergencyLuminaire\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"EmergencyLuminaire1Name is EmergencyFixture []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EmergencyLuminaire1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsEmergencyLuminaire1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"EmergencyLuminaire1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"EmergencyLuminaire\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"EmergencyLuminaire1 Id: \" + postman.getGlobalVariable(\"EmergencyLuminaire1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to EmergencyLuminaire1: \" + postman.getGlobalVariable(\"Floor1ContainsEmergencyLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"isEmergency\": false,\r\n        \"enabled\": true,\r\n        \"caption\": \"EmergencyFixture\",\r\n        \"position\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"size\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"componentType\": 127,\r\n        \"refAddress\": 44294967295,\r\n        \"syncState\": 2,\r\n        \"rotation\": 0,\r\n        \"emergencyFixtureType\": null,\r\n        \"previousRefAddress\": 44294967295,\r\n        \"prolongTimer\": 0,\r\n        \"nodeType\": \"EmergencyLuminaire\",\r\n        \"name\": \"EmergencyLuminaire1Name is EmergencyFixture []\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T14:16:16.26414+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EmergencyLuminaire",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EmergencyLuminaire"
					]
				},
				"description": "Creates a Emergency Luminaire contained by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains FireAlarm1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"FireAlarm\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"FireAlarm1Name is FireAlarm []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FireAlarm1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsFireAlarm1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"FireAlarm1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"FireAlarm\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"FireAlarm1 Id: \" + postman.getGlobalVariable(\"FireAlarm1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to FireAlarm1: \" + postman.getGlobalVariable(\"Floor1ContainsFireAlarm1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"enabled\": true,\r\n        \"caption\": \"FireAlarm\",\r\n        \"position\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"size\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"refAddress\": 44294967295,\r\n        \"syncState\": 2,\r\n        \"bacNetIndex\": 0,\r\n        \"turnOffDelay\": 0,\r\n        \"turnOnNoMaster\": 0,\r\n        \"turnOnAlarm\": 0,\r\n        \"turnOnNoComs\": 0,\r\n        \"invertInputSignal\": false,\r\n        \"nodeType\": \"FireAlarm\",\r\n        \"name\": \"FireAlarm1Name is FireAlarm []\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T14:39:34.950331+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/FireAlarm",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"FireAlarm"
					]
				},
				"description": "Creates a Fire Alarm contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains Keypad1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Keypad\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Keypad1Name is Programmable Controller []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Keypad1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsKeypad1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Keypad1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Keypad\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"Keypad1 Id: \" + postman.getGlobalVariable(\"Keypad1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to Keypad1: \" + postman.getGlobalVariable(\"Floor1ContainsKeypad1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Keypad\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"Keypad1Name is Programmable Controller []\",\r\n\t\t\"Caption\": \"Programmable Controller\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t  \"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t  },\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Locked\": false\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Keypad",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Keypad"
					]
				},
				"description": "Creates a Keypad contained by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains Luminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Luminaire1Name is Fixture []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Luminaire1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsLuminaire1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Luminaire1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"Luminaire1 Id: \" + postman.getGlobalVariable(\"Luminaire1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to Luminaire1: \" + postman.getGlobalVariable(\"Floor1ContainsLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Luminaire\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"Luminaire1Name is Fixture []\",\r\n\t\t\"Caption\": \"Fixture\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Rotation\": 0,\r\n\t\t\"DayLightOrientation\": 0,\r\n\t\t\"DayLightDistance\": 0.0,\r\n\t\t\"DayLightOutOfRange\": false,\r\n\t\t\"DayLightBrightness\": 0,\r\n\t\t\"DayLightOverride\": 0,\r\n\t\t\"DayLightCompRemainder\": 0,\r\n\t\t\"MaxBrightness\": 0,\r\n\t\t\"MinBrightness\": 0,\r\n\t\t\"ComfortBrightness\": 0,\r\n\t\t\"TwoStageBrightness\": 0,\r\n\t\t\"MinComfortBrightness\": 0,\r\n\t\t\"ComfortBrightnessRelative\": false,\r\n\t\t\"BackupPowerBrightness\": 0,\r\n\t\t\"EnabledForcedOverrideBrightness\": false,\r\n\t\t\"ForcedOverrideBrightness\": 0,\r\n\t\t\"NightLight\": false,\r\n\t\t\"LuxMin\": 0,\r\n\t\t\"LuxMax\": 0,\r\n\t\t\"RemainingBurnIn\": 0,\r\n\t\t\"FixBaselineWattage\": 0,\r\n\t\t\"BallastNameplateWattage\": 0,\r\n\t\t\"Demand\": 0,\r\n\t\t\"DemandMin\": 0,\r\n\t\t\"Dimmable\": true,\r\n\t\t\"Restrike\": false,\r\n\t\t\"DisableDLHV\": false,\r\n\t\t\"DaliFadeTime\": 0,\r\n\t\t\"DaliFadeRate\": 0,\r\n\t\t\"DaliPowerOnBrightnessLevel\": 0,\r\n\t\t\"DaliSystemFailureBrightnessLevel\": 0,\r\n\t\t\"StartupBehaviorType\": \"NoChanges\",\r\n\t\t\"StartupBrightness\": 0,\r\n\t\t\"StartupDuration\": 0,\r\n\t\t\"PhaseCutDimmerLoadType\": \"LeadingTrailing\",\r\n\t\t\"PhaseCutDimmerModeType\": \"Trailing\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"PowerCurve\": [0.0,0.0,0.0],\r\n\t\t\"ColorTemperature\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Luminaire",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Luminaire"
					]
				},
				"description": "Creates a Luminaire contained by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains Manager1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Manager\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Manager1Name is Wireless Manager [0064]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Manager1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsManager1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Manager1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Manager\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"Manager1 Id: \" + postman.getGlobalVariable(\"Manager1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to Manager1: \" + postman.getGlobalVariable(\"Floor1ContainsManager1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"caption\": \"Wireless Manager\",\r\n        \"position\": null,\r\n        \"ipAddress\": \"10.215.20.210\",\r\n        \"addressOffset\": 100,\r\n        \"syncState\": 2,\r\n        \"portCommunication\": 4533,\r\n        \"isLocked\": false,\r\n        \"mapped\": true,\r\n        \"hardwareArchitecture\": \"ZigBee\",\r\n        \"bacNetDeviceName\": \"Bac1\",\r\n        \"bacNetDeviceId\": 0,\r\n        \"bacNetNetworkAddress\": \"192.168.0.2\",\r\n        \"bacNetSubnetmask\": \"255.255.0.0\",\r\n        \"bacNetPort\": 4500,\r\n        \"bacNetEnabled\": false,\r\n        \"bacNetExportScheduler\": false,\r\n        \"bacNetExportAllEcus\": false,\r\n        \"bacNetSyncState\": 2,\r\n        \"foreignDeviceEnabled\": false,\r\n        \"bbmdIpAddress\": \"192.168.0.3\",\r\n        \"bbmdPort\": 47808,\r\n        \"fdRegistrationTtl\": 1800,\r\n        \"fdRegistrationTtw\": 30000,\r\n        \"fdRegistrationRetries\": 3,\r\n        \"wLanAddress\": \"192.168.0.4\",\r\n        \"wLanNetmask\": \"255.255.0.0\",\r\n        \"wLanSsid\": \"WirelessEncelium\",\r\n        \"wLanPassword\": \"password\",\r\n        \"wLanHwAddr\": null,\r\n        \"wLanMasterHwAddr\": null,\r\n        \"wLanDhcp\": false,\r\n        \"wLanSyncState\": 2,\r\n        \"wLanRoamingHwAddr\": null,\r\n        \"wLanDhcpRange\": null,\r\n        \"wLanDhcpLeaseTime\": 10000,\r\n        \"wLanChannel\": 4,\r\n        \"tenantIp\": \"192.168.0.5\",\r\n        \"tenantSubnet\": \"255.255.0.0\",\r\n        \"tenantDhcp\": false,\r\n        \"tenantGateway\": \"192.168.0.6\",\r\n        \"enceliumIp\": \"192.168.0.7\",\r\n        \"enceliumSubnet\": \"255.255.0.0\",\r\n        \"enceliumGateway\": \"192.168.0.8\",\r\n        \"enceliumDhcp\": false,\r\n        \"dnsServers\": null,\r\n        \"dnsDomain\": null,\r\n        \"forcedOutOfService\": false,\r\n        \"masterEcu\": false,\r\n        \"publicKey\": null,\r\n        \"lastScan\": null,\r\n        \"nodeType\": \"Manager\",\r\n        \"name\": \"Manager1Name is Wireless Manager [0064]\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T11:49:28.497905+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Manager",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Manager"
					]
				},
				"description": "Creates a Manager contained by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains OccupancySensor1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OccupancySensor\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OccupancySensor1Name is Occupancy Sensor []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OccupancySensor1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsOccupancySensor1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OccupancySensor1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OccupancySensor\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"OccupancySensor1 Id: \" + postman.getGlobalVariable(\"OccupancySensor1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to OccupancySensor1: \" + postman.getGlobalVariable(\"Floor1ContainsOccupancySensor1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"OccupancySensor\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"OccupancySensor1Name is Occupancy Sensor []\",\r\n\t\t\"Caption\": \"Occupancy Sensor\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"HasSwitch\": false,\r\n\t\t\"Disabled\": false\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OccupancySensor",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OccupancySensor"
					]
				},
				"description": "Creates an Occupancy Sensor contained by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains OrganizationalArea1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OrganizationalArea1Name is Zone [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsOrganizationalArea1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea1 Id: \" + postman.getGlobalVariable(\"OrganizationalArea1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to OrganizationalArea1: \" + postman.getGlobalVariable(\"Floor1ContainsOrganizationalArea1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"OrganizationalArea\",\r\n\t\t\"SyncState\": 2,\r\n\t\t\"Name\": \"OrganizationalArea1Name is Zone [0064-FFFF]\",\r\n\t\t\"Caption\": \"Zone\",\r\n\t\t\"ObjectType\": 245,\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"ZOrder\": 2,\r\n\t\t\"EnableScenes\": true,\r\n\t\t\"EnableControllable\": true,\r\n\t\t\"EnablePC\": true,\r\n\t\t\"BacNetIndex\": -1,\r\n\t\t\"ComponentType\": 10,\r\n\t\t\"PCS_ActivityOnly\": false,\r\n\t\t\"PreviousEcu\": \"13165559-9116-4921-A22B-3679BE039017\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"OcsAutoTurnOn\": true,\r\n\t\t\"TimeScheduleAutoTurnOn\": true,\r\n\t\t\"OccupancyToTurnOnSchedule\": true,\r\n\t\t\"OcsExtensionTime\": 60,\r\n\t\t\"OcsManualUserExtensionTime\": 1200,\r\n\t\t\"VacancyExtensionTime\": 60,\r\n\t\t\"TwoStageExtensionTime\": 1200,\r\n\t\t\"StandbyOffBehaviour\": \"StandbyBrightness\",\r\n\t\t\"ManualFadeToOff\": 60,\r\n\t\t\"OccupancyFadeToOff\": 1200,\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OrganizationalArea",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OrganizationalArea"
					]
				},
				"description": "Creates an Organizational Area contained by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains OrganizationalArea2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OrganizationalArea2Name is Zone [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea2Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsOrganizationalArea2Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea2Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea2 Id: \" + postman.getGlobalVariable(\"OrganizationalArea2Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to OrganizationalArea2: \" + postman.getGlobalVariable(\"Floor1ContainsOrganizationalArea2Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"OrganizationalArea\",\r\n\t\t\"SyncState\": 2,\r\n\t\t\"Name\": \"OrganizationalArea2Name is Zone [0064-FFFF]\",\r\n\t\t\"Caption\": \"Zone\",\r\n\t\t\"ObjectType\": 245,\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"ZOrder\": 2,\r\n\t\t\"EnableScenes\": true,\r\n\t\t\"EnableControllable\": true,\r\n\t\t\"EnablePC\": true,\r\n\t\t\"BacNetIndex\": -1,\r\n\t\t\"ComponentType\": 10,\r\n\t\t\"PCS_ActivityOnly\": false,\r\n\t\t\"PreviousEcu\": \"13165559-9116-4921-A22B-3679BE039017\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"OcsAutoTurnOn\": true,\r\n\t\t\"TimeScheduleAutoTurnOn\": true,\r\n\t\t\"OccupancyToTurnOnSchedule\": true,\r\n\t\t\"OcsExtensionTime\": 60,\r\n\t\t\"OcsManualUserExtensionTime\": 1200,\r\n\t\t\"VacancyExtensionTime\": 60,\r\n\t\t\"TwoStageExtensionTime\": 1200,\r\n\t\t\"StandbyOffBehaviour\": \"StandbyBrightness\",\r\n\t\t\"ManualFadeToOff\": 60,\r\n\t\t\"OccupancyFadeToOff\": 1200,\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/OrganizationalArea",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"OrganizationalArea"
					]
				},
				"description": "Creates another Organizational Area contained by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains PartitionWall1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PartitionWall\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"PartitionWall1Name is Partion Wall []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PartitionWall1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsPartitionWall1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"PartitionWall1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PartitionWall\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"PartitionWall1 Id: \" + postman.getGlobalVariable(\"PartitionWall1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to PartitionWall1: \" + postman.getGlobalVariable(\"Floor1ContainsPartitionWall1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"PartitionWall\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"PartitionWall1Name is Partion Wall []\",\r\n\t\t\"Caption\": \"Partition Wall\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Rotation\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PartitionWall",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PartitionWall"
					]
				},
				"description": "Creates a Partition Wall contained by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains PhotoSensor1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PhotoSensor\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"PhotoSensor1Name is Photo Sensor []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PhotoSensor1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsPhotoSensor1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"PhotoSensor1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PhotoSensor\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"PhotoSensor1 Id: \" + postman.getGlobalVariable(\"PhotoSensor1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to PhotoSensor1: \" + postman.getGlobalVariable(\"Floor1ContainsPhotoSensor1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"enabled\": true,\r\n        \"caption\": \"Photo Sensor\",\r\n        \"position\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"size\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"refAddress\": 44294967295,\r\n        \"syncState\": 2,\r\n        \"bacNetIndex\": 0,\r\n        \"componentType\": 127,\r\n        \"dayLightOrientation\": 0,\r\n        \"dayLightDistance\": 0,\r\n        \"dayLightOutOfRange\": false,\r\n        \"dayLightRange\": 0,\r\n        \"dayLightValues\": null,\r\n        \"photoSensorType\": null,\r\n        \"disabled\": false,\r\n        \"nodeType\": \"PhotoSensor\",\r\n        \"name\": \"PhotoSensor1Name is Photo Sensor []\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T13:43:19.208046+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PhotoSensor",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PhotoSensor"
					]
				},
				"description": "Creates a Photo Sensor contained by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains PhysicalLoadMeter1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PhysicalLoadMeter\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"PhysicalLoadMeter1Name is EnergyDevice [0064-FFFF]\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PhysicalLoadMeter1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsPhysicalLoadMeter1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"PhysicalLoadMeter1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PhysicalLoadMeter\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"PhysicalLoadMeter1 Id: \" + postman.getGlobalVariable(\"PhysicalLoadMeter1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to PhysicalLoadMeter1: \" + postman.getGlobalVariable(\"Floor1ContainsPhysicalLoadMeter1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"caption\": \"EnergyDevice\",\r\n        \"refAddress\": 44294967295,\r\n        \"moduleAddress\": null,\r\n        \"senseInterval\": 0,\r\n        \"position\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"size\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"syncState\": 2,\r\n        \"energyData\": null,\r\n        \"nodeType\": \"PhysicalLoadMeter\",\r\n        \"name\": \"PhysicalLoadMeter1Name is EnergyDevice [0064-FFFF]\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T14:36:01.903921+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PhysicalLoadMeter",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PhysicalLoadMeter"
					]
				},
				"description": "Creates a Physical Load Meter contained by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains PlugLoad1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PlugLoad\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"PlugLoad1Name is Plug Load []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PlugLoad1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsPlugLoad1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"PlugLoad1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PlugLoad\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"PlugLoad1 Id: \" + postman.getGlobalVariable(\"PlugLoad1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to PlugLoad1: \" + postman.getGlobalVariable(\"Floor1ContainsPlugLoad1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"PlugLoad\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"PlugLoad1Name is Plug Load []\",\r\n\t\t\"Caption\": \"Plug Load\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"NightLight\": false,\r\n\t\t\"BaselineWattage\": 0,\r\n\t\t\"WattageConsumption\": 0,\r\n\t\t\"Demand\": 0,\r\n\t\t\"DemandMin\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/PlugLoad",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"PlugLoad"
					]
				},
				"description": "Creates a Plug Load contained by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains Repeater1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Repeater\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Repeater1Name is Repeater []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Repeater1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsRepeater1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Repeater1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Repeater\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"Repeater1 Id: \" + postman.getGlobalVariable(\"Repeater1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to Repeater1: \" + postman.getGlobalVariable(\"Floor1ContainsRepeater1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"enabled\": true,\r\n        \"caption\": \"Repeater\",\r\n        \"position\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"size\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"refAddress\": 44294967295,\r\n        \"syncState\": 2,\r\n        \"componentType\": 127,\r\n        \"nodeType\": \"Repeater\",\r\n        \"name\": \"Repeater1Name is Repeater []\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T13:52:24.947287+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Repeater",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Repeater"
					]
				},
				"description": "Creates a  Repeater contained by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains Shade1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Shade\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Shade1Name is Shade []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Shade1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsShade1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Shade1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Shade\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"Shade1 Id: \" + postman.getGlobalVariable(\"Shade1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to Shade1: \" + postman.getGlobalVariable(\"Floor1ContainsShade1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"enabled\": true,\r\n        \"caption\": \"Shade\",\r\n        \"position\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"size\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"refAddress\": 44294967295,\r\n        \"syncState\": 2,\r\n        \"rotation\": 0,\r\n        \"nodeType\": \"Shade\",\r\n        \"name\": \"Shade1Name is Shade []\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T14:31:26.729971+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Shade",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Shade"
					]
				},
				"description": "Creates a Shade contained by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains TunableWhiteLuminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"TunableWhiteLuminaire\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"TunableWhiteLuminaire1Name is Fixture []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"TunableWhiteLuminaire1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsTunableWhiteLuminaire1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"TunableWhiteLuminaire1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"TunableWhiteLuminaire\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor1 Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"TunableWhiteLuminaire1 Id: \" + postman.getGlobalVariable(\"TunableWhiteLuminaire1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to TunableWhiteLuminaire1: \" + postman.getGlobalVariable(\"Floor1ContainsTunableWhiteLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"isEmergency\": false,\r\n        \"enabled\": true,\r\n        \"caption\": \"Fixture\",\r\n        \"position\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"size\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"refAddress\": 44294967295,\r\n        \"syncState\": 2,\r\n        \"componentType\": 127,\r\n        \"rotation\": 0,\r\n        \"dayLightOrientation\": 0,\r\n        \"dayLightDistance\": 0,\r\n        \"dayLightOutOfRange\": false,\r\n        \"dayLightBrightness\": 0,\r\n        \"dayLightOverride\": 0,\r\n        \"dayLightCompRemainder\": 0,\r\n        \"maxBrightness\": 0,\r\n        \"minBrightness\": 0,\r\n        \"comfortBrightness\": 0,\r\n        \"twoStageBrightness\": 0,\r\n        \"minComfortBrightness\": 0,\r\n        \"comfortBrightnessRelative\": false,\r\n        \"backupPowerBrightness\": 0,\r\n        \"enabledForcedOverrideBrightness\": false,\r\n        \"forcedOverrideBrightness\": 0,\r\n        \"nightLight\": false,\r\n        \"luxMin\": 0,\r\n        \"luxMax\": 0,\r\n        \"remainingBurnIn\": 0,\r\n        \"fixBaselineWattage\": 0,\r\n        \"ballastNameplateWattage\": 0,\r\n        \"demand\": 0,\r\n        \"demandMin\": 0,\r\n        \"dimmable\": true,\r\n        \"restrike\": false,\r\n        \"disableDlhv\": false,\r\n        \"daliFadeTime\": 0,\r\n        \"daliFadeRate\": 0,\r\n        \"daliPowerOnBrightnessLevel\": 0,\r\n        \"daliSystemFailureBrightnessLevel\": 0,\r\n        \"startupBehaviorType\": \"NoChanges\",\r\n        \"startupBrightness\": 0,\r\n        \"startupDuration\": 0,\r\n        \"phaseCutDimmerLoadType\": \"LeadingTrailing\",\r\n        \"phaseCutDimmerModeType\": \"Trailing\",\r\n        \"previousRefAddress\": 44294967295,\r\n        \"powerCurve\": [0.0,0.0,0.0],\r\n        \"colorTemperature\": 0,\r\n        \"nodeType\": \"TunableWhiteLuminaire\",\r\n        \"name\": \"TunableWhiteLuminaire1Name is Fixture []\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T14:05:20.185615+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/TunableWhiteLuminaire",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"TunableWhiteLuminaire"
					]
				},
				"description": "Creates a Tunable White Luminaire contained by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains WalcLuminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"WalcLuminaire\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"WalcLuminaire1Name is Fixture []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"WalcLuminaire1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsWalcLuminaire1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"WalcLuminaire1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"WalcLuminaire\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"WalcLuminaire1 Id: \" + postman.getGlobalVariable(\"WalcLuminaire1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to WalcLuminaire1: \" + postman.getGlobalVariable(\"Floor1ContainsWalcLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"WalcLuminaire\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"WalcLuminaire1Name is Fixture []\",\r\n\t\t\"Caption\": \"Fixture\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Rotation\": 0,\r\n\t\t\"DayLightOrientation\": 0,\r\n\t\t\"DayLightDistance\": 0.0,\r\n\t\t\"DayLightOutOfRange\": false,\r\n\t\t\"DayLightBrightness\": 0,\r\n\t\t\"DayLightOverride\": 0,\r\n\t\t\"DayLightCompRemainder\": 0,\r\n\t\t\"MaxBrightness\": 0,\r\n\t\t\"MinBrightness\": 0,\r\n\t\t\"ComfortBrightness\": 0,\r\n\t\t\"TwoStageBrightness\": 0,\r\n\t\t\"MinComfortBrightness\": 0,\r\n\t\t\"ComfortBrightnessRelative\": false,\r\n\t\t\"BackupPowerBrightness\": 0,\r\n\t\t\"EnabledForcedOverrideBrightness\": false,\r\n\t\t\"ForcedOverrideBrightness\": 0,\r\n\t\t\"NightLight\": false,\r\n\t\t\"LuxMin\": 0,\r\n\t\t\"LuxMax\": 0,\r\n\t\t\"RemainingBurnIn\": 0,\r\n\t\t\"FixBaselineWattage\": 0,\r\n\t\t\"BallastNameplateWattage\": 0,\r\n\t\t\"Demand\": 0,\r\n\t\t\"DemandMin\": 0,\r\n\t\t\"Dimmable\": true,\r\n\t\t\"Restrike\": false,\r\n\t\t\"DisableDLHV\": false,\r\n\t\t\"DaliFadeTime\": 0,\r\n\t\t\"DaliFadeRate\": 0,\r\n\t\t\"DaliPowerOnBrightnessLevel\": 0,\r\n\t\t\"DaliSystemFailureBrightnessLevel\": 0,\r\n\t\t\"StartupBehaviorType\": \"NoChanges\",\r\n\t\t\"StartupBrightness\": 0,\r\n\t\t\"StartupDuration\": 0,\r\n\t\t\"PhaseCutDimmerLoadType\": \"LeadingTrailing\",\r\n\t\t\"PhaseCutDimmerModeType\": \"LeadingTrailing\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"PowerCurve\": [0.0,0.0,0.0],\r\n\t\t\"ColorTemperature\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor1\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/WalcLuminaire",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"WalcLuminaire"
					]
				},
				"description": "Creates a Walc Luminaire contained by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Floor1 Contains WslcLuminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"WslcLuminaire\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"WslcLuminaire1Name is Fixture []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"WslcLuminaire1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Floor1ContainsWslcLuminaire1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"WslcLuminaire1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Floor1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"WslcLuminaire\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getGlobalVariable(\"Floor1Id\"), function () {});\r",
							"pm.test(\"WslcLuminaire1 Id: \" + postman.getGlobalVariable(\"WslcLuminaire1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Floor1 to WslcLuminaire1: \" + postman.getGlobalVariable(\"Floor1ContainsWslcLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"WslcLuminaire\",\r\n\t\t\"IsEmergency\": false,\r\n\t\t\"ObjectType\": 264,\r\n\t\t\"Enabled\": true,\r\n\t\t\"Name\": \"WslcLuminaire1Name is Fixture []\",\r\n\t\t\"Caption\": \"Fixture\",\r\n\t\t\"Position\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Size\": {\r\n\t\t\t\"x\": 6.40148,\r\n\t\t\t\"y\": 19.9764\r\n\t\t},\r\n\t\t\"Shape\": [\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t  \"x\": 6.40148,\r\n\t\t\t  \"y\": 19.9764\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"RefAddress\": 44294967295,\r\n\t\t\"SyncState\": 2,\r\n\t\t\"gbAddress\": 0,\r\n\t\t\"BacNetIndex\": 0,\r\n\t\t\"ComponentType\": 127,\r\n\t\t\"Rotation\": 0,\r\n\t\t\"DayLightOrientation\": 0,\r\n\t\t\"DayLightDistance\": 0.0,\r\n\t\t\"DayLightOutOfRange\": false,\r\n\t\t\"DayLightBrightness\": 0,\r\n\t\t\"DayLightOverride\": 0,\r\n\t\t\"DayLightCompRemainder\": 0,\r\n\t\t\"MaxBrightness\": 0,\r\n\t\t\"MinBrightness\": 0,\r\n\t\t\"ComfortBrightness\": 0,\r\n\t\t\"TwoStageBrightness\": 0,\r\n\t\t\"MinComfortBrightness\": 0,\r\n\t\t\"ComfortBrightnessRelative\": false,\r\n\t\t\"BackupPowerBrightness\": 0,\r\n\t\t\"EnabledForcedOverrideBrightness\": false,\r\n\t\t\"ForcedOverrideBrightness\": 0,\r\n\t\t\"NightLight\": false,\r\n\t\t\"LuxMin\": 0,\r\n\t\t\"LuxMax\": 0,\r\n\t\t\"RemainingBurnIn\": 0,\r\n\t\t\"FixBaselineWattage\": 0,\r\n\t\t\"BallastNameplateWattage\": 0,\r\n\t\t\"Demand\": 0,\r\n\t\t\"DemandMin\": 0,\r\n\t\t\"Dimmable\": true,\r\n\t\t\"Restrike\": false,\r\n\t\t\"DisableDLHV\": false,\r\n\t\t\"DaliFadeTime\": 0,\r\n\t\t\"DaliFadeRate\": 0,\r\n\t\t\"DaliPowerOnBrightnessLevel\": 0,\r\n\t\t\"DaliSystemFailureBrightnessLevel\": 0,\r\n\t\t\"StartupBehaviorType\": \"NoChanges\",\r\n\t\t\"StartupBrightness\": 0,\r\n\t\t\"StartupDuration\": 0,\r\n\t\t\"PhaseCutDimmerLoadType\": \"LeadingTrailing\",\r\n\t\t\"PhaseCutDimmerModeType\": \"LeadingTrailing\",\r\n\t\t\"PreviousRefAddress\": 44294967295,\r\n\t\t\"PowerCurve\": [0.0,0.0,0.0],\r\n\t\t\"ColorTemperature\": 0\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Floor1\",\r\n\t\t\"outNodeId\": \"{{Floor1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/WslcLuminaire",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"WslcLuminaire"
					]
				},
				"description": "Creates a Wslc Luminaire contained by the Floor."
			},
			"response": []
		},
		{
			"name": "POST PolarisVirtualFloor1 PolarisFloorContains CentralBattery1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"PolarisFloorContains\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsCentralBattery1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"CentralBattery1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"CentralBattery\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PolarisVirtualFloor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"PolarisVirtualFloor1 Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"), function () {});\r",
							"pm.test(\"CentralBattery1 Id: \" + postman.getGlobalVariable(\"CentralBattery1Id\"), function () {});\r",
							"pm.test(\"PolarisFloorContains relation Id from PolarisVirtualFloor1 to CentralBattery1: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsCentralBattery1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"relationType\": \"PolarisFloorContains\",\r\n\t\"inNodeId\": \"{{CentralBattery1Id}}\",\r\n\t\"inNodeType\": \"CentralBattery\",\r\n\t\"outNodeId\": \"{{PolarisVirtualFloor1Id}}\",\r\n\t\"outNodeType\": \"PolarisVirtualFloor\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/PolarisFloorContains",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"PolarisFloorContains"
					]
				},
				"description": "Creates a Central Battery contained by the Polaris Virtual Floor."
			},
			"response": []
		},
		{
			"name": "POST PolarisVirtualFloor1 PolarisFloorContains EmergencyInverter1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check",
							"pm.test(\"Response code check\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"//Response body check - relation section",
							"pm.test(\"Response body check - relation section\", function() {",
							"    pm.expect(jsonData.relationType).to.eql(\"PolarisFloorContains\");",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");",
							"    pm.expect(jsonData.id).to.not.eql(null);",
							"    postman.setGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsEmergencyInverter1Id\", jsonData.id);",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"EmergencyInverter1Id\"));",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"));",
							"    pm.expect(jsonData.inNodeType).to.eql(\"EmergencyInverter\");",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PolarisVirtualFloor\");",
							"});",
							"",
							"//Output node and relation Ids",
							"pm.test(\"PolarisVirtualFloor1 Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"), function() {});",
							"pm.test(\"EmergencyInverter1 Id: \" + postman.getGlobalVariable(\"EmergencyInverter1Id\"), function() {});",
							"pm.test(\"PolarisFloorContains relation Id from PolarisVirtualFloor1 to EmergencyInverter1: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsEmergencyInverter1Id\"), function() {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"relationType\": \"PolarisFloorContains\",\r\n\t\"inNodeId\": \"{{EmergencyInverter1Id}}\",\r\n\t\"inNodeType\": \"EmergencyInverter\",\r\n\t\"outNodeId\": \"{{PolarisVirtualFloor1Id}}\",\r\n\t\"outNodeType\": \"PolarisVirtualFloor\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/PolarisFloorContains",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"PolarisFloorContains"
					]
				},
				"description": "Creates an Emergency Inverter contained by the Polaris Virtual Floor."
			},
			"response": []
		},
		{
			"name": "POST PolarisVirtualFloor1 PolarisFloorContains Luminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check",
							"pm.test(\"Response code check\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"//Response body check - relation section",
							"pm.test(\"Response body check - relation section\", function() {",
							"    pm.expect(jsonData.relationType).to.eql(\"PolarisFloorContains\");",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");",
							"    pm.expect(jsonData.id).to.not.eql(null);",
							"    postman.setGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsLuminaire1Id\", jsonData.id);",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"Luminaire1Id\"));",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"));",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Luminaire\");",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PolarisVirtualFloor\");",
							"});",
							"",
							"//Output node and relation Ids",
							"pm.test(\"PolarisVirtualFloor1 Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"), function() {});",
							"pm.test(\"Luminaire1 Id: \" + postman.getGlobalVariable(\"Luminaire1Id\"), function() {});",
							"pm.test(\"PolarisFloorContains relation Id from PolarisVirtualFloor1 to Luminaire1: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsLuminaire1Id\"), function() {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"relationType\": \"PolarisFloorContains\",\r\n\t\"inNodeId\": \"{{Luminaire1Id}}\",\r\n\t\"inNodeType\": \"Luminaire\",\r\n\t\"outNodeId\": \"{{PolarisVirtualFloor1Id}}\",\r\n\t\"outNodeType\": \"PolarisVirtualFloor\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/PolarisFloorContains",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"PolarisFloorContains"
					]
				},
				"description": "Creates a Luminaire contained by the Polaris Virtual Floor."
			},
			"response": []
		},
		{
			"name": "POST PolarisVirtualFloor1 PolarisFloorContains EmergencyLuminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check",
							"pm.test(\"Response code check\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"//Response body check - relation section",
							"pm.test(\"Response body check - relation section\", function() {",
							"    pm.expect(jsonData.relationType).to.eql(\"PolarisFloorContains\");",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");",
							"    pm.expect(jsonData.id).to.not.eql(null);",
							"    postman.setGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsEmergencyLuminaire1Id\", jsonData.id);",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"EmergencyLuminaire1Id\"));",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"));",
							"    pm.expect(jsonData.inNodeType).to.eql(\"EmergencyLuminaire\");",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PolarisVirtualFloor\");",
							"});",
							"",
							"//Output node and relation Ids",
							"pm.test(\"PolarisVirtualFloor1 Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"), function() {});",
							"pm.test(\"EmergencyLuminaire1 Id: \" + postman.getGlobalVariable(\"EmergencyLuminaire1Id\"), function() {});",
							"pm.test(\"PolarisFloorContains relation Id from PolarisVirtualFloor1 to EmergencyLuminaire1: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsEmergencyLuminaire1Id\"), function() {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"relationType\": \"PolarisFloorContains\",\r\n\t\"inNodeId\": \"{{EmergencyLuminaire1Id}}\",\r\n\t\"inNodeType\": \"EmergencyLuminaire\",\r\n\t\"outNodeId\": \"{{PolarisVirtualFloor1Id}}\",\r\n\t\"outNodeType\": \"PolarisVirtualFloor\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/PolarisFloorContains",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"PolarisFloorContains"
					]
				},
				"description": "Creates an Emergency Luminaire contained by the Polaris Virtual Floor."
			},
			"response": []
		},
		{
			"name": "POST PolarisVirtualFloor1 PolarisFloorContains FireAlarm1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check",
							"pm.test(\"Response code check\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"//Response body check - relation section",
							"pm.test(\"Response body check - relation section\", function() {",
							"    pm.expect(jsonData.relationType).to.eql(\"PolarisFloorContains\");",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");",
							"    pm.expect(jsonData.id).to.not.eql(null);",
							"    postman.setGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsFireAlarm1Id\", jsonData.id);",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"FireAlarm1Id\"));",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"));",
							"    pm.expect(jsonData.inNodeType).to.eql(\"FireAlarm\");",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PolarisVirtualFloor\");",
							"});",
							"",
							"//Output node and relation Ids",
							"pm.test(\"PolarisVirtualFloor1 Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"), function() {});",
							"pm.test(\"FireAlarm1 Id: \" + postman.getGlobalVariable(\"FireAlarm1Id\"), function() {});",
							"pm.test(\"PolarisFloorContains relation Id from PolarisVirtualFloor1 to FireAlarm1: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsFireAlarm1Id\"), function() {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"relationType\": \"PolarisFloorContains\",\r\n\t\"inNodeId\": \"{{FireAlarm1Id}}\",\r\n\t\"inNodeType\": \"FireAlarm\",\r\n\t\"outNodeId\": \"{{PolarisVirtualFloor1Id}}\",\r\n\t\"outNodeType\": \"PolarisVirtualFloor\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/PolarisFloorContains",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"PolarisFloorContains"
					]
				},
				"description": "Creates a Fire Alarm contained by the Polaris Virtual Floor."
			},
			"response": []
		},
		{
			"name": "POST PolarisVirtualFloor1 PolarisFloorContains Keypad1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check",
							"pm.test(\"Response code check\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"//Response body check - relation section",
							"pm.test(\"Response body check - relation section\", function() {",
							"    pm.expect(jsonData.relationType).to.eql(\"PolarisFloorContains\");",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");",
							"    pm.expect(jsonData.id).to.not.eql(null);",
							"    postman.setGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsFireAlarm1Id\", jsonData.id);",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"Keypad1Id\"));",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"));",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Keypad\");",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PolarisVirtualFloor\");",
							"});",
							"",
							"//Output node and relation Ids",
							"pm.test(\"PolarisVirtualFloor1 Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"), function() {});",
							"pm.test(\"Keypad1 Id: \" + postman.getGlobalVariable(\"Keypad1Id\"), function() {});",
							"pm.test(\"PolarisFloorContains relation Id from PolarisVirtualFloor1 to Keypad1: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsKeypad1Id\"), function() {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"relationType\": \"PolarisFloorContains\",\r\n\t\"inNodeId\": \"{{Keypad1Id}}\",\r\n\t\"inNodeType\": \"Keypad\",\r\n\t\"outNodeId\": \"{{PolarisVirtualFloor1Id}}\",\r\n\t\"outNodeType\": \"PolarisVirtualFloor\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/PolarisFloorContains",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"PolarisFloorContains"
					]
				},
				"description": "Creates a Keypad contained by the Polaris Virtual Floor."
			},
			"response": []
		},
		{
			"name": "POST PolarisVirtualFloor1 PolarisFloorContains Manager1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check",
							"pm.test(\"Response code check\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"//Response body check - relation section",
							"pm.test(\"Response body check - relation section\", function() {",
							"    pm.expect(jsonData.relationType).to.eql(\"PolarisFloorContains\");",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");",
							"    pm.expect(jsonData.id).to.not.eql(null);",
							"    postman.setGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsFireAlarm1Id\", jsonData.id);",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"Manager1Id\"));",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"));",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Manager\");",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PolarisVirtualFloor\");",
							"});",
							"",
							"//Output node and relation Ids",
							"pm.test(\"PolarisVirtualFloor1 Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"), function() {});",
							"pm.test(\"Manager1 Id: \" + postman.getGlobalVariable(\"Manager1Id\"), function() {});",
							"pm.test(\"PolarisFloorContains relation Id from PolarisVirtualFloor1 to Manager1: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsManager1Id\"), function() {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"relationType\": \"PolarisFloorContains\",\r\n\t\"inNodeId\": \"{{Manager1Id}}\",\r\n\t\"inNodeType\": \"Manager\",\r\n\t\"outNodeId\": \"{{PolarisVirtualFloor1Id}}\",\r\n\t\"outNodeType\": \"PolarisVirtualFloor\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/PolarisFloorContains",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"PolarisFloorContains"
					]
				},
				"description": "Creates a Manager contained by the Polaris Virtual Floor."
			},
			"response": []
		},
		{
			"name": "POST PolarisVirtualFloor1 PolarisFloorContains OccupancySensor1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check",
							"pm.test(\"Response code check\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"//Response body check - relation section",
							"pm.test(\"Response body check - relation section\", function() {",
							"    pm.expect(jsonData.relationType).to.eql(\"PolarisFloorContains\");",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");",
							"    pm.expect(jsonData.id).to.not.eql(null);",
							"    postman.setGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsOccupancySensor1Id\", jsonData.id);",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OccupancySensor1Id\"));",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"));",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OccupancySensor\");",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PolarisVirtualFloor\");",
							"});",
							"",
							"//Output node and relation Ids",
							"pm.test(\"PolarisVirtualFloor1 Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"), function() {});",
							"pm.test(\"OccupancySensor1 Id: \" + postman.getGlobalVariable(\"OccupancySensor1Id\"), function() {});",
							"pm.test(\"PolarisFloorContains relation Id from PolarisVirtualFloor1 to OccupancySensor1: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsOccupancySensor1Id\"), function() {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"relationType\": \"PolarisFloorContains\",\r\n\t\"inNodeId\": \"{{OccupancySensor1Id}}\",\r\n\t\"inNodeType\": \"OccupancySensor\",\r\n\t\"outNodeId\": \"{{PolarisVirtualFloor1Id}}\",\r\n\t\"outNodeType\": \"PolarisVirtualFloor\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/PolarisFloorContains",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"PolarisFloorContains"
					]
				},
				"description": "Creates an Occupancy Sensor contained by the Polaris Virtual Floor."
			},
			"response": []
		},
		{
			"name": "POST PolarisVirtualFloor1 PolarisFloorContains OrganizationalArea1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check",
							"pm.test(\"Response code check\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"//Response body check - relation section",
							"pm.test(\"Response body check - relation section\", function() {",
							"    pm.expect(jsonData.relationType).to.eql(\"PolarisFloorContains\");",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");",
							"    pm.expect(jsonData.id).to.not.eql(null);",
							"    postman.setGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsOrganizationalArea1Id\", jsonData.id);",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea1Id\"));",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"));",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PolarisVirtualFloor\");",
							"});",
							"",
							"//Output node and relation Ids",
							"pm.test(\"PolarisVirtualFloor1 Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"), function() {});",
							"pm.test(\"OrganizationalArea1 Id: \" + postman.getGlobalVariable(\"OrganizationalArea1Id\"), function() {});",
							"pm.test(\"PolarisFloorContains relation Id from PolarisVirtualFloor1 to OrganizationalArea1: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsOrganizationalArea1Id\"), function() {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"relationType\": \"PolarisFloorContains\",\r\n\t\"inNodeId\": \"{{OrganizationalArea1Id}}\",\r\n\t\"inNodeType\": \"OrganizationalArea\",\r\n\t\"outNodeId\": \"{{PolarisVirtualFloor1Id}}\",\r\n\t\"outNodeType\": \"PolarisVirtualFloor\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/PolarisFloorContains",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"PolarisFloorContains"
					]
				},
				"description": "Creates an Organizational Area contained by the Polaris Virtual Floor."
			},
			"response": []
		},
		{
			"name": "POST PolarisVirtualFloor1 PolarisFloorContains OrganizationalArea2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check",
							"pm.test(\"Response code check\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"//Response body check - relation section",
							"pm.test(\"Response body check - relation section\", function() {",
							"    pm.expect(jsonData.relationType).to.eql(\"PolarisFloorContains\");",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");",
							"    pm.expect(jsonData.id).to.not.eql(null);",
							"    postman.setGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsOrganizationalArea2Id\", jsonData.id);",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea2Id\"));",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"));",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PolarisVirtualFloor\");",
							"});",
							"",
							"//Output node and relation Ids",
							"pm.test(\"PolarisVirtualFloor1 Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"), function() {});",
							"pm.test(\"OrganizationalArea2 Id: \" + postman.getGlobalVariable(\"OrganizationalArea2Id\"), function() {});",
							"pm.test(\"PolarisFloorContains relation Id from PolarisVirtualFloor1 to OrganizationalArea2: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsOrganizationalArea2Id\"), function() {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"relationType\": \"PolarisFloorContains\",\r\n\t\"inNodeId\": \"{{OrganizationalArea2Id}}\",\r\n\t\"inNodeType\": \"OrganizationalArea\",\r\n\t\"outNodeId\": \"{{PolarisVirtualFloor1Id}}\",\r\n\t\"outNodeType\": \"PolarisVirtualFloor\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/PolarisFloorContains",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"PolarisFloorContains"
					]
				},
				"description": "Creates an Organizational Area2 contained by the Polaris Virtual Floor."
			},
			"response": []
		},
		{
			"name": "POST PolarisVirtualFloor1 PolarisFloorContains PartitionWall1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check",
							"pm.test(\"Response code check\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"//Response body check - relation section",
							"pm.test(\"Response body check - relation section\", function() {",
							"    pm.expect(jsonData.relationType).to.eql(\"PolarisFloorContains\");",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");",
							"    pm.expect(jsonData.id).to.not.eql(null);",
							"    postman.setGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsPartitionWall1Id\", jsonData.id);",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"PartitionWall1Id\"));",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"));",
							"    pm.expect(jsonData.inNodeType).to.eql(\"PartitionWall\");",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PolarisVirtualFloor\");",
							"});",
							"",
							"//Output node and relation Ids",
							"pm.test(\"PolarisVirtualFloor1 Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"), function() {});",
							"pm.test(\"PartitionWall1 Id: \" + postman.getGlobalVariable(\"PartitionWall1Id\"), function() {});",
							"pm.test(\"PolarisFloorContains relation Id from PolarisVirtualFloor1 to PartitionWall1: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsPartitionWall1Id\"), function() {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"relationType\": \"PolarisFloorContains\",\r\n\t\"inNodeId\": \"{{PartitionWall1Id}}\",\r\n\t\"inNodeType\": \"PartitionWall\",\r\n\t\"outNodeId\": \"{{PolarisVirtualFloor1Id}}\",\r\n\t\"outNodeType\": \"PolarisVirtualFloor\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/PolarisFloorContains",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"PolarisFloorContains"
					]
				},
				"description": "Creates a Partition Wall contained by the Polaris Virtual Floor."
			},
			"response": []
		},
		{
			"name": "POST PolarisVirtualFloor1 PolarisFloorContains PhotoSensor1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check",
							"pm.test(\"Response code check\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"//Response body check - relation section",
							"pm.test(\"Response body check - relation section\", function() {",
							"    pm.expect(jsonData.relationType).to.eql(\"PolarisFloorContains\");",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");",
							"    pm.expect(jsonData.id).to.not.eql(null);",
							"    postman.setGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsPhotoSensor1Id\", jsonData.id);",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"PhotoSensor1Id\"));",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"));",
							"    pm.expect(jsonData.inNodeType).to.eql(\"PhotoSensor\");",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PolarisVirtualFloor\");",
							"});",
							"",
							"//Output node and relation Ids",
							"pm.test(\"PolarisVirtualFloor1 Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"), function() {});",
							"pm.test(\"PhotoSensor1 Id: \" + postman.getGlobalVariable(\"PhotoSensor1Id\"), function() {});",
							"pm.test(\"PolarisFloorContains relation Id from PolarisVirtualFloor1 to PhotoSensor1: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsPhotoSensor1Id\"), function() {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"relationType\": \"PolarisFloorContains\",\r\n\t\"inNodeId\": \"{{PhotoSensor1Id}}\",\r\n\t\"inNodeType\": \"PhotoSensor\",\r\n\t\"outNodeId\": \"{{PolarisVirtualFloor1Id}}\",\r\n\t\"outNodeType\": \"PolarisVirtualFloor\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/PolarisFloorContains",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"PolarisFloorContains"
					]
				},
				"description": "Creates a Partition Wall contained by the Polaris Virtual Floor."
			},
			"response": []
		},
		{
			"name": "POST PolarisVirtualFloor1 PolarisFloorContains PhysicalLoadMeter1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check",
							"pm.test(\"Response code check\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"//Response body check - relation section",
							"pm.test(\"Response body check - relation section\", function() {",
							"    pm.expect(jsonData.relationType).to.eql(\"PolarisFloorContains\");",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");",
							"    pm.expect(jsonData.id).to.not.eql(null);",
							"    postman.setGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsPhysicalLoadMeter1Id\", jsonData.id);",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"PhysicalLoadMeter1Id\"));",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"));",
							"    pm.expect(jsonData.inNodeType).to.eql(\"PhysicalLoadMeter\");",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PolarisVirtualFloor\");",
							"});",
							"",
							"//Output node and relation Ids",
							"pm.test(\"PolarisVirtualFloor1 Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"), function() {});",
							"pm.test(\"PhysicalLoadMeter1 Id: \" + postman.getGlobalVariable(\"PhysicalLoadMeter1Id\"), function() {});",
							"pm.test(\"PolarisFloorContains relation Id from PolarisVirtualFloor1 to PhysicalLoadMeter1: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1PolarisFloorContainsPhysicalLoadMeter1Id\"), function() {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"relationType\": \"PolarisFloorContains\",\r\n\t\"inNodeId\": \"{{PhysicalLoadMeter1Id}}\",\r\n\t\"inNodeType\": \"PhysicalLoadMeter\",\r\n\t\"outNodeId\": \"{{PolarisVirtualFloor1Id}}\",\r\n\t\"outNodeType\": \"PolarisVirtualFloor\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/PolarisFloorContains",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"PolarisFloorContains"
					]
				},
				"description": "Creates a PhysicalLoadMeter contained by the Polaris Virtual Floor."
			},
			"response": []
		},
		{
			"name": "POST PolarisVirtualFloor1 PolarisFloorContains PlugLoad1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"PolarisFloorContains\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PolarisVirtualFloor1PolairsFloorContainsPlugLoad1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"PlugLoad1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"PlugLoad\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PolarisVirtualFloor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"PolarisVirtualFloor1 Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"), function () {});\r",
							"pm.test(\"PlugLoad1 Id: \" + postman.getGlobalVariable(\"PlugLoad1Id\"), function () {});\r",
							"pm.test(\"PolarisFloorContains relation Id from PolarisVirtualFloor1 to PlugLoad1: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1PolairsFloorContainsPlugLoad1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"relationType\": \"PolarisFloorContains\",\r\n\t\"inNodeId\": \"{{PlugLoad1Id}}\",\r\n\t\"inNodeType\": \"PlugLoad\",\r\n\t\"outNodeId\": \"{{PolarisVirtualFloor1Id}}\",\r\n\t\"outNodeType\": \"PolarisVirtualFloor\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/PolarisFloorContains",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"PolarisFloorContains"
					]
				},
				"description": "Creates a Plug Load contained by the Polaris Virtual Floor."
			},
			"response": []
		},
		{
			"name": "POST PolarisVirtualFloor1 PolarisFloorContains Repeater1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"PolarisFloorContains\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PolarisVirtualFloor1PolairsFloorContainsRepeater1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"Repeater1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Repeater\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PolarisVirtualFloor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"PolarisVirtualFloor1 Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"), function () {});\r",
							"pm.test(\"Repeater1 Id: \" + postman.getGlobalVariable(\"Repeater1Id\"), function () {});\r",
							"pm.test(\"PolarisFloorContains relation Id from PolarisVirtualFloor1 to Repeater1: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1PolairsFloorContainsRepeater1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"relationType\": \"PolarisFloorContains\",\r\n\t\"inNodeId\": \"{{Repeater1Id}}\",\r\n\t\"inNodeType\": \"Repeater\",\r\n\t\"outNodeId\": \"{{PolarisVirtualFloor1Id}}\",\r\n\t\"outNodeType\": \"PolarisVirtualFloor\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/PolarisFloorContains",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"PolarisFloorContains"
					]
				},
				"description": "Creates a Repeater contained by the Polaris Virtual Floor."
			},
			"response": []
		},
		{
			"name": "POST PolarisVirtualFloor1 PolarisFloorContains Shade1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"PolarisFloorContains\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PolarisVirtualFloor1PolairsFloorContainsShade1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"Shade1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Shade\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PolarisVirtualFloor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"PolarisVirtualFloor1 Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"), function () {});\r",
							"pm.test(\"Shade1 Id: \" + postman.getGlobalVariable(\"Shade1Id\"), function () {});\r",
							"pm.test(\"PolarisFloorContains relation Id from PolarisVirtualFloor1 to Shade1: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1PolairsFloorContainsShade1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"relationType\": \"PolarisFloorContains\",\r\n\t\"inNodeId\": \"{{Shade1Id}}\",\r\n\t\"inNodeType\": \"Shade\",\r\n\t\"outNodeId\": \"{{PolarisVirtualFloor1Id}}\",\r\n\t\"outNodeType\": \"PolarisVirtualFloor\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/PolarisFloorContains",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"PolarisFloorContains"
					]
				},
				"description": "Creates a Shade contained by the Polaris Virtual Floor."
			},
			"response": []
		},
		{
			"name": "POST PolarisVirtualFloor1 PolarisFloorContains TunableWhiteLuminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"PolarisFloorContains\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PolarisVirtualFloor1PolairsFloorContainsTunableWhiteLuminaire1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"TunableWhiteLuminaire1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"TunableWhiteLuminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PolarisVirtualFloor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"PolarisVirtualFloor1 Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"), function () {});\r",
							"pm.test(\"TunableWhiteLuminaire1 Id: \" + postman.getGlobalVariable(\"TunableWhiteLuminaire1Id\"), function () {});\r",
							"pm.test(\"PolarisFloorContains relation Id from PolarisVirtualFloor1 to TunableWhiteLuminaire1: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1PolairsFloorContainsTunableWhiteLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"relationType\": \"PolarisFloorContains\",\r\n\t\"inNodeId\": \"{{TunableWhiteLuminaire1Id}}\",\r\n\t\"inNodeType\": \"TunableWhiteLuminaire\",\r\n\t\"outNodeId\": \"{{PolarisVirtualFloor1Id}}\",\r\n\t\"outNodeType\": \"PolarisVirtualFloor\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/PolarisFloorContains",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"PolarisFloorContains"
					]
				},
				"description": "Creates a Tunable WhiteLuminaire contained by the Polaris Virtual Floor."
			},
			"response": []
		},
		{
			"name": "POST PolarisVirtualFloor1 PolarisFloorContains WalcLuminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"PolarisFloorContains\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PolarisVirtualFloor1PolairsFloorContainsWalcLuminaire1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"WalcLuminaire1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"WalcLuminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PolarisVirtualFloor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"PolarisVirtualFloor1 Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"), function () {});\r",
							"pm.test(\"WalcLuminaire1 Id: \" + postman.getGlobalVariable(\"WalcLuminaire1Id\"), function () {});\r",
							"pm.test(\"PolarisFloorContains relation Id from PolarisVirtualFloor1 to WalcLuminaire1: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1PolairsFloorContainsWalcLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"relationType\": \"PolarisFloorContains\",\r\n\t\"inNodeId\": \"{{WalcLuminaire1Id}}\",\r\n\t\"inNodeType\": \"WalcLuminaire\",\r\n\t\"outNodeId\": \"{{PolarisVirtualFloor1Id}}\",\r\n\t\"outNodeType\": \"PolarisVirtualFloor\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/PolarisFloorContains",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"PolarisFloorContains"
					]
				},
				"description": "Creates a Walc Luminaire contained by the Polaris Virtual Floor."
			},
			"response": []
		},
		{
			"name": "POST PolarisVirtualFloor1 PolarisFloorContains WslcLuminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"PolarisFloorContains\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PolarisVirtualFloor1PolairsFloorContainsWslcLuminaire1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"WslcLuminaire1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"WslcLuminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PolarisVirtualFloor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"PolarisVirtualFloor1 Id: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1Id\"), function () {});\r",
							"pm.test(\"WslcLuminaire1 Id: \" + postman.getGlobalVariable(\"WslcLuminaire1Id\"), function () {});\r",
							"pm.test(\"PolarisFloorContains relation Id from PolarisVirtualFloor1 to WslcLuminaire1: \" + postman.getGlobalVariable(\"PolarisVirtualFloor1PolairsFloorContainsWslcLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"relationType\": \"PolarisFloorContains\",\r\n\t\"inNodeId\": \"{{WslcLuminaire1Id}}\",\r\n\t\"inNodeType\": \"WslcLuminaire\",\r\n\t\"outNodeId\": \"{{PolarisVirtualFloor1Id}}\",\r\n\t\"outNodeType\": \"PolarisVirtualFloor\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/PolarisFloorContains",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"PolarisFloorContains"
					]
				},
				"description": "Creates a Walc Luminaire contained by the Polaris Virtual Floor."
			},
			"response": []
		},
		{
			"name": "POST Keypad1 Contains Button1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Button\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"Button1Name is Programmable Controller Button []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Button1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Keypad1ContainsButton1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Button1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"Keypad1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Button\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Keypad\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Keypad1 Id: \" + postman.getGlobalVariable(\"Keypad1Id\"), function () {});\r",
							"pm.test(\"Button1 Id: \" + postman.getGlobalVariable(\"Button1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from Keypad1 to Button1: \" + postman.getGlobalVariable(\"Keypad1ContainsButton1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"enabled\": true,\r\n        \"caption\": \"Programmable Controller Button\",\r\n        \"position\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"size\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"refAddress\": 44294967295,\r\n        \"syncState\": 2,\r\n        \"group\": 0,\r\n        \"buttonPosition\": 0,\r\n        \"pchType\": 127,\r\n        \"nodeType\": \"Button\",\r\n        \"name\": \"Button1Name is Programmable Controller Button []\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T14:43:48.108389+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"Keypad\",\r\n\t\t\"outNodeId\": \"{{Keypad1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Button",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Button"
					]
				},
				"description": "Creates a Button contained by the Keypad."
			},
			"response": []
		},
		{
			"name": "POST TunableWhiteLuminaire1 Contains Ballast1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check",
							"pm.test(\"Response code check\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"//Response body check - node section",
							"pm.test(\"Response body check - node section\", function() {",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Ballast\");",
							"    pm.expect(jsonData.node.name).to.eql(\"Ballast1Name is Fixture []\");",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");",
							"    pm.expect(jsonData.node.id).to.not.eql(null);",
							"    postman.setGlobalVariable(\"Ballast1Id\", jsonData.node.id);",
							"});",
							"",
							"//Response body check - relation section",
							"pm.test(\"Response body check - relation section\", function() {",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);",
							"    postman.setGlobalVariable(\"TunableWhiteLuminaire1ContainsBallast1Id1Id\", jsonData.relation.id);",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Ballast1Id\"));",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"TunableWhiteLuminaire1Id\"));",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Ballast\");",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"TunableWhiteLuminaire\");",
							"});",
							"",
							"//Output node and relation Ids",
							"pm.test(\"TunableWhiteLuminaire1 Id: \" + postman.getGlobalVariable(\"TunableWhiteLuminaire1Id\"), function() {});",
							"pm.test(\"Ballast1 Id: \" + postman.getGlobalVariable(\"Ballast1Id\"), function() {});",
							"pm.test(\"Contains relation Id from TunableWhiteLuminaire1 to Ballast1: \" + postman.getGlobalVariable(\"TunableWhiteLuminaire1ContainsBallast1Id\"), function() {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"isEmergency\": false,\r\n        \"enabled\": true,\r\n        \"caption\": \"Fixture\",\r\n        \"position\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"size\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"refAddress\": 44294967295,\r\n        \"syncState\": 2,\r\n        \"componentType\": 127,\r\n        \"rotation\": 0,\r\n        \"dayLightOrientation\": 0,\r\n        \"dayLightDistance\": 0,\r\n        \"dayLightOutOfRange\": false,\r\n        \"dayLightBrightness\": 0,\r\n        \"dayLightOverride\": 0,\r\n        \"dayLightCompRemainder\": 0,\r\n        \"maxBrightness\": 0,\r\n        \"minBrightness\": 0,\r\n        \"comfortBrightness\": 0,\r\n        \"twoStageBrightness\": 0,\r\n        \"minComfortBrightness\": 0,\r\n        \"comfortBrightnessRelative\": false,\r\n        \"backupPowerBrightness\": 0,\r\n        \"enabledForcedOverrideBrightness\": false,\r\n        \"forcedOverrideBrightness\": 0,\r\n        \"nightLight\": false,\r\n        \"luxMin\": 0,\r\n        \"luxMax\": 0,\r\n        \"remainingBurnIn\": 0,\r\n        \"fixBaselineWattage\": 0,\r\n        \"ballastNameplateWattage\": 0,\r\n        \"demand\": 0,\r\n        \"demandMin\": 0,\r\n        \"dimmable\": false,\r\n        \"restrike\": false,\r\n        \"disableDlhv\": false,\r\n        \"daliFadeTime\": 0,\r\n        \"daliFadeRate\": 0,\r\n        \"daliPowerOnBrightnessLevel\": 0,\r\n        \"daliSystemFailureBrightnessLevel\": 0,\r\n        \"startupBehaviorType\": null,\r\n        \"startupBrightness\": 0,\r\n        \"startupDuration\": 0,\r\n        \"phaseCutDimmerLoadType\": null,\r\n        \"phaseCutDimmerModeType\": null,\r\n        \"previousRefAddress\": 0,\r\n        \"powerCurve\": null,\r\n        \"colorTemperature\": 0,\r\n        \"nodeType\": \"Ballast\",\r\n        \"name\": \"Ballast1Name is Fixture []\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T16:20:11.308631+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"TunableWhiteLuminaire1\",\r\n\t\t\"outNodeId\": \"{{TunableWhiteLuminaire1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Ballast",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Ballast"
					]
				},
				"description": "Creates a Ballast contained by the Tunable White Luminaire."
			},
			"response": []
		},
		{
			"name": "POST EmergencyLuminaire1 Contains Ballast1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check",
							"pm.test(\"Response code check\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"//Response body check - node section",
							"pm.test(\"Response body check - node section\", function() {",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Ballast\");",
							"    pm.expect(jsonData.node.name).to.eql(\"Ballast1Name is Fixture []\");",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");",
							"    pm.expect(jsonData.node.id).to.not.eql(null);",
							"    postman.setGlobalVariable(\"Ballast1Id\", jsonData.node.id);",
							"});",
							"",
							"//Response body check - relation section",
							"pm.test(\"Response body check - relation section\", function() {",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);",
							"    postman.setGlobalVariable(\"EmergencyLuminaire1IdContainsBallast1Id\", jsonData.relation.id);",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"Ballast1Id\"));",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EmergencyLuminaire1Id\"));",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Ballast\");",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EmergencyLuminaire\");",
							"});",
							"",
							"//Output node and relation Ids",
							"pm.test(\"EmergencyLuminaire1 Id: \" + postman.getGlobalVariable(\"EmergencyLuminaire1Id\"), function() {});",
							"pm.test(\"Ballast1 Id: \" + postman.getGlobalVariable(\"Ballast1Id\"), function() {});",
							"pm.test(\"Contains relation Id from EmergencyLuminaire1 to Ballast1: \" + postman.getGlobalVariable(\"EmergencyLuminaire1IdContainsBallast1Id\"), function() {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"isEmergency\": false,\r\n        \"enabled\": true,\r\n        \"caption\": \"Fixture\",\r\n        \"position\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"size\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"refAddress\": 44294967295,\r\n        \"syncState\": 2,\r\n        \"componentType\": 127,\r\n        \"rotation\": 0,\r\n        \"dayLightOrientation\": 0,\r\n        \"dayLightDistance\": 0,\r\n        \"dayLightOutOfRange\": false,\r\n        \"dayLightBrightness\": 0,\r\n        \"dayLightOverride\": 0,\r\n        \"dayLightCompRemainder\": 0,\r\n        \"maxBrightness\": 0,\r\n        \"minBrightness\": 0,\r\n        \"comfortBrightness\": 0,\r\n        \"twoStageBrightness\": 0,\r\n        \"minComfortBrightness\": 0,\r\n        \"comfortBrightnessRelative\": false,\r\n        \"backupPowerBrightness\": 0,\r\n        \"enabledForcedOverrideBrightness\": false,\r\n        \"forcedOverrideBrightness\": 0,\r\n        \"nightLight\": false,\r\n        \"luxMin\": 0,\r\n        \"luxMax\": 0,\r\n        \"remainingBurnIn\": 0,\r\n        \"fixBaselineWattage\": 0,\r\n        \"ballastNameplateWattage\": 0,\r\n        \"demand\": 0,\r\n        \"demandMin\": 0,\r\n        \"dimmable\": false,\r\n        \"restrike\": false,\r\n        \"disableDlhv\": false,\r\n        \"daliFadeTime\": 0,\r\n        \"daliFadeRate\": 0,\r\n        \"daliPowerOnBrightnessLevel\": 0,\r\n        \"daliSystemFailureBrightnessLevel\": 0,\r\n        \"startupBehaviorType\": null,\r\n        \"startupBrightness\": 0,\r\n        \"startupDuration\": 0,\r\n        \"phaseCutDimmerLoadType\": null,\r\n        \"phaseCutDimmerModeType\": null,\r\n        \"previousRefAddress\": 0,\r\n        \"powerCurve\": null,\r\n        \"colorTemperature\": 0,\r\n        \"nodeType\": \"Ballast\",\r\n        \"name\": \"Ballast1Name is Fixture []\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T16:20:11.308631+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EmergencyLuminaire1\",\r\n\t\t\"outNodeId\": \"{{EmergencyLuminaire1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Ballast",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Ballast"
					]
				},
				"description": "Creates a Ballast contained by the Emergency Luminaire."
			},
			"response": []
		},
		{
			"name": "POST CentralBattery1 Contains EventDispatcher1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check",
							"pm.test(\"Response code check\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"//Response body check - node section",
							"pm.test(\"Response body check - node section\", function() {",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"EventDispatcher\");",
							"    pm.expect(jsonData.node.name).to.eql(\"EventDispatcher1Name is EventDispatcher []\");",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");",
							"    pm.expect(jsonData.node.id).to.not.eql(null);",
							"    postman.setGlobalVariable(\"EventDispatcher1Id\", jsonData.node.id);",
							"});",
							"",
							"//Response body check - relation section",
							"pm.test(\"Response body check - relation section\", function() {",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);",
							"    postman.setGlobalVariable(\"CentralBattery1ContainsEventDispatcher1Id\", jsonData.relation.id);",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"EventDispatcher1Id\"));",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"CentralBattery1Id\"));",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"EventDispatcher\");",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"CentralBattery\");",
							"});",
							"",
							"//Output node and relation Ids",
							"pm.test(\"CentralBattery1 Id: \" + postman.getGlobalVariable(\"CentralBattery1Id\"), function() {});",
							"pm.test(\"EventDispatcher1 Id: \" + postman.getGlobalVariable(\"EventDispatcher1Id\"), function() {});",
							"pm.test(\"Contains relation Id from CentralBattery1 to EventDispatcher1: \" + postman.getGlobalVariable(\"CentralBattery1ContainsEventDispatcher1Id\"), function() {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"refAddress\": 44294967295,\r\n        \"syncState\": 2,\r\n        \"turnOffDelay\": 0,\r\n        \"turnOnDelayNoMaster\": 0,\r\n        \"turnOnDelay\": 0,\r\n        \"turnOnNoComs\": 0,\r\n        \"invertInputSignal\": false,\r\n        \"nodeType\": \"EventDispatcher\",\r\n        \"name\": \"EventDispatcher1Name is EventDispatcher []\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"1f83f23f-6472-40bb-94d1-957789f260bd\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-09T18:55:47.582127+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"CentralBattery1\",\r\n\t\t\"outNodeId\": \"{{CentralBattery1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EventDispatcher",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EventDispatcher"
					]
				},
				"description": "Creates an Event Dispatcher contained by the Central Battery."
			},
			"response": []
		},
		{
			"name": "POST ContactClosureTrigger1 Contains EventDispatcher1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check",
							"pm.test(\"Response code check\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"//Response body check - node section",
							"pm.test(\"Response body check - node section\", function() {",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"EventDispatcher\");",
							"    pm.expect(jsonData.node.name).to.eql(\"EventDispatcher1Name is EventDispatcher []\");",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");",
							"    pm.expect(jsonData.node.id).to.not.eql(null);",
							"    postman.setGlobalVariable(\"EventDispatcher1Id\", jsonData.node.id);",
							"});",
							"",
							"//Response body check - relation section",
							"pm.test(\"Response body check - relation section\", function() {",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);",
							"    postman.setGlobalVariable(\"ContactClosureTrigger1ContainsEventDispatcher1Id\", jsonData.relation.id);",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"EventDispatcher1Id\"));",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"ContactClosureTrigger1Id\"));",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"EventDispatcher\");",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"ContactClosureTrigger\");",
							"});",
							"",
							"//Output node and relation Ids",
							"pm.test(\"CentralBattery1 Id: \" + postman.getGlobalVariable(\"CentralBattery1Id\"), function() {});",
							"pm.test(\"EventDispatcher1 Id: \" + postman.getGlobalVariable(\"EventDispatcher1Id\"), function() {});",
							"pm.test(\"Contains relation Id from CentralBattery1 to EventDispatcher1: \" + postman.getGlobalVariable(\"CentralBattery1ContainsEventDispatcher1Id\"), function() {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"refAddress\": 44294967295,\r\n        \"syncState\": 2,\r\n        \"turnOffDelay\": 0,\r\n        \"turnOnDelayNoMaster\": 0,\r\n        \"turnOnDelay\": 0,\r\n        \"turnOnNoComs\": 0,\r\n        \"invertInputSignal\": false,\r\n        \"nodeType\": \"EventDispatcher\",\r\n        \"name\": \"EventDispatcher1Name is EventDispatcher []\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"1f83f23f-6472-40bb-94d1-957789f260bd\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-09T18:55:47.582127+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"ContactClosureTrigger1\",\r\n\t\t\"outNodeId\": \"{{ContactClosureTrigger1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EventDispatcher",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EventDispatcher"
					]
				},
				"description": "Creates an Event Dispatcher contained by the Contact Closure Trigger."
			},
			"response": []
		},
		{
			"name": "POST FireAlarm1 Contains EventDispatcher1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check",
							"pm.test(\"Response code check\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"//Response body check - node section",
							"pm.test(\"Response body check - node section\", function() {",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"EventDispatcher\");",
							"    pm.expect(jsonData.node.name).to.eql(\"EventDispatcher1Name is EventDispatcher []\");",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");",
							"    pm.expect(jsonData.node.id).to.not.eql(null);",
							"    postman.setGlobalVariable(\"EventDispatcher1Id\", jsonData.node.id);",
							"});",
							"",
							"//Response body check - relation section",
							"pm.test(\"Response body check - relation section\", function() {",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);",
							"    postman.setGlobalVariable(\"FireAlarm1ContainsEventDispatcher1Id\", jsonData.relation.id);",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"EventDispatcher1Id\"));",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"FireAlarm1Id\"));",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"EventDispatcher\");",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"FireAlarm\");",
							"});",
							"",
							"//Output node and relation Ids",
							"pm.test(\"FireAlarm1 Id: \" + postman.getGlobalVariable(\"FireAlarm1Id\"), function() {});",
							"pm.test(\"EventDispatcher1 Id: \" + postman.getGlobalVariable(\"EventDispatcher1Id\"), function() {});",
							"pm.test(\"Contains relation Id from FireAlarm1 to EventDispatcher1: \" + postman.getGlobalVariable(\"FireAlarm1ContainsEventDispatcher1Id\"), function() {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"refAddress\": 44294967295,\r\n        \"syncState\": 2,\r\n        \"turnOffDelay\": 0,\r\n        \"turnOnDelayNoMaster\": 0,\r\n        \"turnOnDelay\": 0,\r\n        \"turnOnNoComs\": 0,\r\n        \"invertInputSignal\": false,\r\n        \"nodeType\": \"EventDispatcher\",\r\n        \"name\": \"EventDispatcher1Name is EventDispatcher []\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"1f83f23f-6472-40bb-94d1-957789f260bd\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-09T18:55:47.582127+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"FireAlarm1\",\r\n\t\t\"outNodeId\": \"{{FireAlarm1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EventDispatcher",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EventDispatcher"
					]
				},
				"description": "Creates a Event Dispatcher contained by the FireAlarm."
			},
			"response": []
		},
		{
			"name": "POST EmerencyLuminaire1 Contains EmergencyInverter1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"EmergencyInverter\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"EmergencyInverter1Name is Inverter []\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EmergencyInverter1Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EmergencyLuminaire1IdContainsEmergencyInverter1Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getGlobalVariable(\"EmergencyInverter1Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getGlobalVariable(\"EmergencyLuminaire1Id\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"EmergencyInverter\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EmergencyLuminaire\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EmerencyLuminaire1 Id: \" + postman.getGlobalVariable(\"EmergencyLuminaire1Id\"), function () {});\r",
							"pm.test(\"EmergencyInverter1 Id: \" + postman.getGlobalVariable(\"EmergencyInverter1Id\"), function () {});\r",
							"pm.test(\"Contains relation Id from EmerencyLuminaire1 to EmergencyInverter1: \" + postman.getGlobalVariable(\"EmergencyLuminaire1IdContainsEmergencyInverter1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"node\": {\r\n        \"enabled\": true,\r\n        \"caption\": \"Inverter\",\r\n        \"position\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"size\": {\r\n            \"x\": 6.40148,\r\n            \"y\": 19.9764\r\n        },\r\n        \"shape\": [\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            },\r\n            {\r\n                \"x\": 6.40148,\r\n                \"y\": 19.9764\r\n            }\r\n        ],\r\n        \"refAddress\": 44294967295,\r\n        \"syncState\": 2,\r\n        \"nodeType\": \"EmergencyInverter\",\r\n        \"name\": \"EmergencyInverter1Name is Inverter []\",\r\n        \"description\": null,\r\n        \"resources\": null,\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\r\n        \"encSystemId\": \"17ece35b-d569-4fed-82c1-4f018ca67318\",\r\n        \"nodeSystemType\": 0,\r\n        \"createdBy\": \"root\",\r\n        \"createdDate\": \"2019-07-05T14:23:28.709502+00:00\",\r\n        \"updatedBy\": null,\r\n        \"updatedDate\": null,\r\n        \"externalId\": null\r\n    },\r\n    \"relation\": {\r\n\t\t\"relationType\": \"Contains\",\r\n\t\t\"outNodeType\": \"EmergencyLuminaire\",\r\n\t\t\"outNodeId\": \"{{EmergencyLuminaire1Id}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EmergencyInverter",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EmergencyInverter"
					]
				},
				"description": "Creates an EmergencyInverter contained by the Floor."
			},
			"response": []
		},
		{
			"name": "POST OrganizationalArea1 Controls Luminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea1ControlsLuminaire1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"Luminaire1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OrganizationalArea\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OrganizationalArea1 Id: \" + postman.getGlobalVariable(\"OrganizationalArea1Id\"), function () {});\r",
							"pm.test(\"Luminaire1 Id: \" + postman.getGlobalVariable(\"Luminaire1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from OrganizationalArea1 to Luminaire1: \" + postman.getGlobalVariable(\"OrganizationalArea1ControlsLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{Luminaire1Id}}\",\r\n    \"outNodeId\": \"{{OrganizationalArea1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controlled by the Organizational Area."
			},
			"response": []
		},
		{
			"name": "POST OrganizationalArea1 Controls TunableWhiteLuminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea1ControlsTunableWhiteLuminaire1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"TunableWhiteLuminaire1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"TunableWhiteLuminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OrganizationalArea\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OrganizationalArea1 Id: \" + postman.getGlobalVariable(\"OrganizationalArea1Id\"), function () {});\r",
							"pm.test(\"TunableWhiteLuminaire1 Id: \" + postman.getGlobalVariable(\"TunableWhiteLuminaire1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from OrganizationalArea1 to TunableWhiteLuminaire1: \" + postman.getGlobalVariable(\"OrganizationalArea1ControlsTunableWhiteLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{TunableWhiteLuminaire1Id}}\",\r\n    \"outNodeId\": \"{{OrganizationalArea1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Tunable White Luminaire controlled by the Organizational Area."
			},
			"response": []
		},
		{
			"name": "POST OrganizationalArea1 Controls WalcLuminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea1ControlsWalcLuminaire1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"WalcLuminaire1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"WalcLuminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OrganizationalArea\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OrganizationalArea1 Id: \" + postman.getGlobalVariable(\"OrganizationalArea1Id\"), function () {});\r",
							"pm.test(\"WalcLuminaire1 Id: \" + postman.getGlobalVariable(\"WalcLuminaire1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from OrganizationalArea1 to WalcLuminaire1: \" + postman.getGlobalVariable(\"OrganizationalArea1ControlsWalcLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{WalcLuminaire1Id}}\",\r\n    \"outNodeId\": \"{{OrganizationalArea1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Walc Luminaire controlled by the Organizational Area."
			},
			"response": []
		},
		{
			"name": "POST OrganizationalArea1 Controls WslcLuminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea1ControlsWslcLuminaire1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"WslcLuminaire1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"WslcLuminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OrganizationalArea\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OrganizationalArea1 Id: \" + postman.getGlobalVariable(\"OrganizationalArea1Id\"), function () {});\r",
							"pm.test(\"WslcLuminaire1 Id: \" + postman.getGlobalVariable(\"WslcLuminaire1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from OrganizationalArea1 to WslcLuminaire1: \" + postman.getGlobalVariable(\"OrganizationalArea1ControlsWslcLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{WslcLuminaire1Id}}\",\r\n    \"outNodeId\": \"{{OrganizationalArea1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Wslc Luminaire controlled by the Organizational Area."
			},
			"response": []
		},
		{
			"name": "POST OrganizationalArea2 Controls EmergencyLuminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea2ControlsEmergencyLuminaire1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"EmergencyLuminaire1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea2Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"EmergencyLuminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OrganizationalArea\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OrganizationalArea2 Id: \" + postman.getGlobalVariable(\"OrganizationalArea2Id\"), function () {});\r",
							"pm.test(\"EmergencyLuminaire1 Id: \" + postman.getGlobalVariable(\"EmergencyLuminaire1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from OrganizationalArea2 to EmergencyLuminaire1: \" + postman.getGlobalVariable(\"OrganizationalArea2ControlsEmergencyLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{EmergencyLuminaire1Id}}\",\r\n    \"outNodeId\": \"{{OrganizationalArea2Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates an Emergency Luminaire controlled by the Organizational Area2."
			},
			"response": []
		},
		{
			"name": "POST OrganizationalArea2 Controls PlugLoad1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OrganizationalArea2ControlsPlugLoad1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"PlugLoad1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea2Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"PlugLoad\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OrganizationalArea\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OrganizationalArea2 Id: \" + postman.getGlobalVariable(\"OrganizationalArea2Id\"), function () {});\r",
							"pm.test(\"PlugLoad1 Id: \" + postman.getGlobalVariable(\"PlugLoad1\"), function () {});\r",
							"pm.test(\"Controls relation Id from OrganizationalArea2 to PlugLoad1: \" + postman.getGlobalVariable(\"OrganizationalArea2ControlsPlugLoad1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{PlugLoad1Id}}\",\r\n    \"outNodeId\": \"{{OrganizationalArea2Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Plug Load controlled by the Organizational Area2."
			},
			"response": []
		},
		{
			"name": "POST Button1 Controls OrganizationalArea2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Button1ControlsOrganizationalArea2Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea2Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"Button1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Button\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Button1 Id: \" + postman.getGlobalVariable(\"Button1Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea2 Id: \" + postman.getGlobalVariable(\"OrganizationalArea2Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from Button1 to OrganizationalArea2: \" + postman.getGlobalVariable(\"Button1ControlsOrganizationalArea2Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea2Id}}\",\r\n    \"outNodeId\": \"{{Button1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates an Organizational Area2 controlled by the Button."
			},
			"response": []
		},
		{
			"name": "POST OccupancySensor1 Controls OrganizationalArea1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"OccupancySensor1ControlsOrganizationalArea1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OccupancySensor1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OccupancySensor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OccupancySensor1 Id: \" + postman.getGlobalVariable(\"OccupancySensor1Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea1 Id: \" + postman.getGlobalVariable(\"OrganizationalArea1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from OccupancySensor1 to OrganizationalArea1: \" + postman.getGlobalVariable(\"OccupancySensor1ControlsOrganizationalArea1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea1Id}}\",\r\n    \"outNodeId\": \"{{OccupancySensor1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates an Organizational Area1 controlled by the Occupancy Sensor."
			},
			"response": []
		},
		{
			"name": "POST PartitionWall1 Controls OrganizationalArea1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PartitionWall1ControlsOrganizationalArea1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PartitionWall1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PartitionWall\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"PartitionWall1 Id: \" + postman.getGlobalVariable(\"PartitionWall1Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea1 Id: \" + postman.getGlobalVariable(\"OrganizationalArea1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from PartitionWall1 to OrganizationalArea1: \" + postman.getGlobalVariable(\"PartitionWall1ControlsOrganizationalArea1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea1Id}}\",\r\n    \"outNodeId\": \"{{PartitionWall1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates an Organizational Area1 controlled by the Partition Wall."
			},
			"response": []
		},
		{
			"name": "POST PartitionWall1 Controls OrganizationalArea2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PartitionWall1ControlsOrganizationalArea1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea2Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PartitionWall1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PartitionWall\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"PartitionWall1 Id: \" + postman.getGlobalVariable(\"PartitionWall1Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea2 Id: \" + postman.getGlobalVariable(\"OrganizationalArea2Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from PartitionWall1 to OrganizationalArea2: \" + postman.getGlobalVariable(\"PartitionWall1ControlsOrganizationalArea2Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "bimUser",
							"type": "string"
						},
						{
							"key": "password",
							"value": "0sr4mB!m",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea2Id}}\",\r\n    \"outNodeId\": \"{{PartitionWall1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates an Organizational Area2 controlled by the Partition Wall."
			},
			"response": []
		},
		{
			"name": "POST Schedule1 Controls OrganizationalArea2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Schedule1ControlsOrganizationalArea2Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"OrganizationalArea2Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"Schedule1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Schedule\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Schedule1 Id: \" + postman.getGlobalVariable(\"Schedule1Id\"), function () {});\r",
							"pm.test(\"OrganizationalArea2 Id: \" + postman.getGlobalVariable(\"OrganizationalArea2Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from Schedule1 to OrganizationalArea2: \" + postman.getGlobalVariable(\"Schedule1ControlsOrganizationalArea2Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea2Id}}\",\r\n    \"outNodeId\": \"{{Schedule1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates an Organizational Area2 controlled by the Schedule."
			},
			"response": []
		},
		{
			"name": "POST PhotoSensor1 Controls Luminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PhotoSensor1ControlsLuminaire1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"Luminaire1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PhotoSensor1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PhotoSensor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"PhotoSensor1 Id: \" + postman.getGlobalVariable(\"PhotoSensor1Id\"), function () {});\r",
							"pm.test(\"Luminaire1 Id: \" + postman.getGlobalVariable(\"LuminaireId\"), function () {});\r",
							"pm.test(\"Controls relation Id from PhotoSensor1 to Luminaire1: \" + postman.getGlobalVariable(\"PhotoSensor1ControlsLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "bimUser",
							"type": "string"
						},
						{
							"key": "password",
							"value": "0sr4mB!m",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{Luminaire1Id}}\",\r\n    \"outNodeId\": \"{{PhotoSensor1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Luminaire controlled by the Photo Sensor."
			},
			"response": []
		},
		{
			"name": "POST PhotoSensor1 Controls TunableWhiteLuminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PhotoSensor1ControlsTunableWhiteLuminaire1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"TunableWhiteLuminaire1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PhotoSensor1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"TunableWhiteLuminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PhotoSensor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"PhotoSensor1 Id: \" + postman.getGlobalVariable(\"PhotoSensor1Id\"), function () {});\r",
							"pm.test(\"TunableWhiteLuminaire1 Id: \" + postman.getGlobalVariable(\"TunableWhiteLuminaire1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from PhotoSensor1 to TunableWhiteLuminaire1: \" + postman.getGlobalVariable(\"PhotoSensor1ControlsTunableWhiteLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "bimUser",
							"type": "string"
						},
						{
							"key": "password",
							"value": "0sr4mB!m",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{TunableWhiteLuminaire1Id}}\",\r\n    \"outNodeId\": \"{{PhotoSensor1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Tunable White Luminaire controlled by the Photo Sensor."
			},
			"response": []
		},
		{
			"name": "POST PhotoSensor1 Controls WalcLuminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PhotoSensor1ControlsWalcLuminaire1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"WalcLuminaire1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PhotoSensor1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"WalcLuminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PhotoSensor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"PhotoSensor1 Id: \" + postman.getGlobalVariable(\"PhotoSensor1Id\"), function () {});\r",
							"pm.test(\"WalcLuminaire1 Id: \" + postman.getGlobalVariable(\"WalcLuminaire1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from PhotoSensor1 to WalcLuminaire1: \" + postman.getGlobalVariable(\"PhotoSensor1ControlsWalcLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "bimUser",
							"type": "string"
						},
						{
							"key": "password",
							"value": "0sr4mB!m",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{WalcLuminaire1Id}}\",\r\n    \"outNodeId\": \"{{PhotoSensor1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Walc Luminaire controlled by the Photo Sensor."
			},
			"response": []
		},
		{
			"name": "POST PhotoSensor1 Controls WslcLuminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PhotoSensor1ControlsWslcLuminaire1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"WslcLuminaire1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PhotoSensor1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"WslcLuminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PhotoSensor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"PhotoSensor1 Id: \" + postman.getGlobalVariable(\"PhotoSensor1Id\"), function () {});\r",
							"pm.test(\"WslcLuminaire1 Id: \" + postman.getGlobalVariable(\"WslcLuminaire1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from PhotoSensor1 to WslcLuminaire1: \" + postman.getGlobalVariable(\"PhotoSensor1ControlsWslcLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "bimUser",
							"type": "string"
						},
						{
							"key": "password",
							"value": "0sr4mB!m",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{WslcLuminaire1Id}}\",\r\n    \"outNodeId\": \"{{PhotoSensor1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Wslc Luminaire controlled by the Photo Sensor."
			},
			"response": []
		},
		{
			"name": "POST PhotoSensor1 Controls EmergencyLuminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"PhotoSensor1ControlsEmergencyLuminaire1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"EmergencyLuminaire1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"PhotoSensor1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"EmergencyLuminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PhotoSensor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"PhotoSensor1 Id: \" + postman.getGlobalVariable(\"PhotoSensor1Id\"), function () {});\r",
							"pm.test(\"EmergencyLuminaire1 Id: \" + postman.getGlobalVariable(\"EmergencyLuminaire1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from PhotoSensor1 to EmergencyLuminaire1: \" + postman.getGlobalVariable(\"PhotoSensor1ControlsEmergencyLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "bimUser",
							"type": "string"
						},
						{
							"key": "password",
							"value": "0sr4mB!m",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{EmergencyLuminaire1Id}}\",\r\n    \"outNodeId\": \"{{PhotoSensor1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Emergency Luminaire controlled by the Photo Sensor."
			},
			"response": []
		},
		{
			"name": "POST Luminaire1 Controls PhotoSensor1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Luminaire1IdControlsPhotoSensor1d\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"PhotoSensor1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"Luminaire1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"PhotoSensor\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Luminaire\");\r",
							"    \r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Luminaire1 Id: \" + postman.getGlobalVariable(\"Luminaire1Id\"), function () {});\r",
							"pm.test(\"PhotoSensor1 Id: \" + postman.getGlobalVariable(\"PhotoSensor1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from Luminaire1 to PhotoSensor1: \" + postman.getGlobalVariable(\"Luminaire1IdControlsPhotoSensor1d\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "bimUser",
							"type": "string"
						},
						{
							"key": "password",
							"value": "0sr4mB!m",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{PhotoSensor1Id}}\",\r\n    \"outNodeId\": \"{{Luminaire1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Photo Sensor controlled by the Luminaire."
			},
			"response": []
		},
		{
			"name": "POST TunableWhiteLuminaire1 Controls PhotoSensor1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"TunableWhiteLuminaire1IdControlsPhotoSensor1d\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"PhotoSensor1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"TunableWhiteLuminaire1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"PhotoSensor\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"TunableWhiteLuminaire\");\r",
							"    \r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"TunableWhiteLuminaire1 Id: \" + postman.getGlobalVariable(\"TunableWhiteLuminaire1Id\"), function () {});\r",
							"pm.test(\"PhotoSensor1 Id: \" + postman.getGlobalVariable(\"PhotoSensor1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from TunableWhiteLuminaire1 to PhotoSensor1: \" + postman.getGlobalVariable(\"TunableWhiteLuminaire1IdControlsPhotoSensor1d\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "bimUser",
							"type": "string"
						},
						{
							"key": "password",
							"value": "0sr4mB!m",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{PhotoSensor1Id}}\",\r\n    \"outNodeId\": \"{{TunableWhiteLuminaire1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Photo Sensor controlled by the Tunable White Luminaire."
			},
			"response": []
		},
		{
			"name": "POST WalcLuminaire1 Controls PhotoSensor1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"WalcLuminaire1IdControlsPhotoSensor1d\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"PhotoSensor1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"WalcLuminaire1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"PhotoSensor\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"WalcLuminaire\");\r",
							"    \r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"WalcLuminaire1 Id: \" + postman.getGlobalVariable(\"WalcLuminaire1Id\"), function () {});\r",
							"pm.test(\"PhotoSensor1 Id: \" + postman.getGlobalVariable(\"PhotoSensor1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from WalcLuminaire1 to PhotoSensor1: \" + postman.getGlobalVariable(\"WalcLuminaire1IdControlsPhotoSensor1d\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "bimUser",
							"type": "string"
						},
						{
							"key": "password",
							"value": "0sr4mB!m",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{PhotoSensor1Id}}\",\r\n    \"outNodeId\": \"{{WalcLuminaire1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Photo Sensor controlled by the Walc Luminaire."
			},
			"response": []
		},
		{
			"name": "POST WslcLuminaire1 Controls PhotoSensor1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"WslcLuminaire1IdControlsPhotoSensor1d\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"PhotoSensor1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"WslcLuminaire1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"PhotoSensor\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"WslcLuminaire\");\r",
							"    \r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"WslcLuminaire1 Id: \" + postman.getGlobalVariable(\"WslcLuminaire1Id\"), function () {});\r",
							"pm.test(\"PhotoSensor1 Id: \" + postman.getGlobalVariable(\"PhotoSensor1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from WslcLuminaire1 to PhotoSensor1: \" + postman.getGlobalVariable(\"WslcLuminaire1IdControlsPhotoSensor1d\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "bimUser",
							"type": "string"
						},
						{
							"key": "password",
							"value": "0sr4mB!m",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{PhotoSensor1Id}}\",\r\n    \"outNodeId\": \"{{WslcLuminaire1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Photo Sensor controlled by the Wslc Luminaire."
			},
			"response": []
		},
		{
			"name": "POST EmergencyLuminaire1 Controls PhotoSensor1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"EmergencyLuminaire1IdControlsPhotoSensor1d\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"PhotoSensor1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"EmergencyLuminaire1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"PhotoSensor\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"EmergencyLuminaire\");\r",
							"    \r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EmergencyLuminaire1 Id: \" + postman.getGlobalVariable(\"EmergencyLuminaire1Id\"), function () {});\r",
							"pm.test(\"PhotoSensor1 Id: \" + postman.getGlobalVariable(\"PhotoSensor1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from EmergencyLuminaire1 to PhotoSensor1: \" + postman.getGlobalVariable(\"EmergencyLuminaire1IdControlsPhotoSensor1d\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "bimUser",
							"type": "string"
						},
						{
							"key": "password",
							"value": "0sr4mB!m",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{PhotoSensor1Id}}\",\r\n    \"outNodeId\": \"{{EmergencyLuminaire1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates a Photo Sensor controlled by the Emergency Luminaire."
			},
			"response": []
		},
		{
			"name": "POST CentralBattery1 Controls EmergencyLuminaire1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"CentralBattery1ControlsEmergencyLuminaire1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"EmergencyLuminaire1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"CentralBattery1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"EmergencyLuminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"CentralBattery\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"CentralBattery1 Id: \" + postman.getGlobalVariable(\"CentralBattery1Id\"), function () {});\r",
							"pm.test(\"EmergencyLuminaire1 Id: \" + postman.getGlobalVariable(\"EmergencyLuminaire1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from CentralBattery1 to EmergencyLuminaire1: \" + postman.getGlobalVariable(\"CentralBattery1ControlsEmergencyLuminaire1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "bimUser",
							"type": "string"
						},
						{
							"key": "password",
							"value": "0sr4mB!m",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{EmergencyLuminaire1Id}}\",\r\n    \"outNodeId\": \"{{CentralBattery1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates an Emergency Luminaire controlled by the Central Battery."
			},
			"response": []
		},
		{
			"name": "POST CentralBattery1 Controls EventDispatcher1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"CentralBattery1ControlsEventDispatcher1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"EventDispatcher1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"CentralBattery1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"EventDispatcher\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"CentralBattery\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"CentralBattery1 Id: \" + postman.getGlobalVariable(\"CentralBattery1Id\"), function () {});\r",
							"pm.test(\"EventDispatcher1 Id: \" + postman.getGlobalVariable(\"EventDispatcher1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from CentralBattery1 to EventDispatcher1: \" + postman.getGlobalVariable(\"CentralBattery1ControlsEventDispatcher1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "bimUser",
							"type": "string"
						},
						{
							"key": "password",
							"value": "0sr4mB!m",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{EventDispatcher1Id}}\",\r\n    \"outNodeId\": \"{{CentralBattery1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates an Event Dispatcher controlled by the Central Battery."
			},
			"response": []
		},
		{
			"name": "POST FireAlarm1 Controls EventDispatcher1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Controls\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"FireAlarm1ControlsEventDispatcher1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"EventDispatcher1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"FireAlarm1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"EventDispatcher\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"FireAlarm\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"FireAlarm1 Id: \" + postman.getGlobalVariable(\"FireAlarm1Id\"), function () {});\r",
							"pm.test(\"EventDispatcher1 Id: \" + postman.getGlobalVariable(\"EventDispatcher1Id\"), function () {});\r",
							"pm.test(\"Controls relation Id from FireAlarm1 to EventDispatcher1: \" + postman.getGlobalVariable(\"FireAlarm1ControlsEventDispatcher1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "bimUser",
							"type": "string"
						},
						{
							"key": "password",
							"value": "0sr4mB!m",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{EventDispatcher1Id}}\",\r\n    \"outNodeId\": \"{{FireAlarm1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Controls",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Controls"
					]
				},
				"description": "Creates an Event Dispatcher controlled by the Fire Alarm."
			},
			"response": []
		},
		{
			"name": "POST Manager Manages Button1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Manages\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Manager1ManagesButton1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"Button1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"Manager1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Button\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Manager\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Manager1 Id: \" + postman.getGlobalVariable(\"Manager1Id\"), function () {});\r",
							"pm.test(\"Button1 Id: \" + postman.getGlobalVariable(\"Button1Id\"), function () {});\r",
							"pm.test(\"Manages relation Id from Manager1 to Button1: \" + postman.getGlobalVariable(\"Manager1ManagesButton1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "bimUser",
							"type": "string"
						},
						{
							"key": "password",
							"value": "0sr4mB!m",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{Button1Id}}\",\r\n    \"outNodeId\": \"{{Manager1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Manages",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Manages"
					]
				},
				"description": "Creates a Button managed by the Manager."
			},
			"response": []
		},
		{
			"name": "POST Manager Manages Calendar1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Manages\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Manager1ManagesCalendar1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"Calendar1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"Manager1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Calendar\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Manager\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Manager1 Id: \" + postman.getGlobalVariable(\"Manager1Id\"), function () {});\r",
							"pm.test(\"Calendar1 Id: \" + postman.getGlobalVariable(\"Calendar1Id\"), function () {});\r",
							"pm.test(\"Manages relation Id from Manager1 to Calendar1: \" + postman.getGlobalVariable(\"Manager1ManagesCalendar1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "bimUser",
							"type": "string"
						},
						{
							"key": "password",
							"value": "0sr4mB!m",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{Calendar1Id}}\",\r\n    \"outNodeId\": \"{{Manager1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Manages",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Manages"
					]
				},
				"description": "Creates a Calendar managed by the Manager."
			},
			"response": []
		},
		{
			"name": "POST Manager Manages CentralBattery1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Manages\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Manager1ManagesCentralBattery1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"CentralBattery1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"Manager1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"CentralBattery\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Manager\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Manager1 Id: \" + postman.getGlobalVariable(\"Manager1Id\"), function () {});\r",
							"pm.test(\"CentralBattery1 Id: \" + postman.getGlobalVariable(\"CentralBattery1Id\"), function () {});\r",
							"pm.test(\"Manages relation Id from Manager1 to CentralBattery1: \" + postman.getGlobalVariable(\"Manager1ManagesCentralBattery1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "bimUser",
							"type": "string"
						},
						{
							"key": "password",
							"value": "0sr4mB!m",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{CentralBattery1Id}}\",\r\n    \"outNodeId\": \"{{Manager1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Manages",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Manages"
					]
				},
				"description": "Creates a Central Battery managed by the Manager."
			},
			"response": []
		},
		{
			"name": "POST Manager Manages ContactClosureTrigger1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Manages\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Manager1ManagesContactClosureTrigger1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"ContactClosureTrigger1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"Manager1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"ContactClosureTrigger\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Manager\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Manager1 Id: \" + postman.getGlobalVariable(\"Manager1Id\"), function () {});\r",
							"pm.test(\"ContactClosureTrigger1 Id: \" + postman.getGlobalVariable(\"ContactClosureTrigger1Id\"), function () {});\r",
							"pm.test(\"Manages relation Id from Manager1 to ContactClosureTrigger1: \" + postman.getGlobalVariable(\"Manager1ManagesContactClosureTrigger1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "bimUser",
							"type": "string"
						},
						{
							"key": "password",
							"value": "0sr4mB!m",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{ContactClosureTrigger1Id}}\",\r\n    \"outNodeId\": \"{{Manager1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Manages",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Manages"
					]
				},
				"description": "Creates a Contact Closure Trigger managed by the Manager."
			},
			"response": []
		},
		{
			"name": "POST Manager Manages EventDispatcher1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Manages\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Manager1ManagesEventDispatcher1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"EventDispatcher1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"Manager1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"EventDispatcher\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Manager\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Manager1 Id: \" + postman.getGlobalVariable(\"Manager1Id\"), function () {});\r",
							"pm.test(\"EventDispatcher1 Id: \" + postman.getGlobalVariable(\"EventDispatcher1Id\"), function () {});\r",
							"pm.test(\"Manages relation Id from Manager1 to EventDispatcher1: \" + postman.getGlobalVariable(\"Manager1ManagesEventDispatcher1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "bimUser",
							"type": "string"
						},
						{
							"key": "password",
							"value": "0sr4mB!m",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{EventDispatcher1Id}}\",\r\n    \"outNodeId\": \"{{Manager1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Manages",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Manages"
					]
				},
				"description": "Creates an Event Dispatcher managed by the Manager."
			},
			"response": []
		},
		{
			"name": "POST Manager Manages EventList1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Manages\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Manager1ManagesEventList1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"EventList1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"Manager1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"EventList\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Manager\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Manager1 Id: \" + postman.getGlobalVariable(\"Manager1Id\"), function () {});\r",
							"pm.test(\"EventList1 Id: \" + postman.getGlobalVariable(\"EventList1Id\"), function () {});\r",
							"pm.test(\"Manages relation Id from Manager1 to EventList1: \" + postman.getGlobalVariable(\"Manager1ManagesEventList1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "bimUser",
							"type": "string"
						},
						{
							"key": "password",
							"value": "0sr4mB!m",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{EventList1Id}}\",\r\n    \"outNodeId\": \"{{Manager1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Manages",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Manages"
					]
				},
				"description": "Creates an Event List managed by the Manager."
			},
			"response": []
		},
		{
			"name": "POST Manager Manages SolarCalculator1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Manages\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setGlobalVariable(\"Manager1ManagesSolarCalculator1Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"SolarCalculator1Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"Manager1Id\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"SolarCalculator\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Manager\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Manager1 Id: \" + postman.getGlobalVariable(\"Manager1Id\"), function () {});\r",
							"pm.test(\"SolarCalculator1 Id: \" + postman.getGlobalVariable(\"SolarCalculator1Id\"), function () {});\r",
							"pm.test(\"Manages relation Id from Manager1 to SolarCalculator1: \" + postman.getGlobalVariable(\"Manager1ManagesSolarCalculator1Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "bimUser",
							"type": "string"
						},
						{
							"key": "password",
							"value": "0sr4mB!m",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{SolarCalculator1Id}}\",\r\n    \"outNodeId\": \"{{Manager1Id}}\"\r\n}"
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Manages",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Manages"
					]
				},
				"description": "Creates a Solar Calculator managed by the Manager."
			},
			"response": []
		},
		{
			"name": "GET all nodes under EncSystem",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "263550bb-9e36-4fa6-8d7e-6529b2b38c44",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.values.length).to.eql(52);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes?EncSystemId={{EncSystemId}}&pageSize=1000&pageIndex=0",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes"
					],
					"query": [
						{
							"key": "EncSystemId",
							"value": "{{EncSystemId}}"
						},
						{
							"key": "pageSize",
							"value": "1000"
						},
						{
							"key": "pageIndex",
							"value": "0"
						}
					]
				},
				"description": "Returns all the nodes"
			},
			"response": []
		},
		{
			"name": "GET all relationships under EncSystem",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "263550bb-9e36-4fa6-8d7e-6529b2b38c44",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.values.length).to.eql(102);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations?EncSystemId={{EncSystemId}}&pageSize=1000&pageIndex=0",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations"
					],
					"query": [
						{
							"key": "EncSystemId",
							"value": "{{EncSystemId}}"
						},
						{
							"key": "pageSize",
							"value": "1000"
						},
						{
							"key": "pageIndex",
							"value": "0"
						}
					]
				},
				"description": "Returns all the nodes"
			},
			"response": []
		},
		{
			"name": "GET Organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.nodeType).to.eql(\"Organization\");\r",
							"    pm.expect(jsonData.name).to.eql(\"OrganizationName\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(postman.getGlobalVariable(\"OrganizationId\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Organization/{{OrganizationId}}",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Organization",
						"{{OrganizationId}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET Organization Contains EncSystem relation",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.relationType).to.eql(\"Contains\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"OrganizationContainsEncSystemId\"));\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getGlobalVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getGlobalVariable(\"OrganizationId\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Contains/{{OrganizationContainsEncSystemId}}",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Contains",
						"{{OrganizationContainsEncSystemId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "DELETE  EncSystem",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1551f680-e5e9-46a4-b944-a39758717fec",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/EncSystem/{{EncSystemId}}?cascade=true",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"EncSystem",
						"{{EncSystemId}}"
					],
					"query": [
						{
							"key": "cascade",
							"value": "true"
						}
					]
				},
				"description": "Deletes a node by record id"
			},
			"response": []
		},
		{
			"name": "GET all nodes under EncSystem Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "263550bb-9e36-4fa6-8d7e-6529b2b38c44",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.values.length).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes?EncSystemId={{EncSystemId}}&pageSize=50&pageIndex=0",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes"
					],
					"query": [
						{
							"key": "EncSystemId",
							"value": "{{EncSystemId}}"
						},
						{
							"key": "pageSize",
							"value": "50"
						},
						{
							"key": "pageIndex",
							"value": "0"
						}
					]
				},
				"description": "Returns all the nodes"
			},
			"response": []
		},
		{
			"name": "GET all relations under EncSystem Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "263550bb-9e36-4fa6-8d7e-6529b2b38c44",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.values.length).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations?EncSystemId={{EncSystemId}}&pageSize=50&pageIndex=0",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations"
					],
					"query": [
						{
							"key": "EncSystemId",
							"value": "{{EncSystemId}}"
						},
						{
							"key": "pageSize",
							"value": "50"
						},
						{
							"key": "pageIndex",
							"value": "0"
						}
					]
				},
				"description": "Returns all the nodes"
			},
			"response": []
		},
		{
			"name": "DELETE  Organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1551f680-e5e9-46a4-b944-a39758717fec",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Organization/{{OrganizationId}}?cascade=true",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Organization",
						"{{OrganizationId}}"
					],
					"query": [
						{
							"key": "cascade",
							"value": "true"
						}
					]
				},
				"description": "Deletes a node by record id"
			},
			"response": []
		},
		{
			"name": "GET Organization Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/nodes/Organization/{{OrganizationId}}",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"nodes",
						"Organization",
						"{{OrganizationId}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET Organization Contains EncSystem relation Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"//capture script finish time\r",
							"var finishTime = new Date().getTime();\r",
							"postman.setGlobalVariable(\"FinishTime\", finishTime);\r",
							"//console.log(postman.getGlobalVariable(\"FinishTime\"));\r",
							"\r",
							"//seconds interval\r",
							"var diff = (postman.getGlobalVariable(\"FinishTime\") - postman.getGlobalVariable(\"StartTime\"))/1000; \r",
							"//allows 30% variance\r",
							"var benchmark = 16*1.3;\r",
							"pm.test(\"Entire script should be done within \" + benchmark + \" seconds\", function () {\r",
							"    pm.expect(diff).to.be.below(benchmark);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{http}}{{env}}{{urlConfig}}/v1/relations/Contains/{{OrganizationContainsEncSystemId}}",
					"host": [
						"{{http}}{{env}}{{urlConfig}}"
					],
					"path": [
						"v1",
						"relations",
						"Contains",
						"{{OrganizationContainsEncSystemId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "username",
				"value": "bimUser",
				"type": "string"
			},
			{
				"key": "password",
				"value": "0sr4mB!m",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "70296f5e-e050-46bd-954f-c899ba361909",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7e6bac53-bdeb-4338-82e6-9ec2ddceae77",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}