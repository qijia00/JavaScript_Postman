{
	"info": {
		"_postman_id": "91f96b2c-ab2d-42a1-be84-7071f28814ce",
		"name": "regressionDAG",
		"description": "test if cascade delete works for DAG: Directed acyclic graph\n\nThe design for this script is:\n\nOrganization contains EncSystem; EncSystem contains Building, Building contains Floor;\nFloor contains OrganizationalArea, Floor contains Keypad, Floor contains Luminaire;\n\nOrganizationalArea controls Luminaire; Keypad controls OrganizationalArea;\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POST Organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Organization\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OrganizationName\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"OrganizationId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Output node Id\r",
							"pm.test(\"Organization Id: \" + postman.getEnvironmentVariable(\"OrganizationId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Organization\",\r\n\t\t\"name\": \"OrganizationName\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{url}}/v1/nodes/Organization",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"Organization"
					]
				},
				"description": "Creates an Organization."
			},
			"response": []
		},
		{
			"name": "POST EncSystem contained by Organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"EncSystem\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"EncSystemName\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"EncSystemId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(postman.getEnvironmentVariable(\"relation1Type\"));\r",
							"    postman.setEnvironmentVariable(\"relation1Type\", jsonData.relation.relationType);\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"organizationRelation1EncSystemId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getEnvironmentVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getEnvironmentVariable(\"OrganizationId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"EncSystem\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Organization\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Organization Id: \" + postman.getEnvironmentVariable(\"OrganizationId\"), function () {});\r",
							"pm.test(\"EncSystem Id: \" + postman.getEnvironmentVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(postman.getEnvironmentVariable(\"relation1Type\") + \" relation Id from Organizational to EncSystem: \" + postman.getEnvironmentVariable(\"organizationRelation1EncSystemId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"EncSystem\",\r\n\t\t\"name\": \"EncSystemName\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"{{relation1Type}}\",\r\n\t\t\"outNodeType\": \"Organization\",\r\n\t\t\"outNodeId\": \"{{OrganizationId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{url}}/v1/nodes/EncSystem",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"EncSystem"
					]
				},
				"description": "Creates an EncSystem contains by the Organization."
			},
			"response": []
		},
		{
			"name": "POST Building contained by EncSystem",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Building\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"BuildingName\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"BuildingId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(postman.getEnvironmentVariable(\"relation1Type\"));\r",
							"    postman.setEnvironmentVariable(\"relation1Type\", jsonData.relation.relationType);\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"encSystemRelation1BuildingId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getEnvironmentVariable(\"BuildingId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getEnvironmentVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Building\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"EncSystem\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"EncSystem Id: \" + postman.getEnvironmentVariable(\"EncSystemId\"), function () {});\r",
							"pm.test(\"Building Id: \" + postman.getEnvironmentVariable(\"BuildingId\"), function () {});\r",
							"pm.test(postman.getEnvironmentVariable(\"relation1Type\") + \" relation Id from EncSystem to Building: \" + postman.getEnvironmentVariable(\"encSystemRelation1BuildingId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Building\",\r\n\t\t\"name\": \"BuildingName\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"{{relation1Type}}\",\r\n\t\t\"outNodeType\": \"EncSystem\",\r\n\t\t\"outNodeId\": \"{{EncSystemId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{url}}/v1/nodes/Building",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"Building"
					]
				},
				"description": "Creates a Building contains by the EncSystem."
			},
			"response": []
		},
		{
			"name": "POST Floor contained by Building",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Floor\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"FloorName\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"FloorId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(postman.getEnvironmentVariable(\"relation1Type\"));\r",
							"    postman.setEnvironmentVariable(\"relation1Type\", jsonData.relation.relationType);\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"buildingRelation1FloorId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getEnvironmentVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getEnvironmentVariable(\"BuildingId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Floor\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Building\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Building Id: \" + postman.getEnvironmentVariable(\"BuildingId\"), function () {});\r",
							"pm.test(\"Floor Id: \" + postman.getEnvironmentVariable(\"FloorId\"), function () {});\r",
							"pm.test(postman.getEnvironmentVariable(\"relation1Type\") + \" relation Id from Building to Floor: \" + postman.getEnvironmentVariable(\"buildingRelation1FloorId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Floor\",\r\n\t\t\"name\": \"FloorName\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"{{relation1Type}}\",\r\n\t\t\"outNodeType\": \"Building\",\r\n\t\t\"outNodeId\": \"{{BuildingId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{url}}/v1/nodes/Floor",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"Floor"
					]
				},
				"description": "Creates a Floor contains by the Building."
			},
			"response": []
		},
		{
			"name": "POST OrganizationalArea contained by Floor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OrganizationalAreaName\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"OrganizationalAreaId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(postman.getEnvironmentVariable(\"relation1Type\"));\r",
							"    postman.setEnvironmentVariable(\"relation1Type\", jsonData.relation.relationType);\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"floorRelation1OrganizationalAreaId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getEnvironmentVariable(\"OrganizationalAreaId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getEnvironmentVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getEnvironmentVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"OrganizationalArea Id: \" + postman.getEnvironmentVariable(\"OrganizationalAreaId\"), function () {});\r",
							"pm.test(postman.getEnvironmentVariable(\"relation1Type\") + \" relation Id from Floor to OrganizationalArea: \" + postman.getEnvironmentVariable(\"floorRelation1OrganizationalAreaId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"OrganizationalArea\",\r\n\t\t\"name\": \"OrganizationalAreaName\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"{{relation1Type}}\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{url}}/v1/nodes/OrganizationalArea",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"OrganizationalArea"
					]
				},
				"description": "Creates an OrganizationalArea contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST OrganizationalArea2 contained by Floor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"OrganizationalArea2Name\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"OrganizationalArea2Id\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(postman.getEnvironmentVariable(\"relation1Type\"));\r",
							"    postman.setEnvironmentVariable(\"relation1Type\", jsonData.relation.relationType);\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"floorRelation1OrganizationalArea2Id\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getEnvironmentVariable(\"OrganizationalArea2Id\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getEnvironmentVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getEnvironmentVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"OrganizationalArea2 Id: \" + postman.getEnvironmentVariable(\"OrganizationalArea2Id\"), function () {});\r",
							"pm.test(postman.getEnvironmentVariable(\"relation1Type\") + \" relation Id from Floor to OrganizationalArea2: \" + postman.getEnvironmentVariable(\"floorRelation1OrganizationalArea2Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"OrganizationalArea\",\r\n\t\t\"name\": \"OrganizationalArea2Name\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"{{relation1Type}}\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{url}}/v1/nodes/OrganizationalArea",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"OrganizationalArea"
					]
				},
				"description": "Creates an OrganizationalArea contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Luminaire contained by Floor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"LuminaireName\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"LuminaireId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(postman.getEnvironmentVariable(\"relation1Type\"));\r",
							"    postman.setEnvironmentVariable(\"relation1Type\", jsonData.relation.relationType);\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"floorRelation1LuminaireId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getEnvironmentVariable(\"LuminaireId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getEnvironmentVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getEnvironmentVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"Luminaire Id: \" + postman.getEnvironmentVariable(\"LuminaireId\"), function () {});\r",
							"pm.test(postman.getEnvironmentVariable(\"relation1Type\") + \" relation Id from Floor to Luminaire: \" + postman.getEnvironmentVariable(\"floorRelation1LuminaireId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Luminaire\",\r\n\t\t\"name\": \"LuminaireName\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"{{relation1Type}}\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{url}}/v1/nodes/Luminaire",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"Luminaire"
					]
				},
				"description": "Creates a Luminaire contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Keypad contained by Floor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"Keypad\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"KeypadName\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"KeypadId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(postman.getEnvironmentVariable(\"relation1Type\"));\r",
							"    postman.setEnvironmentVariable(\"relation1Type\", jsonData.relation.relationType);\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"floorRelation1KeypadId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getEnvironmentVariable(\"KeypadId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getEnvironmentVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"Keypad\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getEnvironmentVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"Keypad Id: \" + postman.getEnvironmentVariable(\"KeypadId\"), function () {});\r",
							"pm.test(postman.getEnvironmentVariable(\"relation1Type\") + \" relation Id from Floor to Keypad: \" + postman.getEnvironmentVariable(\"floorRelation1KeypadId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"Keypad\",\r\n\t\t\"name\": \"KeypadName\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"{{relation1Type}}\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{url}}/v1/nodes/Keypad",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"Keypad"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST PhotoSensor contained by Floor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check - node section\r",
							"pm.test(\"Response body check - node section\", function () {\r",
							"    pm.expect(jsonData.node.nodeType).to.eql(\"PhotoSensor\");\r",
							"    pm.expect(jsonData.node.name).to.eql(\"PhotoSensorName\");\r",
							"    pm.expect(jsonData.node.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.node.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"PhotoSensorId\", jsonData.node.id);\r",
							"});\r",
							"\r",
							"//Response body check - relation section\r",
							"pm.test(\"Response body check - relation section\", function () {\r",
							"    pm.expect(jsonData.relation.relationType).to.eql(postman.getEnvironmentVariable(\"relation1Type\"));\r",
							"    postman.setEnvironmentVariable(\"relation1Type\", jsonData.relation.relationType);\r",
							"    pm.expect(jsonData.relation.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.relation.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"floorRelation1PhotoSensorId\", jsonData.relation.id);\r",
							"    pm.expect(jsonData.relation.inNodeId).to.eql(postman.getEnvironmentVariable(\"PhotoSensorId\"));\r",
							"    pm.expect(jsonData.relation.outNodeId).to.eql(postman.getEnvironmentVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.relation.inNodeType).to.eql(\"PhotoSensor\");\r",
							"    pm.expect(jsonData.relation.outNodeType).to.eql(\"Floor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Floor Id: \" + postman.getEnvironmentVariable(\"FloorId\"), function () {});\r",
							"pm.test(\"PhotoSensor Id: \" + postman.getEnvironmentVariable(\"PhotoSensorId\"), function () {});\r",
							"pm.test(postman.getEnvironmentVariable(\"relation1Type\") + \" relation Id from Floor to PhotoSensor: \" + postman.getEnvironmentVariable(\"floorRelation1PhotoSensorId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"node\": {\r\n\t\t\"nodeType\": \"PhotoSensor\",\r\n\t\t\"name\": \"PhotoSensorName\"\r\n\t},\r\n\t\"relation\": {\r\n\t\t\"relationType\": \"{{relation1Type}}\",\r\n\t\t\"outNodeType\": \"Floor\",\r\n\t\t\"outNodeId\": \"{{FloorId}}\"\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{url}}/v1/nodes/PhotoSensor",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"PhotoSensor"
					]
				},
				"description": "Creates a Keypad contains by the Floor."
			},
			"response": []
		},
		{
			"name": "POST Luminaire contained by OrganizationalArea",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(postman.getEnvironmentVariable(\"relation2Type\"));\r",
							"    postman.setEnvironmentVariable(\"relation2Type\", jsonData.relationType);\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"organizationalAreaRelation2LuminaireId\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getEnvironmentVariable(\"LuminaireId\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getEnvironmentVariable(\"OrganizationalAreaId\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OrganizationalArea\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OrganizationalArea Id: \" + postman.getEnvironmentVariable(\"OrganizationalAreaId\"), function () {});\r",
							"pm.test(\"Luminaire Id: \" + postman.getEnvironmentVariable(\"LuminaireId\"), function () {});\r",
							"pm.test(postman.getEnvironmentVariable(\"relation2Type\") + \" relation Id from OrganizationalArea to Luminaire: \" + postman.getEnvironmentVariable(\"organizationalAreaRelation2LuminaireId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{LuminaireId}}\",\r\n    \"outNodeId\": \"{{OrganizationalAreaId}}\"\r\n}"
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation2Type}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation2Type}}"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST Luminaire contained by PhotoSensor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(postman.getEnvironmentVariable(\"relation2Type\"));\r",
							"    postman.setEnvironmentVariable(\"relation2Type\", jsonData.relationType);\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"photoSensorRelation2LuminaireId\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getEnvironmentVariable(\"LuminaireId\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getEnvironmentVariable(\"PhotoSensorId\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PhotoSensor\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"PhotoSensor Id: \" + postman.getEnvironmentVariable(\"PhotoSensorId\"), function () {});\r",
							"pm.test(\"Luminaire Id: \" + postman.getEnvironmentVariable(\"LuminaireId\"), function () {});\r",
							"pm.test(postman.getEnvironmentVariable(\"relation2Type\") + \" relation Id from PhotoSensor to Luminaire: \" + postman.getEnvironmentVariable(\"photoSensorRelation2LuminaireId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{LuminaireId}}\",\r\n    \"outNodeId\": \"{{PhotoSensorId}}\"\r\n}"
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation2Type}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation2Type}}"
					]
				},
				"description": "Creates a Luminaire controled by the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST OrganizationalArea controlled by Keypad",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(postman.getEnvironmentVariable(\"relation2Type\"));\r",
							"    postman.setEnvironmentVariable(\"relation2Type\", jsonData.relationType);\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"keypadRelation2OrganizationalAreaId\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getEnvironmentVariable(\"OrganizationalAreaId\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getEnvironmentVariable(\"KeypadId\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Keypad\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Keypad Id: \" + postman.getEnvironmentVariable(\"KeypadId\"), function () {});\r",
							"pm.test(\"OrganizationalArea Id: \" + postman.getEnvironmentVariable(\"OrganizationalAreaId\"), function () {});\r",
							"pm.test(postman.getEnvironmentVariable(\"relation2Type\") + \" relation Id from Keypad to OrganizationalArea: \" + postman.getEnvironmentVariable(\"keypadRelation2OrganizationalAreaId\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalAreaId}}\",\r\n    \"outNodeId\": \"{{KeypadId}}\"\r\n}"
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation2Type}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation2Type}}"
					]
				},
				"description": "Creates a Keypad controls the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST OrganizationalArea2 controlled by Keypad",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(postman.getEnvironmentVariable(\"relation2Type\"));\r",
							"    postman.setEnvironmentVariable(\"relation2Type\", jsonData.relationType);\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"keypadRelation2OrganizationalArea2Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getEnvironmentVariable(\"OrganizationalArea2Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getEnvironmentVariable(\"KeypadId\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Keypad\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"Keypad Id: \" + postman.getEnvironmentVariable(\"KeypadId\"), function () {});\r",
							"pm.test(\"OrganizationalArea2 Id: \" + postman.getEnvironmentVariable(\"OrganizationalArea2Id\"), function () {});\r",
							"pm.test(postman.getEnvironmentVariable(\"relation2Type\") + \" relation Id from Keypad to OrganizationalArea2: \" + postman.getEnvironmentVariable(\"keypadRelation2OrganizationalArea2Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea2Id}}\",\r\n    \"outNodeId\": \"{{KeypadId}}\"\r\n}"
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation2Type}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation2Type}}"
					]
				},
				"description": "Creates a Keypad controls the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "POST OrganizationalArea2 controlled by OrganizationalArea",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46a32ea9-5880-4e7a-88a7-7c92afbeb7fd",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    pm.expect(jsonData.relationType).to.eql(postman.getEnvironmentVariable(\"relation2Type\"));\r",
							"    postman.setEnvironmentVariable(\"relation2Type\", jsonData.relationType);\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.not.eql(null);\r",
							"    postman.setEnvironmentVariable(\"organizationalAreaRelation2OrganizationalArea2Id\", jsonData.id);\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getEnvironmentVariable(\"OrganizationalArea2Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getEnvironmentVariable(\"OrganizationalAreaId\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OrganizationalArea\");\r",
							"});\r",
							"\r",
							"//Output node and relation Ids\r",
							"pm.test(\"OrganizationalArea Id: \" + postman.getEnvironmentVariable(\"OrganizationalAreaId\"), function () {});\r",
							"pm.test(\"OrganizationalArea2 Id: \" + postman.getEnvironmentVariable(\"OrganizationalArea2Id\"), function () {});\r",
							"pm.test(postman.getEnvironmentVariable(\"relation2Type\") + \" relation Id from OrganizationalArea to OrganizationalArea2: \" + postman.getEnvironmentVariable(\"organizationalAreaRelation2OrganizationalArea2Id\"), function () {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"inNodeId\": \"{{OrganizationalArea2Id}}\",\r\n    \"outNodeId\": \"{{OrganizationalAreaId}}\"\r\n}"
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation2Type}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation2Type}}"
					]
				},
				"description": "Creates a Keypad controls the OrganizationalArea."
			},
			"response": []
		},
		{
			"name": "GET Organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.nodeType).to.eql(\"Organization\");\r",
							"    pm.expect(jsonData.name).to.eql(\"OrganizationName\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"OrganizationId\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/nodes/Organization/{{OrganizationId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"Organization",
						"{{OrganizationId}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET EncSystem",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.nodeType).to.eql(\"EncSystem\");\r",
							"    pm.expect(jsonData.name).to.eql(\"EncSystemName\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"EncSystemId\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/nodes/EncSystem/{{EncSystemId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"EncSystem",
						"{{EncSystemId}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET Building",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.nodeType).to.eql(\"Building\");\r",
							"    pm.expect(jsonData.name).to.eql(\"BuildingName\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"BuildingId\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/nodes/Building/{{BuildingId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"Building",
						"{{BuildingId}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET Floor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.nodeType).to.eql(\"Floor\");\r",
							"    pm.expect(jsonData.name).to.eql(\"FloorName\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"FloorId\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/nodes/Floor/{{FloorId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"Floor",
						"{{FloorId}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET OrganizationalArea",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.nodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.name).to.eql(\"OrganizationalAreaName\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"OrganizationalAreaId\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/nodes/OrganizationlArea/{{OrganizationalAreaId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"OrganizationlArea",
						"{{OrganizationalAreaId}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET OrganizationalArea2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.nodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.name).to.eql(\"OrganizationalArea2Name\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"OrganizationalArea2Id\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/nodes/OrganizationlArea/{{OrganizationalArea2Id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"OrganizationlArea",
						"{{OrganizationalArea2Id}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET Luminaire",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.nodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.name).to.eql(\"LuminaireName\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"LuminaireId\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/nodes/Luminaire/{{LuminaireId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"Luminaire",
						"{{LuminaireId}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET Keypad",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.nodeType).to.eql(\"Keypad\");\r",
							"    pm.expect(jsonData.name).to.eql(\"KeypadName\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"KeypadId\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/nodes/Keypad/{{KeypadId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"Keypad",
						"{{KeypadId}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET PhotoSensor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.nodeType).to.eql(\"PhotoSensor\");\r",
							"    pm.expect(jsonData.name).to.eql(\"PhotoSensorName\");\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"PhotoSensorId\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/nodes/Keypad/{{PhotoSensorId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"Keypad",
						"{{PhotoSensorId}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET Organization contains EncSystem",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.relationType).to.eql(pm.environment.get(\"relation1Type\"));\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"organizationRelation1EncSystemId\"));\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getEnvironmentVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getEnvironmentVariable(\"OrganizationId\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"EncSystem\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Organization\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation1Type}}/{{organizationRelation1EncSystemId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation1Type}}",
						"{{organizationRelation1EncSystemId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET EncSystem contains Building",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.relationType).to.eql(pm.environment.get(\"relation1Type\"));\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"encSystemRelation1BuildingId\"));\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getEnvironmentVariable(\"BuildingId\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getEnvironmentVariable(\"EncSystemId\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Building\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"EncSystem\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation1Type}}/{{encSystemRelation1BuildingId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation1Type}}",
						"{{encSystemRelation1BuildingId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET Building contains Floor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.relationType).to.eql(pm.environment.get(\"relation1Type\"));\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"buildingRelation1FloorId\"));\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getEnvironmentVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getEnvironmentVariable(\"BuildingId\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Floor\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Building\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation1Type}}/{{buildingRelation1FloorId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation1Type}}",
						"{{buildingRelation1FloorId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET Floor contains OrganizationalArea",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.relationType).to.eql(pm.environment.get(\"relation1Type\"));\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"floorRelation1OrganizationalAreaId\"));\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getEnvironmentVariable(\"OrganizationalAreaId\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getEnvironmentVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Floor\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation1Type}}/{{floorRelation1OrganizationalAreaId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation1Type}}",
						"{{floorRelation1OrganizationalAreaId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET Floor contains OrganizationalArea2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.relationType).to.eql(pm.environment.get(\"relation1Type\"));\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"floorRelation1OrganizationalArea2Id\"));\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getEnvironmentVariable(\"OrganizationalArea2Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getEnvironmentVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Floor\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation1Type}}/{{floorRelation1OrganizationalArea2Id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation1Type}}",
						"{{floorRelation1OrganizationalArea2Id}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET Floor contains Luminaire",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.relationType).to.eql(pm.environment.get(\"relation1Type\"));\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"floorRelation1LuminaireId\"));\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getEnvironmentVariable(\"LuminaireId\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getEnvironmentVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Floor\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation1Type}}/{{floorRelation1LuminaireId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation1Type}}",
						"{{floorRelation1LuminaireId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET Floor contains Keypad",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.relationType).to.eql(pm.environment.get(\"relation1Type\"));\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"floorRelation1KeypadId\"));\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getEnvironmentVariable(\"KeypadId\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getEnvironmentVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Keypad\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Floor\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation1Type}}/{{floorRelation1KeypadId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation1Type}}",
						"{{floorRelation1KeypadId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET Floor contains PhotoSensor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.relationType).to.eql(pm.environment.get(\"relation1Type\"));\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"floorRelation1PhotoSensorId\"));\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getEnvironmentVariable(\"PhotoSensorId\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getEnvironmentVariable(\"FloorId\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"PhotoSensor\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Floor\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation1Type}}/{{floorRelation1PhotoSensorId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation1Type}}",
						"{{floorRelation1PhotoSensorId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET OrganizationalArea controls Luminaire",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.relationType).to.eql(pm.environment.get(\"relation2Type\"));\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"organizationalAreaRelation2LuminaireId\"));\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getEnvironmentVariable(\"LuminaireId\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getEnvironmentVariable(\"OrganizationalAreaId\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OrganizationalArea\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation2Type}}/{{organizationalAreaRelation2LuminaireId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation2Type}}",
						"{{organizationalAreaRelation2LuminaireId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET PhotoSensor controls Luminaire",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.relationType).to.eql(pm.environment.get(\"relation2Type\"));\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"photoSensorRelation2LuminaireId\"));\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getEnvironmentVariable(\"LuminaireId\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getEnvironmentVariable(\"PhotoSensorId\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"Luminaire\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"PhotoSensor\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation2Type}}/{{photoSensorRelation2LuminaireId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation2Type}}",
						"{{photoSensorRelation2LuminaireId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET Keypad controls OrganizationalArea",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.relationType).to.eql(pm.environment.get(\"relation2Type\"));\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"keypadRelation2OrganizationalAreaId\"));\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getEnvironmentVariable(\"OrganizationalAreaId\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getEnvironmentVariable(\"KeypadId\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Keypad\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation2Type}}/{{keypadRelation2OrganizationalAreaId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation2Type}}",
						"{{keypadRelation2OrganizationalAreaId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET Keypad controls OrganizationalArea2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.relationType).to.eql(pm.environment.get(\"relation2Type\"));\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"keypadRelation2OrganizationalArea2Id\"));\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getEnvironmentVariable(\"OrganizationalArea2Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getEnvironmentVariable(\"KeypadId\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"Keypad\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation2Type}}/{{keypadRelation2OrganizationalArea2Id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation2Type}}",
						"{{keypadRelation2OrganizationalArea2Id}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET OrganizationalArea controls OrganizationalArea2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response body check\r",
							"pm.test(\"Response body check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.relationType).to.eql(pm.environment.get(\"relation2Type\"));\r",
							"    pm.expect(jsonData.createdBy).to.eql(\"root\");\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"organizationalAreaRelation2OrganizationalArea2Id\"));\r",
							"    pm.expect(jsonData.inNodeId).to.eql(postman.getEnvironmentVariable(\"OrganizationalArea2Id\"));\r",
							"    pm.expect(jsonData.outNodeId).to.eql(postman.getEnvironmentVariable(\"OrganizationalAreaId\"));\r",
							"    pm.expect(jsonData.inNodeType).to.eql(\"OrganizationalArea\");\r",
							"    pm.expect(jsonData.outNodeType).to.eql(\"OrganizationalArea\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation2Type}}/{{organizationalAreaRelation2OrganizationalArea2Id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation2Type}}",
						"{{organizationalAreaRelation2OrganizationalArea2Id}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "DELETE  Organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1551f680-e5e9-46a4-b944-a39758717fec",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code should be 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/nodes/Organization/{{OrganizationId}}?cascade=true",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"Organization",
						"{{OrganizationId}}"
					],
					"query": [
						{
							"key": "cascade",
							"value": "true"
						}
					]
				},
				"description": "Deletes a node by record id"
			},
			"response": []
		},
		{
			"name": "GET Organization Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/nodes/Organization/{{OrganizationId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"Organization",
						"{{OrganizationId}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET EncSystem Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/nodes/EncSystem/{{EncSystemId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"EncSystem",
						"{{EncSystemId}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET Building Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/nodes/Building/{{BuildingId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"Building",
						"{{BuildingId}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET Floor Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/nodes/Floor/{{FloorId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"Floor",
						"{{FloorId}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET OrganizationalArea Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/nodes/OrganizationlArea/{{OrganizationalAreaId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"OrganizationlArea",
						"{{OrganizationalAreaId}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET OrganizationalArea2 Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/nodes/OrganizationlArea/{{OrganizationalArea2Id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"OrganizationlArea",
						"{{OrganizationalArea2Id}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET Luminaire Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/nodes/Luminaire/{{LuminaireId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"Luminaire",
						"{{LuminaireId}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET Keypad Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/nodes/Keypad/{{KeypadId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"Keypad",
						"{{KeypadId}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET PhotoSensor Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3609fb27-77a8-4713-8e2f-b183609ed963",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/nodes/Keypad/{{PhotoSensorId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"nodes",
						"Keypad",
						"{{PhotoSensorId}}"
					]
				},
				"description": "Returns a node by ID"
			},
			"response": []
		},
		{
			"name": "GET Organization contains EncSystem Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation1Type}}/{{organizationRelation1EncSystemId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation1Type}}",
						"{{organizationRelation1EncSystemId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET EncSystem contains Building Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation1Type}}/{{encSystemRelation1BuildingId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation1Type}}",
						"{{encSystemRelation1BuildingId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET Building contains Floor Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation1Type}}/{{buildingRelation1FloorId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation1Type}}",
						"{{buildingRelation1FloorId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET Floor contains OrganizationalArea Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation1Type}}/{{floorRelation1OrganizationalAreaId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation1Type}}",
						"{{floorRelation1OrganizationalAreaId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET Floor contains OrganizationalArea2 Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation1Type}}/{{floorRelation1OrganizationalArea2Id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation1Type}}",
						"{{floorRelation1OrganizationalArea2Id}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET Floor contains Luminaire Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation1Type}}/{{floorRelation1LuminaireId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation1Type}}",
						"{{floorRelation1LuminaireId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET Floor contains Keypad Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation1Type}}/{{floorRelation1KeypadId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation1Type}}",
						"{{floorRelation1KeypadId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET Floor contains PhotoSensor Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation1Type}}/{{floorRelation1PhotoSensorId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation1Type}}",
						"{{floorRelation1PhotoSensorId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET OrganizationalArea controls Luminaire Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation2Type}}/{{organizationalAreaRelation2LuminaireId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation2Type}}",
						"{{organizationalAreaRelation2LuminaireId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET PhotoSensor controls Luminaire Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation2Type}}/{{photoSensorRelation2LuminaireId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation2Type}}",
						"{{photoSensorRelation2LuminaireId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET Keypad controls OrganizationalArea Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation2Type}}/{{keypadRelation2OrganizationalAreaId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation2Type}}",
						"{{keypadRelation2OrganizationalAreaId}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET  /v1/relations/{relationType}/{id} Keypad controls OrganizationalArea2 Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation2Type}}/{{keypadRelation2OrganizationalArea2Id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation2Type}}",
						"{{keypadRelation2OrganizationalArea2Id}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		},
		{
			"name": "GET  /v1/relations/{relationType}/{id} OrganizationalArea controls OrganizationalArea2 Gone",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac04f39-f2fe-4a64-8475-9a79c6a5847f",
						"exec": [
							"//Response code check\r",
							"pm.test(\"Response code check - 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/v1/relations/{{relation2Type}}/{{organizationalAreaRelation2OrganizationalArea2Id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"relations",
						"{{relation2Type}}",
						"{{organizationalAreaRelation2OrganizationalArea2Id}}"
					]
				},
				"description": "Returns a relation by ID"
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "username",
				"value": "removed",
				"type": "string"
			},
			{
				"key": "password",
				"value": "removed",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "70296f5e-e050-46bd-954f-c899ba361909",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7e6bac53-bdeb-4338-82e6-9ec2ddceae77",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}